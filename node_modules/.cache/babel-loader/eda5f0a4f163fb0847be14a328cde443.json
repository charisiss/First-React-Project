{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst Base = require('./Base');\n\nconst VoiceState = require('./VoiceState');\n\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\n\nconst {\n  Error\n} = require('../errors');\n\nconst GuildMemberRoleManager = require('../managers/GuildMemberRoleManager');\n\nconst Permissions = require('../util/Permissions');\n/**\n * @type {WeakSet<GuildMember>}\n * @private\n * @internal\n */\n\n\nconst deletedGuildMembers = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\n\nclass GuildMember extends Base {\n  constructor(client, data, guild) {\n    super(client);\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n    /**\n     * The timestamp the member joined the guild at\n     * @type {?number}\n     */\n\n    this.joinedTimestamp = null;\n    /**\n     * The last timestamp this member started boosting the guild\n     * @type {?number}\n     */\n\n    this.premiumSinceTimestamp = null;\n    /**\n     * The nickname of this member, if they have one\n     * @type {?string}\n     */\n\n    this.nickname = null;\n    /**\n     * Whether this member has yet to pass the guild's membership gate\n     * @type {boolean}\n     */\n\n    this.pending = false;\n    /**\n     * The timestamp this member's timeout will be removed\n     * @type {?number}\n     */\n\n    this.communicationDisabledUntilTimestamp = null;\n    this._roles = [];\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user that this guild member instance represents\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n\n    if ('nick' in data) this.nickname = data.nick;\n\n    if ('avatar' in data) {\n      /**\n       * The guild member's avatar hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else if (typeof this.avatar !== 'string') {\n      this.avatar = null;\n    }\n\n    if ('joined_at' in data) this.joinedTimestamp = new Date(data.joined_at).getTime();\n\n    if ('premium_since' in data) {\n      this.premiumSinceTimestamp = data.premium_since ? new Date(data.premium_since).getTime() : null;\n    }\n\n    if ('roles' in data) this._roles = data.roles;\n    this.pending = data.pending ?? false;\n\n    if ('communication_disabled_until' in data) {\n      this.communicationDisabledUntilTimestamp = data.communication_disabled_until && Date.parse(data.communication_disabled_until);\n    }\n  }\n\n  _clone() {\n    const clone = super._clone();\n\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n  /**\n   * Whether or not the structure has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n\n\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('GuildMember#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    return deletedGuildMembers.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('GuildMember#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    if (value) deletedGuildMembers.add(this);else deletedGuildMembers.delete(this);\n  }\n  /**\n   * Whether this GuildMember is a partial\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return this.joinedTimestamp === null;\n  }\n  /**\n   * A manager for the roles belonging to this member\n   * @type {GuildMemberRoleManager}\n   * @readonly\n   */\n\n\n  get roles() {\n    return new GuildMemberRoleManager(this);\n  }\n  /**\n   * The voice state of this member\n   * @type {VoiceState}\n   * @readonly\n   */\n\n\n  get voice() {\n    return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, {\n      user_id: this.id\n    });\n  }\n  /**\n   * A link to the member's guild avatar.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  avatarURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.avatar) return null;\n    return this.client.rest.cdn.GuildMemberAvatar(this.guild.id, this.id, this.avatar, format, size, dynamic);\n  }\n  /**\n   * A link to the member's guild avatar if they have one.\n   * Otherwise, a link to their {@link User#displayAvatarURL} will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n\n\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.user.displayAvatarURL(options);\n  }\n  /**\n   * The time this member joined the guild\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get joinedAt() {\n    return this.joinedTimestamp ? new Date(this.joinedTimestamp) : null;\n  }\n  /**\n   * The time this member's timeout will be removed\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get communicationDisabledUntil() {\n    return this.communicationDisabledUntilTimestamp && new Date(this.communicationDisabledUntilTimestamp);\n  }\n  /**\n   * The last time this member started boosting the guild\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get premiumSince() {\n    return this.premiumSinceTimestamp ? new Date(this.premiumSinceTimestamp) : null;\n  }\n  /**\n   * The presence of this guild member\n   * @type {?Presence}\n   * @readonly\n   */\n\n\n  get presence() {\n    return this.guild.presences.resolve(this.id);\n  }\n  /**\n   * The displayed color of this member in base 10\n   * @type {number}\n   * @readonly\n   */\n\n\n  get displayColor() {\n    return this.roles.color?.color ?? 0;\n  }\n  /**\n   * The displayed color of this member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n\n\n  get displayHexColor() {\n    return this.roles.color?.hexColor ?? '#000000';\n  }\n  /**\n   * The member's id\n   * @type {Snowflake}\n   * @readonly\n   */\n\n\n  get id() {\n    return this.user.id;\n  }\n  /**\n   * The nickname of this member, or their username if they don't have one\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get displayName() {\n    return this.nickname ?? this.user.username;\n  }\n  /**\n   * The overall set of permissions for this member, taking only roles and owner status into account\n   * @type {Readonly<Permissions>}\n   * @readonly\n   */\n\n\n  get permissions() {\n    if (this.user.id === this.guild.ownerId) return new Permissions(Permissions.ALL).freeze();\n    return new Permissions(this.roles.cache.map(role => role.permissions)).freeze();\n  }\n  /**\n   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\n   * This is a prerequisite for many moderative actions.\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get manageable() {\n    if (this.user.id === this.guild.ownerId) return false;\n    if (this.user.id === this.client.user.id) return false;\n    if (this.client.user.id === this.guild.ownerId) return true;\n    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return this.guild.me.roles.highest.comparePositionTo(this.roles.highest) > 0;\n  }\n  /**\n   * Whether this member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get kickable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.KICK_MEMBERS);\n  }\n  /**\n   * Whether this member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get bannable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.BAN_MEMBERS);\n  }\n  /**\n   * Whether this member is moderatable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get moderatable() {\n    return this.manageable && (this.guild.me?.permissions.has(Permissions.FLAGS.MODERATE_MEMBERS) ?? false);\n  }\n  /**\n   * Whether this member is currently timed out\n   * @returns {boolean}\n   */\n\n\n  isCommunicationDisabled() {\n    return this.communicationDisabledUntilTimestamp > Date.now();\n  }\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {GuildChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<Permissions>}\n   */\n\n\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n    return channel.permissionsFor(this);\n  }\n  /**\n   * Edits this member.\n   * @param {GuildMemberEditData} data The data to edit the member with\n   * @param {string} [reason] Reason for editing this user\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  edit(data, reason) {\n    return this.guild.members.edit(this, data, reason);\n  }\n  /**\n   * Sets the nickname for this member.\n   * @param {?string} nick The nickname for the guild member, or `null` if you want to reset their nickname\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  setNickname(nick, reason) {\n    return this.edit({\n      nick\n    }, reason);\n  }\n  /**\n   * Creates a DM channel between the client and this member.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n\n\n  createDM() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this.user.createDM(force);\n  }\n  /**\n   * Deletes any DMs with this member.\n   * @returns {Promise<DMChannel>}\n   */\n\n\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n  /**\n   * Kicks this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  kick(reason) {\n    return this.guild.members.kick(this, reason);\n  }\n  /**\n   * Bans this guild member.\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // ban a guild member\n   * guildMember.ban({ days: 7, reason: 'They deserved it' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  ban(options) {\n    return this.guild.members.ban(this, options);\n  }\n  /**\n   * Times this guild member out.\n   * @param {DateResolvable|null} communicationDisabledUntil The date or timestamp\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.disableCommunicationUntil(Date.now() + (5 * 60 * 1000), 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  disableCommunicationUntil(communicationDisabledUntil, reason) {\n    return this.edit({\n      communicationDisabledUntil\n    }, reason);\n  }\n  /**\n   * Times this guild member out.\n   * @param {number|null} timeout The time in milliseconds\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.timeout(5 * 60 * 1000, 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  timeout(timeout, reason) {\n    return this.disableCommunicationUntil(timeout && Date.now() + timeout, reason);\n  }\n  /**\n   * Fetches this GuildMember.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.guild.members.fetch({\n      user: this.id,\n      cache: true,\n      force\n    });\n  }\n  /**\n   * Whether this guild member equals another guild member. It compares all properties, so for most\n   * comparison it is advisable to just compare `member.id === member2.id` as it is significantly faster\n   * and is often what most users need.\n   * @param {GuildMember} member The member to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(member) {\n    return member instanceof this.constructor && this.id === member.id && this.partial === member.partial && this.guild.id === member.guild.id && this.joinedTimestamp === member.joinedTimestamp && this.nickname === member.nickname && this.avatar === member.avatar && this.pending === member.pending && this.communicationDisabledUntilTimestamp === member.communicationDisabledUntilTimestamp && (this._roles === member._roles || this._roles.length === member._roles.length && this._roles.every((role, i) => role === member._roles[i]));\n  }\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${member}!`);\n   */\n\n\n  toString() {\n    return `<@${this.nickname ? '!' : ''}${this.user.id}>`;\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      guild: 'guildId',\n      user: 'userId',\n      displayName: true,\n      roles: true\n    });\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    return json;\n  } // These are here only for documentation purposes - they are implemented by TextBasedChannel\n\n  /* eslint-disable no-empty-function */\n\n\n  send() {}\n\n}\n\nTextBasedChannel.applyToClass(GuildMember);\nexports.GuildMember = GuildMember;\nexports.deletedGuildMembers = deletedGuildMembers;\n/**\n * @external APIGuildMember\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-member-object}\n */","map":{"version":3,"names":["process","require","Base","VoiceState","TextBasedChannel","Error","GuildMemberRoleManager","Permissions","deletedGuildMembers","WeakSet","deprecationEmittedForDeleted","GuildMember","constructor","client","data","guild","joinedTimestamp","premiumSinceTimestamp","nickname","pending","communicationDisabledUntilTimestamp","_roles","_patch","user","users","_add","nick","avatar","Date","joined_at","getTime","premium_since","roles","communication_disabled_until","parse","_clone","clone","slice","deleted","emitWarning","has","value","add","delete","partial","voice","voiceStates","cache","get","id","user_id","avatarURL","format","size","dynamic","rest","cdn","GuildMemberAvatar","displayAvatarURL","options","joinedAt","communicationDisabledUntil","premiumSince","presence","presences","resolve","displayColor","color","displayHexColor","hexColor","displayName","username","permissions","ownerId","ALL","freeze","map","role","manageable","me","highest","comparePositionTo","kickable","FLAGS","KICK_MEMBERS","bannable","BAN_MEMBERS","moderatable","MODERATE_MEMBERS","isCommunicationDisabled","now","permissionsIn","channel","channels","permissionsFor","edit","reason","members","setNickname","createDM","force","deleteDM","kick","ban","disableCommunicationUntil","timeout","fetch","equals","member","length","every","i","toString","toJSON","json","send","applyToClass","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/GuildMember.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst Base = require('./Base');\nconst VoiceState = require('./VoiceState');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst { Error } = require('../errors');\nconst GuildMemberRoleManager = require('../managers/GuildMemberRoleManager');\nconst Permissions = require('../util/Permissions');\n\n/**\n * @type {WeakSet<GuildMember>}\n * @private\n * @internal\n */\nconst deletedGuildMembers = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass GuildMember extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The timestamp the member joined the guild at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The last timestamp this member started boosting the guild\n     * @type {?number}\n     */\n    this.premiumSinceTimestamp = null;\n\n    /**\n     * The nickname of this member, if they have one\n     * @type {?string}\n     */\n    this.nickname = null;\n\n    /**\n     * Whether this member has yet to pass the guild's membership gate\n     * @type {boolean}\n     */\n    this.pending = false;\n\n    /**\n     * The timestamp this member's timeout will be removed\n     * @type {?number}\n     */\n    this.communicationDisabledUntilTimestamp = null;\n\n    this._roles = [];\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user that this guild member instance represents\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n\n    if ('nick' in data) this.nickname = data.nick;\n    if ('avatar' in data) {\n      /**\n       * The guild member's avatar hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else if (typeof this.avatar !== 'string') {\n      this.avatar = null;\n    }\n    if ('joined_at' in data) this.joinedTimestamp = new Date(data.joined_at).getTime();\n    if ('premium_since' in data) {\n      this.premiumSinceTimestamp = data.premium_since ? new Date(data.premium_since).getTime() : null;\n    }\n    if ('roles' in data) this._roles = data.roles;\n    this.pending = data.pending ?? false;\n\n    if ('communication_disabled_until' in data) {\n      this.communicationDisabledUntilTimestamp =\n        data.communication_disabled_until && Date.parse(data.communication_disabled_until);\n    }\n  }\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  /**\n   * Whether or not the structure has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'GuildMember#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    return deletedGuildMembers.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'GuildMember#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    if (value) deletedGuildMembers.add(this);\n    else deletedGuildMembers.delete(this);\n  }\n\n  /**\n   * Whether this GuildMember is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.joinedTimestamp === null;\n  }\n\n  /**\n   * A manager for the roles belonging to this member\n   * @type {GuildMemberRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildMemberRoleManager(this);\n  }\n\n  /**\n   * The voice state of this member\n   * @type {VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, { user_id: this.id });\n  }\n\n  /**\n   * A link to the member's guild avatar.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  avatarURL({ format, size, dynamic } = {}) {\n    if (!this.avatar) return null;\n    return this.client.rest.cdn.GuildMemberAvatar(this.guild.id, this.id, this.avatar, format, size, dynamic);\n  }\n\n  /**\n   * A link to the member's guild avatar if they have one.\n   * Otherwise, a link to their {@link User#displayAvatarURL} will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.user.displayAvatarURL(options);\n  }\n\n  /**\n   * The time this member joined the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp ? new Date(this.joinedTimestamp) : null;\n  }\n\n  /**\n   * The time this member's timeout will be removed\n   * @type {?Date}\n   * @readonly\n   */\n  get communicationDisabledUntil() {\n    return this.communicationDisabledUntilTimestamp && new Date(this.communicationDisabledUntilTimestamp);\n  }\n\n  /**\n   * The last time this member started boosting the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get premiumSince() {\n    return this.premiumSinceTimestamp ? new Date(this.premiumSinceTimestamp) : null;\n  }\n\n  /**\n   * The presence of this guild member\n   * @type {?Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.guild.presences.resolve(this.id);\n  }\n\n  /**\n   * The displayed color of this member in base 10\n   * @type {number}\n   * @readonly\n   */\n  get displayColor() {\n    return this.roles.color?.color ?? 0;\n  }\n\n  /**\n   * The displayed color of this member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n  get displayHexColor() {\n    return this.roles.color?.hexColor ?? '#000000';\n  }\n\n  /**\n   * The member's id\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * The nickname of this member, or their username if they don't have one\n   * @type {?string}\n   * @readonly\n   */\n  get displayName() {\n    return this.nickname ?? this.user.username;\n  }\n\n  /**\n   * The overall set of permissions for this member, taking only roles and owner status into account\n   * @type {Readonly<Permissions>}\n   * @readonly\n   */\n  get permissions() {\n    if (this.user.id === this.guild.ownerId) return new Permissions(Permissions.ALL).freeze();\n    return new Permissions(this.roles.cache.map(role => role.permissions)).freeze();\n  }\n\n  /**\n   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\n   * This is a prerequisite for many moderative actions.\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.user.id === this.guild.ownerId) return false;\n    if (this.user.id === this.client.user.id) return false;\n    if (this.client.user.id === this.guild.ownerId) return true;\n    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return this.guild.me.roles.highest.comparePositionTo(this.roles.highest) > 0;\n  }\n\n  /**\n   * Whether this member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get kickable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.KICK_MEMBERS);\n  }\n\n  /**\n   * Whether this member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get bannable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.BAN_MEMBERS);\n  }\n\n  /**\n   * Whether this member is moderatable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get moderatable() {\n    return this.manageable && (this.guild.me?.permissions.has(Permissions.FLAGS.MODERATE_MEMBERS) ?? false);\n  }\n\n  /**\n   * Whether this member is currently timed out\n   * @returns {boolean}\n   */\n  isCommunicationDisabled() {\n    return this.communicationDisabledUntilTimestamp > Date.now();\n  }\n\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {GuildChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<Permissions>}\n   */\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n    return channel.permissionsFor(this);\n  }\n\n  /**\n   * Edits this member.\n   * @param {GuildMemberEditData} data The data to edit the member with\n   * @param {string} [reason] Reason for editing this user\n   * @returns {Promise<GuildMember>}\n   */\n  edit(data, reason) {\n    return this.guild.members.edit(this, data, reason);\n  }\n\n  /**\n   * Sets the nickname for this member.\n   * @param {?string} nick The nickname for the guild member, or `null` if you want to reset their nickname\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   */\n  setNickname(nick, reason) {\n    return this.edit({ nick }, reason);\n  }\n\n  /**\n   * Creates a DM channel between the client and this member.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  createDM(force = false) {\n    return this.user.createDM(force);\n  }\n\n  /**\n   * Deletes any DMs with this member.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n\n  /**\n   * Kicks this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.guild.members.kick(this, reason);\n  }\n\n  /**\n   * Bans this guild member.\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // ban a guild member\n   * guildMember.ban({ days: 7, reason: 'They deserved it' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  ban(options) {\n    return this.guild.members.ban(this, options);\n  }\n\n  /**\n   * Times this guild member out.\n   * @param {DateResolvable|null} communicationDisabledUntil The date or timestamp\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.disableCommunicationUntil(Date.now() + (5 * 60 * 1000), 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  disableCommunicationUntil(communicationDisabledUntil, reason) {\n    return this.edit({ communicationDisabledUntil }, reason);\n  }\n\n  /**\n   * Times this guild member out.\n   * @param {number|null} timeout The time in milliseconds\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.timeout(5 * 60 * 1000, 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  timeout(timeout, reason) {\n    return this.disableCommunicationUntil(timeout && Date.now() + timeout, reason);\n  }\n\n  /**\n   * Fetches this GuildMember.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildMember>}\n   */\n  fetch(force = true) {\n    return this.guild.members.fetch({ user: this.id, cache: true, force });\n  }\n\n  /**\n   * Whether this guild member equals another guild member. It compares all properties, so for most\n   * comparison it is advisable to just compare `member.id === member2.id` as it is significantly faster\n   * and is often what most users need.\n   * @param {GuildMember} member The member to compare with\n   * @returns {boolean}\n   */\n  equals(member) {\n    return (\n      member instanceof this.constructor &&\n      this.id === member.id &&\n      this.partial === member.partial &&\n      this.guild.id === member.guild.id &&\n      this.joinedTimestamp === member.joinedTimestamp &&\n      this.nickname === member.nickname &&\n      this.avatar === member.avatar &&\n      this.pending === member.pending &&\n      this.communicationDisabledUntilTimestamp === member.communicationDisabledUntilTimestamp &&\n      (this._roles === member._roles ||\n        (this._roles.length === member._roles.length && this._roles.every((role, i) => role === member._roles[i])))\n    );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${member}!`);\n   */\n  toString() {\n    return `<@${this.nickname ? '!' : ''}${this.user.id}>`;\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      guild: 'guildId',\n      user: 'userId',\n      displayName: true,\n      roles: true,\n    });\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    return json;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n}\n\nTextBasedChannel.applyToClass(GuildMember);\n\nexports.GuildMember = GuildMember;\nexports.deletedGuildMembers = deletedGuildMembers;\n\n/**\n * @external APIGuildMember\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-member-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}