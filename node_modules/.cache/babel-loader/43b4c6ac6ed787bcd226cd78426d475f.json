{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n\nconst Permissions = require('../util/Permissions');\n\nlet deprecationEmittedForEditable = false;\n/**\n * Represents a guild voice channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\n\nclass VoiceChannel extends BaseGuildVoiceChannel {\n  /**\n   * Whether the channel is editable by the client user\n   * @type {boolean}\n   * @readonly\n   * @deprecated Use {@link VoiceChannel#manageable} instead\n   */\n  get editable() {\n    if (!deprecationEmittedForEditable) {\n      process.emitWarning('The VoiceChannel#editable getter is deprecated. Use VoiceChannel#manageable instead.', 'DeprecationWarning');\n      deprecationEmittedForEditable = true;\n    }\n\n    return this.manageable;\n  }\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get joinable() {\n    if (!super.joinable) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has(Permissions.FLAGS.MOVE_MEMBERS, false)) return false;\n    return true;\n  }\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get speakable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false; // This flag allows speaking even if timed out\n\n    if (permissions.has(Permissions.FLAGS.ADMINISTRATOR, false)) return true;\n    return this.guild.me.communicationDisabledUntilTimestamp < Date.now() && permissions.has(Permissions.FLAGS.SPEAK, false);\n  }\n  /**\n   * Sets the bitrate of the channel.\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * voiceChannel.setBitrate(48_000)\n   *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n   *   .catch(console.error);\n   */\n\n\n  setBitrate(bitrate, reason) {\n    return this.edit({\n      bitrate\n    }, reason);\n  }\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * voiceChannel.setUserLimit(42)\n   *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n   *   .catch(console.error);\n   */\n\n\n  setUserLimit(userLimit, reason) {\n    return this.edit({\n      userLimit\n    }, reason);\n  }\n  /**\n   * Sets the RTC region of the channel.\n   * @name VoiceChannel#setRTCRegion\n   * @param {?string} region The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the RTC region to europe\n   * voiceChannel.setRTCRegion('europe');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * voiceChannel.setRTCRegion(null);\n   */\n\n\n}\n\nmodule.exports = VoiceChannel;","map":{"version":3,"names":["process","require","BaseGuildVoiceChannel","Permissions","deprecationEmittedForEditable","VoiceChannel","editable","emitWarning","manageable","joinable","full","permissionsFor","client","user","has","FLAGS","MOVE_MEMBERS","speakable","permissions","ADMINISTRATOR","guild","me","communicationDisabledUntilTimestamp","Date","now","SPEAK","setBitrate","bitrate","reason","edit","setUserLimit","userLimit","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/VoiceChannel.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\nconst Permissions = require('../util/Permissions');\n\nlet deprecationEmittedForEditable = false;\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\nclass VoiceChannel extends BaseGuildVoiceChannel {\n  /**\n   * Whether the channel is editable by the client user\n   * @type {boolean}\n   * @readonly\n   * @deprecated Use {@link VoiceChannel#manageable} instead\n   */\n  get editable() {\n    if (!deprecationEmittedForEditable) {\n      process.emitWarning(\n        'The VoiceChannel#editable getter is deprecated. Use VoiceChannel#manageable instead.',\n        'DeprecationWarning',\n      );\n\n      deprecationEmittedForEditable = true;\n    }\n\n    return this.manageable;\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!super.joinable) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has(Permissions.FLAGS.MOVE_MEMBERS, false)) return false;\n    return true;\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get speakable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows speaking even if timed out\n    if (permissions.has(Permissions.FLAGS.ADMINISTRATOR, false)) return true;\n\n    return (\n      this.guild.me.communicationDisabledUntilTimestamp < Date.now() && permissions.has(Permissions.FLAGS.SPEAK, false)\n    );\n  }\n\n  /**\n   * Sets the bitrate of the channel.\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * voiceChannel.setBitrate(48_000)\n   *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setBitrate(bitrate, reason) {\n    return this.edit({ bitrate }, reason);\n  }\n\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * voiceChannel.setUserLimit(42)\n   *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setUserLimit(userLimit, reason) {\n    return this.edit({ userLimit }, reason);\n  }\n\n  /**\n   * Sets the RTC region of the channel.\n   * @name VoiceChannel#setRTCRegion\n   * @param {?string} region The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the RTC region to europe\n   * voiceChannel.setRTCRegion('europe');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * voiceChannel.setRTCRegion(null);\n   */\n}\n\nmodule.exports = VoiceChannel;\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,qBAAD,CAA3B;;AAEA,IAAIG,6BAA6B,GAAG,KAApC;AAEA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,SAA2BH,qBAA3B,CAAiD;EAC/C;AACF;AACA;AACA;AACA;AACA;EACc,IAARI,QAAQ,GAAG;IACb,IAAI,CAACF,6BAAL,EAAoC;MAClCJ,OAAO,CAACO,WAAR,CACE,sFADF,EAEE,oBAFF;MAKAH,6BAA6B,GAAG,IAAhC;IACD;;IAED,OAAO,KAAKI,UAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAARC,QAAQ,GAAG;IACb,IAAI,CAAC,MAAMA,QAAX,EAAqB,OAAO,KAAP;IACrB,IAAI,KAAKC,IAAL,IAAa,CAAC,KAAKC,cAAL,CAAoB,KAAKC,MAAL,CAAYC,IAAhC,EAAsCC,GAAtC,CAA0CX,WAAW,CAACY,KAAZ,CAAkBC,YAA5D,EAA0E,KAA1E,CAAlB,EAAoG,OAAO,KAAP;IACpG,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,IAATC,SAAS,GAAG;IACd,MAAMC,WAAW,GAAG,KAAKP,cAAL,CAAoB,KAAKC,MAAL,CAAYC,IAAhC,CAApB;IACA,IAAI,CAACK,WAAL,EAAkB,OAAO,KAAP,CAFJ,CAGd;;IACA,IAAIA,WAAW,CAACJ,GAAZ,CAAgBX,WAAW,CAACY,KAAZ,CAAkBI,aAAlC,EAAiD,KAAjD,CAAJ,EAA6D,OAAO,IAAP;IAE7D,OACE,KAAKC,KAAL,CAAWC,EAAX,CAAcC,mCAAd,GAAoDC,IAAI,CAACC,GAAL,EAApD,IAAkEN,WAAW,CAACJ,GAAZ,CAAgBX,WAAW,CAACY,KAAZ,CAAkBU,KAAlC,EAAyC,KAAzC,CADpE;EAGD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,UAAU,CAACC,OAAD,EAAUC,MAAV,EAAkB;IAC1B,OAAO,KAAKC,IAAL,CAAU;MAAEF;IAAF,CAAV,EAAuBC,MAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,YAAY,CAACC,SAAD,EAAYH,MAAZ,EAAoB;IAC9B,OAAO,KAAKC,IAAL,CAAU;MAAEE;IAAF,CAAV,EAAyBH,MAAzB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAxFiD;;AA2FjDI,MAAM,CAACC,OAAP,GAAiB5B,YAAjB"},"metadata":{},"sourceType":"script"}