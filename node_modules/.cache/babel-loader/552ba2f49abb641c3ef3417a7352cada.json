{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst Base = require('./Base');\n\nconst {\n  PrivacyLevels\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * @type {WeakSet<StageInstance>}\n * @private\n * @internal\n */\n\n\nconst deletedStageInstances = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n/**\n * Represents a stage instance.\n * @extends {Base}\n */\n\nclass StageInstance extends Base {\n  constructor(client, data) {\n    super(client);\n    /**\n     * The stage instance's id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('guild_id' in data) {\n      /**\n       * The id of the guild associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.guildId = data.guild_id;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n\n    if ('topic' in data) {\n      /**\n       * The topic of the stage instance\n       * @type {string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('privacy_level' in data) {\n      /**\n       * The privacy level of the stage instance\n       * @type {PrivacyLevel}\n       */\n      this.privacyLevel = PrivacyLevels[data.privacy_level];\n    }\n\n    if ('discoverable_disabled' in data) {\n      /**\n       * Whether or not stage discovery is disabled\n       * @type {?boolean}\n       */\n      this.discoverableDisabled = data.discoverable_disabled;\n    } else {\n      this.discoverableDisabled ??= null;\n    }\n  }\n  /**\n   * The stage channel associated with this stage instance\n   * @type {?StageChannel}\n   * @readonly\n   */\n\n\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n  /**\n   * Whether or not the stage instance has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n\n\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('StageInstance#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    return deletedStageInstances.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('StageInstance#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    if (value) deletedStageInstances.add(this);else deletedStageInstances.delete(this);\n  }\n  /**\n   * The guild this stage instance belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n  /**\n   * Edits this stage instance.\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * stageInstance.edit({ topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error)\n   */\n\n\n  edit(options) {\n    return this.guild.stageInstances.edit(this.channelId, options);\n  }\n  /**\n   * Deletes this stage instance.\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Delete a stage instance\n   * stageInstance.delete()\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n\n\n  async delete() {\n    await this.guild.stageInstances.delete(this.channelId);\n\n    const clone = this._clone();\n\n    deletedStageInstances.add(clone);\n    return clone;\n  }\n  /**\n   * Sets the topic of this stage instance.\n   * @param {string} topic The topic for the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Set topic of a stage instance\n   * stageInstance.setTopic('new topic')\n   *  .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))\n   *  .catch(console.error);\n   */\n\n\n  setTopic(topic) {\n    return this.guild.stageInstances.edit(this.channelId, {\n      topic\n    });\n  }\n  /**\n   * The timestamp this stage instances was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n  /**\n   * The time this stage instance was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n}\n\nexports.StageInstance = StageInstance;\nexports.deletedStageInstances = deletedStageInstances;","map":{"version":3,"names":["process","require","Base","PrivacyLevels","SnowflakeUtil","deletedStageInstances","WeakSet","deprecationEmittedForDeleted","StageInstance","constructor","client","data","id","_patch","guildId","guild_id","channelId","channel_id","topic","privacyLevel","privacy_level","discoverableDisabled","discoverable_disabled","channel","channels","resolve","deleted","emitWarning","has","value","add","delete","guild","guilds","edit","options","stageInstances","clone","_clone","setTopic","createdTimestamp","timestampFrom","createdAt","Date","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/StageInstance.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst Base = require('./Base');\nconst { PrivacyLevels } = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * @type {WeakSet<StageInstance>}\n * @private\n * @internal\n */\nconst deletedStageInstances = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n\n/**\n * Represents a stage instance.\n * @extends {Base}\n */\nclass StageInstance extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The stage instance's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('guild_id' in data) {\n      /**\n       * The id of the guild associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.guildId = data.guild_id;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n\n    if ('topic' in data) {\n      /**\n       * The topic of the stage instance\n       * @type {string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('privacy_level' in data) {\n      /**\n       * The privacy level of the stage instance\n       * @type {PrivacyLevel}\n       */\n      this.privacyLevel = PrivacyLevels[data.privacy_level];\n    }\n\n    if ('discoverable_disabled' in data) {\n      /**\n       * Whether or not stage discovery is disabled\n       * @type {?boolean}\n       */\n      this.discoverableDisabled = data.discoverable_disabled;\n    } else {\n      this.discoverableDisabled ??= null;\n    }\n  }\n\n  /**\n   * The stage channel associated with this stage instance\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * Whether or not the stage instance has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'StageInstance#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    return deletedStageInstances.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'StageInstance#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    if (value) deletedStageInstances.add(this);\n    else deletedStageInstances.delete(this);\n  }\n\n  /**\n   * The guild this stage instance belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * Edits this stage instance.\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * stageInstance.edit({ topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error)\n   */\n  edit(options) {\n    return this.guild.stageInstances.edit(this.channelId, options);\n  }\n\n  /**\n   * Deletes this stage instance.\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Delete a stage instance\n   * stageInstance.delete()\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.stageInstances.delete(this.channelId);\n    const clone = this._clone();\n    deletedStageInstances.add(clone);\n    return clone;\n  }\n\n  /**\n   * Sets the topic of this stage instance.\n   * @param {string} topic The topic for the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Set topic of a stage instance\n   * stageInstance.setTopic('new topic')\n   *  .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))\n   *  .catch(console.error);\n   */\n  setTopic(topic) {\n    return this.guild.stageInstances.edit(this.channelId, { topic });\n  }\n\n  /**\n   * The timestamp this stage instances was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this stage instance was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n}\n\nexports.StageInstance = StageInstance;\nexports.deletedStageInstances = deletedStageInstances;\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAM;EAAEE;AAAF,IAAoBF,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,uBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,qBAAqB,GAAG,IAAIC,OAAJ,EAA9B;AACA,IAAIC,4BAA4B,GAAG,KAAnC;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BN,IAA5B,CAAiC;EAC/BO,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,EAAL,GAAUD,IAAI,CAACC,EAAf;;IAEA,KAAKC,MAAL,CAAYF,IAAZ;EACD;;EAEDE,MAAM,CAACF,IAAD,EAAO;IACX,IAAI,cAAcA,IAAlB,EAAwB;MACtB;AACN;AACA;AACA;MACM,KAAKG,OAAL,GAAeH,IAAI,CAACI,QAApB;IACD;;IAED,IAAI,gBAAgBJ,IAApB,EAA0B;MACxB;AACN;AACA;AACA;MACM,KAAKK,SAAL,GAAiBL,IAAI,CAACM,UAAtB;IACD;;IAED,IAAI,WAAWN,IAAf,EAAqB;MACnB;AACN;AACA;AACA;MACM,KAAKO,KAAL,GAAaP,IAAI,CAACO,KAAlB;IACD;;IAED,IAAI,mBAAmBP,IAAvB,EAA6B;MAC3B;AACN;AACA;AACA;MACM,KAAKQ,YAAL,GAAoBhB,aAAa,CAACQ,IAAI,CAACS,aAAN,CAAjC;IACD;;IAED,IAAI,2BAA2BT,IAA/B,EAAqC;MACnC;AACN;AACA;AACA;MACM,KAAKU,oBAAL,GAA4BV,IAAI,CAACW,qBAAjC;IACD,CAND,MAMO;MACL,KAAKD,oBAAL,KAA8B,IAA9B;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAPE,OAAO,GAAG;IACZ,OAAO,KAAKb,MAAL,CAAYc,QAAZ,CAAqBC,OAArB,CAA6B,KAAKT,SAAlC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAPU,OAAO,GAAG;IACZ,IAAI,CAACnB,4BAAL,EAAmC;MACjCA,4BAA4B,GAAG,IAA/B;MACAP,OAAO,CAAC2B,WAAR,CACE,+FADF,EAEE,oBAFF;IAID;;IAED,OAAOtB,qBAAqB,CAACuB,GAAtB,CAA0B,IAA1B,CAAP;EACD;;EAEU,IAAPF,OAAO,CAACG,KAAD,EAAQ;IACjB,IAAI,CAACtB,4BAAL,EAAmC;MACjCA,4BAA4B,GAAG,IAA/B;MACAP,OAAO,CAAC2B,WAAR,CACE,+FADF,EAEE,oBAFF;IAID;;IAED,IAAIE,KAAJ,EAAWxB,qBAAqB,CAACyB,GAAtB,CAA0B,IAA1B,EAAX,KACKzB,qBAAqB,CAAC0B,MAAtB,CAA6B,IAA7B;EACN;EAED;AACF;AACA;AACA;AACA;;;EACW,IAALC,KAAK,GAAG;IACV,OAAO,KAAKtB,MAAL,CAAYuB,MAAZ,CAAmBR,OAAnB,CAA2B,KAAKX,OAAhC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEoB,IAAI,CAACC,OAAD,EAAU;IACZ,OAAO,KAAKH,KAAL,CAAWI,cAAX,CAA0BF,IAA1B,CAA+B,KAAKlB,SAApC,EAA+CmB,OAA/C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACc,MAANJ,MAAM,GAAG;IACb,MAAM,KAAKC,KAAL,CAAWI,cAAX,CAA0BL,MAA1B,CAAiC,KAAKf,SAAtC,CAAN;;IACA,MAAMqB,KAAK,GAAG,KAAKC,MAAL,EAAd;;IACAjC,qBAAqB,CAACyB,GAAtB,CAA0BO,KAA1B;IACA,OAAOA,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,QAAQ,CAACrB,KAAD,EAAQ;IACd,OAAO,KAAKc,KAAL,CAAWI,cAAX,CAA0BF,IAA1B,CAA+B,KAAKlB,SAApC,EAA+C;MAAEE;IAAF,CAA/C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,IAAhBsB,gBAAgB,GAAG;IACrB,OAAOpC,aAAa,CAACqC,aAAd,CAA4B,KAAK7B,EAAjC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,IAAT8B,SAAS,GAAG;IACd,OAAO,IAAIC,IAAJ,CAAS,KAAKH,gBAAd,CAAP;EACD;;AArK8B;;AAwKjCI,OAAO,CAACpC,aAAR,GAAwBA,aAAxB;AACAoC,OAAO,CAACvC,qBAAR,GAAgCA,qBAAhC"},"metadata":{},"sourceType":"script"}