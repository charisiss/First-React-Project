{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('node:events');\n\nconst RESTManager = require('../rest/RESTManager');\n\nconst Options = require('../util/Options');\n\nconst Util = require('../util/Util');\n/**\n * The base class for all clients.\n * @extends {EventEmitter}\n */\n\n\nclass BaseClient extends EventEmitter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n\n    this.options = Util.mergeDefault(Options.createDefault(), options);\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n\n    this.rest = new RESTManager(this);\n  }\n  /**\n   * API shortcut\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n\n\n  get api() {\n    return this.rest.api;\n  }\n  /**\n   * Destroys all assets used by the base client.\n   * @returns {void}\n   */\n\n\n  destroy() {\n    if (this.rest.sweepInterval) clearInterval(this.rest.sweepInterval);\n  }\n  /**\n   * Increments max listeners by one, if they are not zero.\n   * @private\n   */\n\n\n  incrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners + 1);\n    }\n  }\n  /**\n   * Decrements max listeners by one, if they are not zero.\n   * @private\n   */\n\n\n  decrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners - 1);\n    }\n  }\n\n  toJSON() {\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return Util.flatten(this, {\n      domain: false\n    }, ...props);\n  }\n\n}\n\nmodule.exports = BaseClient;\n/**\n * Emitted for general debugging information.\n * @event BaseClient#debug\n * @param {string} info The debug information\n */","map":{"version":3,"names":["EventEmitter","require","RESTManager","Options","Util","BaseClient","constructor","options","mergeDefault","createDefault","rest","api","destroy","sweepInterval","clearInterval","incrementMaxListeners","maxListeners","getMaxListeners","setMaxListeners","decrementMaxListeners","toJSON","props","flatten","domain","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/client/BaseClient.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('node:events');\nconst RESTManager = require('../rest/RESTManager');\nconst Options = require('../util/Options');\nconst Util = require('../util/Util');\n\n/**\n * The base class for all clients.\n * @extends {EventEmitter}\n */\nclass BaseClient extends EventEmitter {\n  constructor(options = {}) {\n    super();\n\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n    this.options = Util.mergeDefault(Options.createDefault(), options);\n\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n    this.rest = new RESTManager(this);\n  }\n\n  /**\n   * API shortcut\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  get api() {\n    return this.rest.api;\n  }\n\n  /**\n   * Destroys all assets used by the base client.\n   * @returns {void}\n   */\n  destroy() {\n    if (this.rest.sweepInterval) clearInterval(this.rest.sweepInterval);\n  }\n\n  /**\n   * Increments max listeners by one, if they are not zero.\n   * @private\n   */\n  incrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners + 1);\n    }\n  }\n\n  /**\n   * Decrements max listeners by one, if they are not zero.\n   * @private\n   */\n  decrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners - 1);\n    }\n  }\n\n  toJSON(...props) {\n    return Util.flatten(this, { domain: false }, ...props);\n  }\n}\n\nmodule.exports = BaseClient;\n\n/**\n * Emitted for general debugging information.\n * @event BaseClient#debug\n * @param {string} info The debug information\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,aAAD,CAA5B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,cAAD,CAApB;AAEA;AACA;AACA;AACA;;;AACA,MAAMI,UAAN,SAAyBL,YAAzB,CAAsC;EACpCM,WAAW,GAAe;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACxB;IAEA;AACJ;AACA;AACA;;IACI,KAAKA,OAAL,GAAeH,IAAI,CAACI,YAAL,CAAkBL,OAAO,CAACM,aAAR,EAAlB,EAA2CF,OAA3C,CAAf;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKG,IAAL,GAAY,IAAIR,WAAJ,CAAgB,IAAhB,CAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACS,IAAHS,GAAG,GAAG;IACR,OAAO,KAAKD,IAAL,CAAUC,GAAjB;EACD;EAED;AACF;AACA;AACA;;;EACEC,OAAO,GAAG;IACR,IAAI,KAAKF,IAAL,CAAUG,aAAd,EAA6BC,aAAa,CAAC,KAAKJ,IAAL,CAAUG,aAAX,CAAb;EAC9B;EAED;AACF;AACA;AACA;;;EACEE,qBAAqB,GAAG;IACtB,MAAMC,YAAY,GAAG,KAAKC,eAAL,EAArB;;IACA,IAAID,YAAY,KAAK,CAArB,EAAwB;MACtB,KAAKE,eAAL,CAAqBF,YAAY,GAAG,CAApC;IACD;EACF;EAED;AACF;AACA;AACA;;;EACEG,qBAAqB,GAAG;IACtB,MAAMH,YAAY,GAAG,KAAKC,eAAL,EAArB;;IACA,IAAID,YAAY,KAAK,CAArB,EAAwB;MACtB,KAAKE,eAAL,CAAqBF,YAAY,GAAG,CAApC;IACD;EACF;;EAEDI,MAAM,GAAW;IAAA,kCAAPC,KAAO;MAAPA,KAAO;IAAA;;IACf,OAAOjB,IAAI,CAACkB,OAAL,CAAa,IAAb,EAAmB;MAAEC,MAAM,EAAE;IAAV,CAAnB,EAAsC,GAAGF,KAAzC,CAAP;EACD;;AA5DmC;;AA+DtCG,MAAM,CAACC,OAAP,GAAiBpB,UAAjB;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}