{"ast":null,"code":"'use strict';\n\nconst GuildEmoji = require('./GuildEmoji');\n\nconst ReactionEmoji = require('./ReactionEmoji');\n\nconst ReactionUserManager = require('../managers/ReactionUserManager');\n\nconst Util = require('../util/Util');\n/**\n * Represents a reaction to a message.\n */\n\n\nclass MessageReaction {\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n\n    this.message = message;\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n\n    this.me = data.me;\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n\n    this.users = new ReactionUserManager(this, this.me ? [client.user] : []);\n    this._emoji = new ReactionEmoji(this, data.emoji);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('count' in data) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count ??= data.count;\n    }\n  }\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n\n\n  async remove() {\n    await this.client.api.channels(this.message.channelId).messages(this.message.id).reactions(this._emoji.identifier).delete();\n    return this;\n  }\n  /**\n   * The emoji of this reaction. Either a {@link GuildEmoji} object for known custom emojis, or a {@link ReactionEmoji}\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n\n\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji; // Check to see if the emoji has become known to the client\n\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n\n    return this._emoji;\n  }\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return this.count === null;\n  }\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n\n\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id ?? this.emoji.name); // The reaction won't get set when it has been completely removed\n\n    this._patch(existing ?? {\n      count: 0\n    });\n\n    return this;\n  }\n\n  toJSON() {\n    return Util.flatten(this, {\n      emoji: 'emojiId',\n      message: 'messageId'\n    });\n  }\n\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    this.me ??= user.id === this.message.client.user.id;\n  }\n\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id ?? this.emoji.name);\n    }\n  }\n\n}\n\nmodule.exports = MessageReaction;","map":{"version":3,"names":["GuildEmoji","require","ReactionEmoji","ReactionUserManager","Util","MessageReaction","constructor","client","data","message","Object","defineProperty","value","me","users","user","_emoji","emoji","_patch","count","remove","api","channels","channelId","messages","id","reactions","identifier","delete","emojis","cache","has","get","partial","fetch","existing","name","toJSON","flatten","_add","set","_remove","size","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/MessageReaction.js"],"sourcesContent":["'use strict';\n\nconst GuildEmoji = require('./GuildEmoji');\nconst ReactionEmoji = require('./ReactionEmoji');\nconst ReactionUserManager = require('../managers/ReactionUserManager');\nconst Util = require('../util/Util');\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = data.me;\n\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n    this.users = new ReactionUserManager(this, this.me ? [client.user] : []);\n\n    this._emoji = new ReactionEmoji(this, data.emoji);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('count' in data) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count ??= data.count;\n    }\n  }\n\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    await this.client.api\n      .channels(this.message.channelId)\n      .messages(this.message.id)\n      .reactions(this._emoji.identifier)\n      .delete();\n    return this;\n  }\n\n  /**\n   * The emoji of this reaction. Either a {@link GuildEmoji} object for known custom emojis, or a {@link ReactionEmoji}\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.count === null;\n  }\n\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id ?? this.emoji.name);\n    // The reaction won't get set when it has been completely removed\n    this._patch(existing ?? { count: 0 });\n    return this;\n  }\n\n  toJSON() {\n    return Util.flatten(this, { emoji: 'emojiId', message: 'messageId' });\n  }\n\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    this.me ??= user.id === this.message.client.user.id;\n  }\n\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id ?? this.emoji.name);\n    }\n  }\n}\n\nmodule.exports = MessageReaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}