{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst {\n  RangeError\n} = require('../errors');\n\nconst Util = require('../util/Util');\n\nlet deprecationEmittedForSetAuthor = false;\nlet deprecationEmittedForSetFooter = false; // TODO: Remove the deprecated code for `setAuthor()` and `setFooter()`.\n\n/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\n\nclass MessageEmbed {\n  /**\n   * A `Partial` object is a representation of any existing object.\n   * This object contains between 0 and all of the original objects parameters.\n   * This is true regardless of whether the parameters are optional in the base object.\n   * @typedef {Object} Partial\n   */\n\n  /**\n   * Represents the possible options for a MessageEmbed\n   * @typedef {Object} MessageEmbedOptions\n   * @property {string} [title] The title of this embed\n   * @property {string} [description] The description of this embed\n   * @property {string} [url] The URL of this embed\n   * @property {Date|number} [timestamp] The timestamp of this embed\n   * @property {ColorResolvable} [color] The color of this embed\n   * @property {EmbedFieldData[]} [fields] The fields of this embed\n   * @property {Partial<MessageEmbedAuthor>} [author] The author of this embed\n   * @property {Partial<MessageEmbedThumbnail>} [thumbnail] The thumbnail of this embed\n   * @property {Partial<MessageEmbedImage>} [image] The image of this embed\n   * @property {Partial<MessageEmbedVideo>} [video] The video of this embed\n   * @property {Partial<MessageEmbedFooter>} [footer] The footer of this embed\n   */\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * @param {MessageEmbed|MessageEmbedOptions|APIEmbed} [data={}] MessageEmbed to clone or raw embed data\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let skipValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.setup(data, skipValidation);\n  }\n\n  setup(data, skipValidation) {\n    /**\n     * The type of this embed, either:\n     * * `rich` - a generic embed rendered from embed attributes\n     * * `image` - an image embed\n     * * `video` - a video embed\n     * * `gifv` - an animated gif image embed rendered as a video embed\n     * * `article` - an article embed\n     * * `link` - a link embed\n     * @type {string}\n     * @see {@link https://discord.com/developers/docs/resources/channel#embed-object-embed-types}\n     * @deprecated\n     */\n    this.type = data.type ?? 'rich';\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n\n    this.title = data.title ?? null;\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n\n    this.description = data.description ?? null;\n    /**\n     * The URL of this embed\n     * @type {?string}\n     */\n\n    this.url = data.url ?? null;\n    /**\n     * The color of this embed\n     * @type {?number}\n     */\n\n    this.color = 'color' in data ? Util.resolveColor(data.color) : null;\n    /**\n     * The timestamp of this embed\n     * @type {?number}\n     */\n\n    this.timestamp = 'timestamp' in data ? new Date(data.timestamp).getTime() : null;\n    /**\n     * Represents a field of a MessageEmbed\n     * @typedef {Object} EmbedField\n     * @property {string} name The name of this field\n     * @property {string} value The value of this field\n     * @property {boolean} inline If this field will be displayed inline\n     */\n\n    /**\n     * The fields of this embed\n     * @type {EmbedField[]}\n     */\n\n    this.fields = [];\n\n    if (data.fields) {\n      this.fields = skipValidation ? data.fields.map(Util.cloneObject) : this.constructor.normalizeFields(data.fields);\n    }\n    /**\n     * Represents the thumbnail of a MessageEmbed\n     * @typedef {Object} MessageEmbedThumbnail\n     * @property {string} url URL for this thumbnail\n     * @property {string} proxyURL ProxyURL for this thumbnail\n     * @property {number} height Height of this thumbnail\n     * @property {number} width Width of this thumbnail\n     */\n\n    /**\n     * The thumbnail of this embed (if there is one)\n     * @type {?MessageEmbedThumbnail}\n     */\n\n\n    this.thumbnail = data.thumbnail ? {\n      url: data.thumbnail.url,\n      proxyURL: data.thumbnail.proxyURL ?? data.thumbnail.proxy_url,\n      height: data.thumbnail.height,\n      width: data.thumbnail.width\n    } : null;\n    /**\n     * Represents the image of a MessageEmbed\n     * @typedef {Object} MessageEmbedImage\n     * @property {string} url URL for this image\n     * @property {string} proxyURL ProxyURL for this image\n     * @property {number} height Height of this image\n     * @property {number} width Width of this image\n     */\n\n    /**\n     * The image of this embed, if there is one\n     * @type {?MessageEmbedImage}\n     */\n\n    this.image = data.image ? {\n      url: data.image.url,\n      proxyURL: data.image.proxyURL ?? data.image.proxy_url,\n      height: data.image.height,\n      width: data.image.width\n    } : null;\n    /**\n     * Represents the video of a MessageEmbed\n     * @typedef {Object} MessageEmbedVideo\n     * @property {string} url URL of this video\n     * @property {string} proxyURL ProxyURL for this video\n     * @property {number} height Height of this video\n     * @property {number} width Width of this video\n     */\n\n    /**\n     * The video of this embed (if there is one)\n     * @type {?MessageEmbedVideo}\n     * @readonly\n     */\n\n    this.video = data.video ? {\n      url: data.video.url,\n      proxyURL: data.video.proxyURL ?? data.video.proxy_url,\n      height: data.video.height,\n      width: data.video.width\n    } : null;\n    /**\n     * Represents the author field of a MessageEmbed\n     * @typedef {Object} MessageEmbedAuthor\n     * @property {string} name The name of this author\n     * @property {string} url URL of this author\n     * @property {string} iconURL URL of the icon for this author\n     * @property {string} proxyIconURL Proxied URL of the icon for this author\n     */\n\n    /**\n     * The author of this embed (if there is one)\n     * @type {?MessageEmbedAuthor}\n     */\n\n    this.author = data.author ? {\n      name: data.author.name,\n      url: data.author.url,\n      iconURL: data.author.iconURL ?? data.author.icon_url,\n      proxyIconURL: data.author.proxyIconURL ?? data.author.proxy_icon_url\n    } : null;\n    /**\n     * Represents the provider of a MessageEmbed\n     * @typedef {Object} MessageEmbedProvider\n     * @property {string} name The name of this provider\n     * @property {string} url URL of this provider\n     */\n\n    /**\n     * The provider of this embed (if there is one)\n     * @type {?MessageEmbedProvider}\n     */\n\n    this.provider = data.provider ? {\n      name: data.provider.name,\n      url: data.provider.name\n    } : null;\n    /**\n     * Represents the footer field of a MessageEmbed\n     * @typedef {Object} MessageEmbedFooter\n     * @property {string} text The text of this footer\n     * @property {string} iconURL URL of the icon for this footer\n     * @property {string} proxyIconURL Proxied URL of the icon for this footer\n     */\n\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n\n    this.footer = data.footer ? {\n      text: data.footer.text,\n      iconURL: data.footer.iconURL ?? data.footer.icon_url,\n      proxyIconURL: data.footer.proxyIconURL ?? data.footer.proxy_icon_url\n    } : null;\n  }\n  /**\n   * The date displayed on this embed\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return this.timestamp ? new Date(this.timestamp) : null;\n  }\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get hexColor() {\n    return this.color ? `#${this.color.toString(16).padStart(6, '0')}` : null;\n  }\n  /**\n   * The accumulated length for the embed title, description, fields, footer text, and author name\n   * @type {number}\n   * @readonly\n   */\n\n\n  get length() {\n    return (this.title?.length ?? 0) + (this.description?.length ?? 0) + (this.fields.length >= 1 ? this.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) : 0) + (this.footer?.text.length ?? 0) + (this.author?.name.length ?? 0);\n  }\n  /**\n   * Checks if this embed is equal to another one by comparing every single one of their properties.\n   * @param {MessageEmbed|APIEmbed} embed The embed to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(embed) {\n    return this.type === embed.type && this.author?.name === embed.author?.name && this.author?.url === embed.author?.url && this.author?.iconURL === (embed.author?.iconURL ?? embed.author?.icon_url) && this.color === embed.color && this.title === embed.title && this.description === embed.description && this.url === embed.url && this.timestamp === embed.timestamp && this.fields.length === embed.fields.length && this.fields.every((field, i) => this._fieldEquals(field, embed.fields[i])) && this.footer?.text === embed.footer?.text && this.footer?.iconURL === (embed.footer?.iconURL ?? embed.footer?.icon_url) && this.image?.url === embed.image?.url && this.thumbnail?.url === embed.thumbnail?.url && this.video?.url === embed.video?.url && this.provider?.name === embed.provider?.name && this.provider?.url === embed.provider?.url;\n  }\n  /**\n   * Compares two given embed fields to see if they are equal\n   * @param {EmbedFieldData} field The first field to compare\n   * @param {EmbedFieldData} other The second field to compare\n   * @returns {boolean}\n   * @private\n   */\n\n\n  _fieldEquals(field, other) {\n    return field.name === other.name && field.value === other.value && field.inline === other.inline;\n  }\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {string} name The name of this field\n   * @param {string} value The value of this field\n   * @param {boolean} [inline=false] If this field will be displayed inline\n   * @returns {MessageEmbed}\n   */\n\n\n  addField(name, value, inline) {\n    return this.addFields({\n      name,\n      value,\n      inline\n    });\n  }\n  /**\n   * Adds fields to the embed (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to add\n   * @returns {MessageEmbed}\n   */\n\n\n  addFields() {\n    for (var _len = arguments.length, fields = new Array(_len), _key = 0; _key < _len; _key++) {\n      fields[_key] = arguments[_key];\n    }\n\n    this.fields.push(...this.constructor.normalizeFields(fields));\n    return this;\n  }\n  /**\n   * Removes, replaces, and inserts fields in the embed (max 25).\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of fields to remove\n   * @param {...EmbedFieldData|EmbedFieldData[]} [fields] The replacing field objects\n   * @returns {MessageEmbed}\n   */\n\n\n  spliceFields(index, deleteCount) {\n    for (var _len2 = arguments.length, fields = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      fields[_key2 - 2] = arguments[_key2];\n    }\n\n    this.fields.splice(index, deleteCount, ...this.constructor.normalizeFields(...fields));\n    return this;\n  }\n  /**\n   * Sets the embed's fields (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to set\n   * @returns {MessageEmbed}\n   */\n\n\n  setFields() {\n    for (var _len3 = arguments.length, fields = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      fields[_key3] = arguments[_key3];\n    }\n\n    this.spliceFields(0, this.fields.length, fields);\n    return this;\n  }\n  /**\n   * The options to provide for setting an author for a {@link MessageEmbed}.\n   * @typedef {Object} EmbedAuthorData\n   * @property {string} name The name of this author.\n   * @property {string} [url] The URL of this author.\n   * @property {string} [iconURL] The icon URL of this author.\n   */\n\n  /**\n   * Sets the author of this embed.\n   * @param {string|EmbedAuthorData|null} options The options to provide for the author.\n   * Provide `null` to remove the author data.\n   * @param {string} [deprecatedIconURL] The icon URL of this author.\n   * <warn>This parameter is **deprecated**. Use the `options` parameter instead.</warn>\n   * @param {string} [deprecatedURL] The URL of this author.\n   * <warn>This parameter is **deprecated**. Use the `options` parameter instead.</warn>\n   * @returns {MessageEmbed}\n   */\n\n\n  setAuthor(options, deprecatedIconURL, deprecatedURL) {\n    if (options === null) {\n      this.author = {};\n      return this;\n    }\n\n    if (typeof options === 'string') {\n      if (!deprecationEmittedForSetAuthor) {\n        process.emitWarning('Passing strings for MessageEmbed#setAuthor is deprecated. Pass a sole object instead.', 'DeprecationWarning');\n        deprecationEmittedForSetAuthor = true;\n      }\n\n      options = {\n        name: options,\n        url: deprecatedURL,\n        iconURL: deprecatedIconURL\n      };\n    }\n\n    const {\n      name,\n      url,\n      iconURL\n    } = options;\n    this.author = {\n      name: Util.verifyString(name, RangeError, 'EMBED_AUTHOR_NAME'),\n      url,\n      iconURL\n    };\n    return this;\n  }\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {MessageEmbed}\n   */\n\n\n  setColor(color) {\n    this.color = Util.resolveColor(color);\n    return this;\n  }\n  /**\n   * Sets the description of this embed.\n   * @param {string} description The description\n   * @returns {MessageEmbed}\n   */\n\n\n  setDescription(description) {\n    this.description = Util.verifyString(description, RangeError, 'EMBED_DESCRIPTION');\n    return this;\n  }\n  /**\n   * The options to provide for setting a footer for a {@link MessageEmbed}.\n   * @typedef {Object} EmbedFooterData\n   * @property {string} text The text of the footer.\n   * @property {string} [iconURL] The icon URL of the footer.\n   */\n\n  /**\n   * Sets the footer of this embed.\n   * @param {string|EmbedFooterData|null} options The options to provide for the footer.\n   * Provide `null` to remove the footer data.\n   * @param {string} [deprecatedIconURL] The icon URL of this footer.\n   * <warn>This parameter is **deprecated**. Use the `options` parameter instead.</warn>\n   * @returns {MessageEmbed}\n   */\n\n\n  setFooter(options, deprecatedIconURL) {\n    if (options === null) {\n      this.footer = {};\n      return this;\n    }\n\n    if (typeof options === 'string') {\n      if (!deprecationEmittedForSetFooter) {\n        process.emitWarning('Passing strings for MessageEmbed#setFooter is deprecated. Pass a sole object instead.', 'DeprecationWarning');\n        deprecationEmittedForSetFooter = true;\n      }\n\n      options = {\n        text: options,\n        iconURL: deprecatedIconURL\n      };\n    }\n\n    const {\n      text,\n      iconURL\n    } = options;\n    this.footer = {\n      text: Util.verifyString(text, RangeError, 'EMBED_FOOTER_TEXT'),\n      iconURL\n    };\n    return this;\n  }\n  /**\n   * Sets the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {MessageEmbed}\n   */\n\n\n  setImage(url) {\n    this.image = {\n      url\n    };\n    return this;\n  }\n  /**\n   * Sets the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {MessageEmbed}\n   */\n\n\n  setThumbnail(url) {\n    this.thumbnail = {\n      url\n    };\n    return this;\n  }\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date|number|null} [timestamp=Date.now()] The timestamp or date.\n   * If `null` then the timestamp will be unset (i.e. when editing an existing {@link MessageEmbed})\n   * @returns {MessageEmbed}\n   */\n\n\n  setTimestamp() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    this.timestamp = timestamp;\n    return this;\n  }\n  /**\n   * Sets the title of this embed.\n   * @param {string} title The title\n   * @returns {MessageEmbed}\n   */\n\n\n  setTitle(title) {\n    this.title = Util.verifyString(title, RangeError, 'EMBED_TITLE');\n    return this;\n  }\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {MessageEmbed}\n   */\n\n\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n  /**\n   * Transforms the embed to a plain object.\n   * @returns {APIEmbed} The raw data of this embed\n   */\n\n\n  toJSON() {\n    return {\n      title: this.title,\n      type: 'rich',\n      description: this.description,\n      url: this.url,\n      timestamp: this.timestamp && new Date(this.timestamp),\n      color: this.color,\n      fields: this.fields,\n      thumbnail: this.thumbnail,\n      image: this.image,\n      author: this.author && {\n        name: this.author.name,\n        url: this.author.url,\n        icon_url: this.author.iconURL\n      },\n      footer: this.footer && {\n        text: this.footer.text,\n        icon_url: this.footer.iconURL\n      }\n    };\n  }\n  /**\n   * Normalizes field input and verifies strings.\n   * @param {string} name The name of the field\n   * @param {string} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {EmbedField}\n   */\n\n\n  static normalizeField(name, value) {\n    let inline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return {\n      name: Util.verifyString(name, RangeError, 'EMBED_FIELD_NAME', false),\n      value: Util.verifyString(value, RangeError, 'EMBED_FIELD_VALUE', false),\n      inline\n    };\n  }\n  /**\n   * @typedef {Object} EmbedFieldData\n   * @property {string} name The name of this field\n   * @property {string} value The value of this field\n   * @property {boolean} [inline] If this field will be displayed inline\n   */\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields Fields to normalize\n   * @returns {EmbedField[]}\n   */\n\n\n  static normalizeFields() {\n    for (var _len4 = arguments.length, fields = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      fields[_key4] = arguments[_key4];\n    }\n\n    return fields.flat(2).map(field => this.normalizeField(field.name, field.value, typeof field.inline === 'boolean' ? field.inline : false));\n  }\n\n}\n\nmodule.exports = MessageEmbed;\n/**\n * @external APIEmbed\n * @see {@link https://discord.com/developers/docs/resources/channel#embed-object}\n */","map":{"version":3,"names":["process","require","RangeError","Util","deprecationEmittedForSetAuthor","deprecationEmittedForSetFooter","MessageEmbed","constructor","data","skipValidation","setup","type","title","description","url","color","resolveColor","timestamp","Date","getTime","fields","map","cloneObject","normalizeFields","thumbnail","proxyURL","proxy_url","height","width","image","video","author","name","iconURL","icon_url","proxyIconURL","proxy_icon_url","provider","footer","text","createdAt","hexColor","toString","padStart","length","reduce","prev","curr","value","equals","embed","every","field","i","_fieldEquals","other","inline","addField","addFields","push","spliceFields","index","deleteCount","splice","setFields","setAuthor","options","deprecatedIconURL","deprecatedURL","emitWarning","verifyString","setColor","setDescription","setFooter","setImage","setThumbnail","setTimestamp","now","setTitle","setURL","toJSON","normalizeField","flat","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/MessageEmbed.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst { RangeError } = require('../errors');\nconst Util = require('../util/Util');\n\nlet deprecationEmittedForSetAuthor = false;\nlet deprecationEmittedForSetFooter = false;\n\n// TODO: Remove the deprecated code for `setAuthor()` and `setFooter()`.\n\n/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\nclass MessageEmbed {\n  /**\n   * A `Partial` object is a representation of any existing object.\n   * This object contains between 0 and all of the original objects parameters.\n   * This is true regardless of whether the parameters are optional in the base object.\n   * @typedef {Object} Partial\n   */\n\n  /**\n   * Represents the possible options for a MessageEmbed\n   * @typedef {Object} MessageEmbedOptions\n   * @property {string} [title] The title of this embed\n   * @property {string} [description] The description of this embed\n   * @property {string} [url] The URL of this embed\n   * @property {Date|number} [timestamp] The timestamp of this embed\n   * @property {ColorResolvable} [color] The color of this embed\n   * @property {EmbedFieldData[]} [fields] The fields of this embed\n   * @property {Partial<MessageEmbedAuthor>} [author] The author of this embed\n   * @property {Partial<MessageEmbedThumbnail>} [thumbnail] The thumbnail of this embed\n   * @property {Partial<MessageEmbedImage>} [image] The image of this embed\n   * @property {Partial<MessageEmbedVideo>} [video] The video of this embed\n   * @property {Partial<MessageEmbedFooter>} [footer] The footer of this embed\n   */\n\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * @param {MessageEmbed|MessageEmbedOptions|APIEmbed} [data={}] MessageEmbed to clone or raw embed data\n   */\n  constructor(data = {}, skipValidation = false) {\n    this.setup(data, skipValidation);\n  }\n\n  setup(data, skipValidation) {\n    /**\n     * The type of this embed, either:\n     * * `rich` - a generic embed rendered from embed attributes\n     * * `image` - an image embed\n     * * `video` - a video embed\n     * * `gifv` - an animated gif image embed rendered as a video embed\n     * * `article` - an article embed\n     * * `link` - a link embed\n     * @type {string}\n     * @see {@link https://discord.com/developers/docs/resources/channel#embed-object-embed-types}\n     * @deprecated\n     */\n    this.type = data.type ?? 'rich';\n\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n    this.title = data.title ?? null;\n\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n    this.description = data.description ?? null;\n\n    /**\n     * The URL of this embed\n     * @type {?string}\n     */\n    this.url = data.url ?? null;\n\n    /**\n     * The color of this embed\n     * @type {?number}\n     */\n    this.color = 'color' in data ? Util.resolveColor(data.color) : null;\n\n    /**\n     * The timestamp of this embed\n     * @type {?number}\n     */\n    this.timestamp = 'timestamp' in data ? new Date(data.timestamp).getTime() : null;\n\n    /**\n     * Represents a field of a MessageEmbed\n     * @typedef {Object} EmbedField\n     * @property {string} name The name of this field\n     * @property {string} value The value of this field\n     * @property {boolean} inline If this field will be displayed inline\n     */\n\n    /**\n     * The fields of this embed\n     * @type {EmbedField[]}\n     */\n    this.fields = [];\n    if (data.fields) {\n      this.fields = skipValidation ? data.fields.map(Util.cloneObject) : this.constructor.normalizeFields(data.fields);\n    }\n\n    /**\n     * Represents the thumbnail of a MessageEmbed\n     * @typedef {Object} MessageEmbedThumbnail\n     * @property {string} url URL for this thumbnail\n     * @property {string} proxyURL ProxyURL for this thumbnail\n     * @property {number} height Height of this thumbnail\n     * @property {number} width Width of this thumbnail\n     */\n\n    /**\n     * The thumbnail of this embed (if there is one)\n     * @type {?MessageEmbedThumbnail}\n     */\n    this.thumbnail = data.thumbnail\n      ? {\n          url: data.thumbnail.url,\n          proxyURL: data.thumbnail.proxyURL ?? data.thumbnail.proxy_url,\n          height: data.thumbnail.height,\n          width: data.thumbnail.width,\n        }\n      : null;\n\n    /**\n     * Represents the image of a MessageEmbed\n     * @typedef {Object} MessageEmbedImage\n     * @property {string} url URL for this image\n     * @property {string} proxyURL ProxyURL for this image\n     * @property {number} height Height of this image\n     * @property {number} width Width of this image\n     */\n\n    /**\n     * The image of this embed, if there is one\n     * @type {?MessageEmbedImage}\n     */\n    this.image = data.image\n      ? {\n          url: data.image.url,\n          proxyURL: data.image.proxyURL ?? data.image.proxy_url,\n          height: data.image.height,\n          width: data.image.width,\n        }\n      : null;\n\n    /**\n     * Represents the video of a MessageEmbed\n     * @typedef {Object} MessageEmbedVideo\n     * @property {string} url URL of this video\n     * @property {string} proxyURL ProxyURL for this video\n     * @property {number} height Height of this video\n     * @property {number} width Width of this video\n     */\n\n    /**\n     * The video of this embed (if there is one)\n     * @type {?MessageEmbedVideo}\n     * @readonly\n     */\n    this.video = data.video\n      ? {\n          url: data.video.url,\n          proxyURL: data.video.proxyURL ?? data.video.proxy_url,\n          height: data.video.height,\n          width: data.video.width,\n        }\n      : null;\n\n    /**\n     * Represents the author field of a MessageEmbed\n     * @typedef {Object} MessageEmbedAuthor\n     * @property {string} name The name of this author\n     * @property {string} url URL of this author\n     * @property {string} iconURL URL of the icon for this author\n     * @property {string} proxyIconURL Proxied URL of the icon for this author\n     */\n\n    /**\n     * The author of this embed (if there is one)\n     * @type {?MessageEmbedAuthor}\n     */\n    this.author = data.author\n      ? {\n          name: data.author.name,\n          url: data.author.url,\n          iconURL: data.author.iconURL ?? data.author.icon_url,\n          proxyIconURL: data.author.proxyIconURL ?? data.author.proxy_icon_url,\n        }\n      : null;\n\n    /**\n     * Represents the provider of a MessageEmbed\n     * @typedef {Object} MessageEmbedProvider\n     * @property {string} name The name of this provider\n     * @property {string} url URL of this provider\n     */\n\n    /**\n     * The provider of this embed (if there is one)\n     * @type {?MessageEmbedProvider}\n     */\n    this.provider = data.provider\n      ? {\n          name: data.provider.name,\n          url: data.provider.name,\n        }\n      : null;\n\n    /**\n     * Represents the footer field of a MessageEmbed\n     * @typedef {Object} MessageEmbedFooter\n     * @property {string} text The text of this footer\n     * @property {string} iconURL URL of the icon for this footer\n     * @property {string} proxyIconURL Proxied URL of the icon for this footer\n     */\n\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n    this.footer = data.footer\n      ? {\n          text: data.footer.text,\n          iconURL: data.footer.iconURL ?? data.footer.icon_url,\n          proxyIconURL: data.footer.proxyIconURL ?? data.footer.proxy_icon_url,\n        }\n      : null;\n  }\n\n  /**\n   * The date displayed on this embed\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.timestamp ? new Date(this.timestamp) : null;\n  }\n\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {?string}\n   * @readonly\n   */\n  get hexColor() {\n    return this.color ? `#${this.color.toString(16).padStart(6, '0')}` : null;\n  }\n\n  /**\n   * The accumulated length for the embed title, description, fields, footer text, and author name\n   * @type {number}\n   * @readonly\n   */\n  get length() {\n    return (\n      (this.title?.length ?? 0) +\n      (this.description?.length ?? 0) +\n      (this.fields.length >= 1\n        ? this.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0)\n        : 0) +\n      (this.footer?.text.length ?? 0) +\n      (this.author?.name.length ?? 0)\n    );\n  }\n\n  /**\n   * Checks if this embed is equal to another one by comparing every single one of their properties.\n   * @param {MessageEmbed|APIEmbed} embed The embed to compare with\n   * @returns {boolean}\n   */\n  equals(embed) {\n    return (\n      this.type === embed.type &&\n      this.author?.name === embed.author?.name &&\n      this.author?.url === embed.author?.url &&\n      this.author?.iconURL === (embed.author?.iconURL ?? embed.author?.icon_url) &&\n      this.color === embed.color &&\n      this.title === embed.title &&\n      this.description === embed.description &&\n      this.url === embed.url &&\n      this.timestamp === embed.timestamp &&\n      this.fields.length === embed.fields.length &&\n      this.fields.every((field, i) => this._fieldEquals(field, embed.fields[i])) &&\n      this.footer?.text === embed.footer?.text &&\n      this.footer?.iconURL === (embed.footer?.iconURL ?? embed.footer?.icon_url) &&\n      this.image?.url === embed.image?.url &&\n      this.thumbnail?.url === embed.thumbnail?.url &&\n      this.video?.url === embed.video?.url &&\n      this.provider?.name === embed.provider?.name &&\n      this.provider?.url === embed.provider?.url\n    );\n  }\n\n  /**\n   * Compares two given embed fields to see if they are equal\n   * @param {EmbedFieldData} field The first field to compare\n   * @param {EmbedFieldData} other The second field to compare\n   * @returns {boolean}\n   * @private\n   */\n  _fieldEquals(field, other) {\n    return field.name === other.name && field.value === other.value && field.inline === other.inline;\n  }\n\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {string} name The name of this field\n   * @param {string} value The value of this field\n   * @param {boolean} [inline=false] If this field will be displayed inline\n   * @returns {MessageEmbed}\n   */\n  addField(name, value, inline) {\n    return this.addFields({ name, value, inline });\n  }\n\n  /**\n   * Adds fields to the embed (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to add\n   * @returns {MessageEmbed}\n   */\n  addFields(...fields) {\n    this.fields.push(...this.constructor.normalizeFields(fields));\n    return this;\n  }\n\n  /**\n   * Removes, replaces, and inserts fields in the embed (max 25).\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of fields to remove\n   * @param {...EmbedFieldData|EmbedFieldData[]} [fields] The replacing field objects\n   * @returns {MessageEmbed}\n   */\n  spliceFields(index, deleteCount, ...fields) {\n    this.fields.splice(index, deleteCount, ...this.constructor.normalizeFields(...fields));\n    return this;\n  }\n\n  /**\n   * Sets the embed's fields (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to set\n   * @returns {MessageEmbed}\n   */\n  setFields(...fields) {\n    this.spliceFields(0, this.fields.length, fields);\n    return this;\n  }\n\n  /**\n   * The options to provide for setting an author for a {@link MessageEmbed}.\n   * @typedef {Object} EmbedAuthorData\n   * @property {string} name The name of this author.\n   * @property {string} [url] The URL of this author.\n   * @property {string} [iconURL] The icon URL of this author.\n   */\n\n  /**\n   * Sets the author of this embed.\n   * @param {string|EmbedAuthorData|null} options The options to provide for the author.\n   * Provide `null` to remove the author data.\n   * @param {string} [deprecatedIconURL] The icon URL of this author.\n   * <warn>This parameter is **deprecated**. Use the `options` parameter instead.</warn>\n   * @param {string} [deprecatedURL] The URL of this author.\n   * <warn>This parameter is **deprecated**. Use the `options` parameter instead.</warn>\n   * @returns {MessageEmbed}\n   */\n  setAuthor(options, deprecatedIconURL, deprecatedURL) {\n    if (options === null) {\n      this.author = {};\n      return this;\n    }\n\n    if (typeof options === 'string') {\n      if (!deprecationEmittedForSetAuthor) {\n        process.emitWarning(\n          'Passing strings for MessageEmbed#setAuthor is deprecated. Pass a sole object instead.',\n          'DeprecationWarning',\n        );\n\n        deprecationEmittedForSetAuthor = true;\n      }\n\n      options = { name: options, url: deprecatedURL, iconURL: deprecatedIconURL };\n    }\n\n    const { name, url, iconURL } = options;\n    this.author = { name: Util.verifyString(name, RangeError, 'EMBED_AUTHOR_NAME'), url, iconURL };\n    return this;\n  }\n\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {MessageEmbed}\n   */\n  setColor(color) {\n    this.color = Util.resolveColor(color);\n    return this;\n  }\n\n  /**\n   * Sets the description of this embed.\n   * @param {string} description The description\n   * @returns {MessageEmbed}\n   */\n  setDescription(description) {\n    this.description = Util.verifyString(description, RangeError, 'EMBED_DESCRIPTION');\n    return this;\n  }\n\n  /**\n   * The options to provide for setting a footer for a {@link MessageEmbed}.\n   * @typedef {Object} EmbedFooterData\n   * @property {string} text The text of the footer.\n   * @property {string} [iconURL] The icon URL of the footer.\n   */\n\n  /**\n   * Sets the footer of this embed.\n   * @param {string|EmbedFooterData|null} options The options to provide for the footer.\n   * Provide `null` to remove the footer data.\n   * @param {string} [deprecatedIconURL] The icon URL of this footer.\n   * <warn>This parameter is **deprecated**. Use the `options` parameter instead.</warn>\n   * @returns {MessageEmbed}\n   */\n  setFooter(options, deprecatedIconURL) {\n    if (options === null) {\n      this.footer = {};\n      return this;\n    }\n\n    if (typeof options === 'string') {\n      if (!deprecationEmittedForSetFooter) {\n        process.emitWarning(\n          'Passing strings for MessageEmbed#setFooter is deprecated. Pass a sole object instead.',\n          'DeprecationWarning',\n        );\n\n        deprecationEmittedForSetFooter = true;\n      }\n\n      options = { text: options, iconURL: deprecatedIconURL };\n    }\n\n    const { text, iconURL } = options;\n    this.footer = { text: Util.verifyString(text, RangeError, 'EMBED_FOOTER_TEXT'), iconURL };\n    return this;\n  }\n\n  /**\n   * Sets the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {MessageEmbed}\n   */\n  setImage(url) {\n    this.image = { url };\n    return this;\n  }\n\n  /**\n   * Sets the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {MessageEmbed}\n   */\n  setThumbnail(url) {\n    this.thumbnail = { url };\n    return this;\n  }\n\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date|number|null} [timestamp=Date.now()] The timestamp or date.\n   * If `null` then the timestamp will be unset (i.e. when editing an existing {@link MessageEmbed})\n   * @returns {MessageEmbed}\n   */\n  setTimestamp(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    this.timestamp = timestamp;\n    return this;\n  }\n\n  /**\n   * Sets the title of this embed.\n   * @param {string} title The title\n   * @returns {MessageEmbed}\n   */\n  setTitle(title) {\n    this.title = Util.verifyString(title, RangeError, 'EMBED_TITLE');\n    return this;\n  }\n\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {MessageEmbed}\n   */\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Transforms the embed to a plain object.\n   * @returns {APIEmbed} The raw data of this embed\n   */\n  toJSON() {\n    return {\n      title: this.title,\n      type: 'rich',\n      description: this.description,\n      url: this.url,\n      timestamp: this.timestamp && new Date(this.timestamp),\n      color: this.color,\n      fields: this.fields,\n      thumbnail: this.thumbnail,\n      image: this.image,\n      author: this.author && {\n        name: this.author.name,\n        url: this.author.url,\n        icon_url: this.author.iconURL,\n      },\n      footer: this.footer && {\n        text: this.footer.text,\n        icon_url: this.footer.iconURL,\n      },\n    };\n  }\n\n  /**\n   * Normalizes field input and verifies strings.\n   * @param {string} name The name of the field\n   * @param {string} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {EmbedField}\n   */\n  static normalizeField(name, value, inline = false) {\n    return {\n      name: Util.verifyString(name, RangeError, 'EMBED_FIELD_NAME', false),\n      value: Util.verifyString(value, RangeError, 'EMBED_FIELD_VALUE', false),\n      inline,\n    };\n  }\n\n  /**\n   * @typedef {Object} EmbedFieldData\n   * @property {string} name The name of this field\n   * @property {string} value The value of this field\n   * @property {boolean} [inline] If this field will be displayed inline\n   */\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields Fields to normalize\n   * @returns {EmbedField[]}\n   */\n  static normalizeFields(...fields) {\n    return fields\n      .flat(2)\n      .map(field =>\n        this.normalizeField(field.name, field.value, typeof field.inline === 'boolean' ? field.inline : false),\n      );\n  }\n}\n\nmodule.exports = MessageEmbed;\n\n/**\n * @external APIEmbed\n * @see {@link https://discord.com/developers/docs/resources/channel#embed-object}\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAM;EAAEC;AAAF,IAAiBD,OAAO,CAAC,WAAD,CAA9B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,cAAD,CAApB;;AAEA,IAAIG,8BAA8B,GAAG,KAArC;AACA,IAAIC,8BAA8B,GAAG,KAArC,C,CAEA;;AAEA;AACA;AACA;;AACA,MAAMC,YAAN,CAAmB;EACjB;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE;;EACA;AACF;AACA;EACEC,WAAW,GAAoC;IAAA,IAAnCC,IAAmC,uEAA5B,EAA4B;IAAA,IAAxBC,cAAwB,uEAAP,KAAO;IAC7C,KAAKC,KAAL,CAAWF,IAAX,EAAiBC,cAAjB;EACD;;EAEDC,KAAK,CAACF,IAAD,EAAOC,cAAP,EAAuB;IAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,KAAKE,IAAL,GAAYH,IAAI,CAACG,IAAL,IAAa,MAAzB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAaJ,IAAI,CAACI,KAAL,IAAc,IAA3B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmBL,IAAI,CAACK,WAAL,IAAoB,IAAvC;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,GAAL,GAAWN,IAAI,CAACM,GAAL,IAAY,IAAvB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAa,WAAWP,IAAX,GAAkBL,IAAI,CAACa,YAAL,CAAkBR,IAAI,CAACO,KAAvB,CAAlB,GAAkD,IAA/D;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,SAAL,GAAiB,eAAeT,IAAf,GAAsB,IAAIU,IAAJ,CAASV,IAAI,CAACS,SAAd,EAAyBE,OAAzB,EAAtB,GAA2D,IAA5E;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAc,EAAd;;IACA,IAAIZ,IAAI,CAACY,MAAT,EAAiB;MACf,KAAKA,MAAL,GAAcX,cAAc,GAAGD,IAAI,CAACY,MAAL,CAAYC,GAAZ,CAAgBlB,IAAI,CAACmB,WAArB,CAAH,GAAuC,KAAKf,WAAL,CAAiBgB,eAAjB,CAAiCf,IAAI,CAACY,MAAtC,CAAnE;IACD;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;;;IACI,KAAKI,SAAL,GAAiBhB,IAAI,CAACgB,SAAL,GACb;MACEV,GAAG,EAAEN,IAAI,CAACgB,SAAL,CAAeV,GADtB;MAEEW,QAAQ,EAAEjB,IAAI,CAACgB,SAAL,CAAeC,QAAf,IAA2BjB,IAAI,CAACgB,SAAL,CAAeE,SAFtD;MAGEC,MAAM,EAAEnB,IAAI,CAACgB,SAAL,CAAeG,MAHzB;MAIEC,KAAK,EAAEpB,IAAI,CAACgB,SAAL,CAAeI;IAJxB,CADa,GAOb,IAPJ;IASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAarB,IAAI,CAACqB,KAAL,GACT;MACEf,GAAG,EAAEN,IAAI,CAACqB,KAAL,CAAWf,GADlB;MAEEW,QAAQ,EAAEjB,IAAI,CAACqB,KAAL,CAAWJ,QAAX,IAAuBjB,IAAI,CAACqB,KAAL,CAAWH,SAF9C;MAGEC,MAAM,EAAEnB,IAAI,CAACqB,KAAL,CAAWF,MAHrB;MAIEC,KAAK,EAAEpB,IAAI,CAACqB,KAAL,CAAWD;IAJpB,CADS,GAOT,IAPJ;IASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;AACA;;IACI,KAAKE,KAAL,GAAatB,IAAI,CAACsB,KAAL,GACT;MACEhB,GAAG,EAAEN,IAAI,CAACsB,KAAL,CAAWhB,GADlB;MAEEW,QAAQ,EAAEjB,IAAI,CAACsB,KAAL,CAAWL,QAAX,IAAuBjB,IAAI,CAACsB,KAAL,CAAWJ,SAF9C;MAGEC,MAAM,EAAEnB,IAAI,CAACsB,KAAL,CAAWH,MAHrB;MAIEC,KAAK,EAAEpB,IAAI,CAACsB,KAAL,CAAWF;IAJpB,CADS,GAOT,IAPJ;IASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;;IACI,KAAKG,MAAL,GAAcvB,IAAI,CAACuB,MAAL,GACV;MACEC,IAAI,EAAExB,IAAI,CAACuB,MAAL,CAAYC,IADpB;MAEElB,GAAG,EAAEN,IAAI,CAACuB,MAAL,CAAYjB,GAFnB;MAGEmB,OAAO,EAAEzB,IAAI,CAACuB,MAAL,CAAYE,OAAZ,IAAuBzB,IAAI,CAACuB,MAAL,CAAYG,QAH9C;MAIEC,YAAY,EAAE3B,IAAI,CAACuB,MAAL,CAAYI,YAAZ,IAA4B3B,IAAI,CAACuB,MAAL,CAAYK;IAJxD,CADU,GAOV,IAPJ;IASA;AACJ;AACA;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgB7B,IAAI,CAAC6B,QAAL,GACZ;MACEL,IAAI,EAAExB,IAAI,CAAC6B,QAAL,CAAcL,IADtB;MAEElB,GAAG,EAAEN,IAAI,CAAC6B,QAAL,CAAcL;IAFrB,CADY,GAKZ,IALJ;IAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;;IACI,KAAKM,MAAL,GAAc9B,IAAI,CAAC8B,MAAL,GACV;MACEC,IAAI,EAAE/B,IAAI,CAAC8B,MAAL,CAAYC,IADpB;MAEEN,OAAO,EAAEzB,IAAI,CAAC8B,MAAL,CAAYL,OAAZ,IAAuBzB,IAAI,CAAC8B,MAAL,CAAYJ,QAF9C;MAGEC,YAAY,EAAE3B,IAAI,CAAC8B,MAAL,CAAYH,YAAZ,IAA4B3B,IAAI,CAAC8B,MAAL,CAAYF;IAHxD,CADU,GAMV,IANJ;EAOD;EAED;AACF;AACA;AACA;AACA;;;EACe,IAATI,SAAS,GAAG;IACd,OAAO,KAAKvB,SAAL,GAAiB,IAAIC,IAAJ,CAAS,KAAKD,SAAd,CAAjB,GAA4C,IAAnD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAARwB,QAAQ,GAAG;IACb,OAAO,KAAK1B,KAAL,GAAc,IAAG,KAAKA,KAAL,CAAW2B,QAAX,CAAoB,EAApB,EAAwBC,QAAxB,CAAiC,CAAjC,EAAoC,GAApC,CAAyC,EAA1D,GAA8D,IAArE;EACD;EAED;AACF;AACA;AACA;AACA;;;EACY,IAANC,MAAM,GAAG;IACX,OACE,CAAC,KAAKhC,KAAL,EAAYgC,MAAZ,IAAsB,CAAvB,KACC,KAAK/B,WAAL,EAAkB+B,MAAlB,IAA4B,CAD7B,KAEC,KAAKxB,MAAL,CAAYwB,MAAZ,IAAsB,CAAtB,GACG,KAAKxB,MAAL,CAAYyB,MAAZ,CAAmB,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGC,IAAI,CAACf,IAAL,CAAUY,MAAjB,GAA0BG,IAAI,CAACC,KAAL,CAAWJ,MAAxE,EAAgF,CAAhF,CADH,GAEG,CAJJ,KAKC,KAAKN,MAAL,EAAaC,IAAb,CAAkBK,MAAlB,IAA4B,CAL7B,KAMC,KAAKb,MAAL,EAAaC,IAAb,CAAkBY,MAAlB,IAA4B,CAN7B,CADF;EASD;EAED;AACF;AACA;AACA;AACA;;;EACEK,MAAM,CAACC,KAAD,EAAQ;IACZ,OACE,KAAKvC,IAAL,KAAcuC,KAAK,CAACvC,IAApB,IACA,KAAKoB,MAAL,EAAaC,IAAb,KAAsBkB,KAAK,CAACnB,MAAN,EAAcC,IADpC,IAEA,KAAKD,MAAL,EAAajB,GAAb,KAAqBoC,KAAK,CAACnB,MAAN,EAAcjB,GAFnC,IAGA,KAAKiB,MAAL,EAAaE,OAAb,MAA0BiB,KAAK,CAACnB,MAAN,EAAcE,OAAd,IAAyBiB,KAAK,CAACnB,MAAN,EAAcG,QAAjE,CAHA,IAIA,KAAKnB,KAAL,KAAemC,KAAK,CAACnC,KAJrB,IAKA,KAAKH,KAAL,KAAesC,KAAK,CAACtC,KALrB,IAMA,KAAKC,WAAL,KAAqBqC,KAAK,CAACrC,WAN3B,IAOA,KAAKC,GAAL,KAAaoC,KAAK,CAACpC,GAPnB,IAQA,KAAKG,SAAL,KAAmBiC,KAAK,CAACjC,SARzB,IASA,KAAKG,MAAL,CAAYwB,MAAZ,KAAuBM,KAAK,CAAC9B,MAAN,CAAawB,MATpC,IAUA,KAAKxB,MAAL,CAAY+B,KAAZ,CAAkB,CAACC,KAAD,EAAQC,CAAR,KAAc,KAAKC,YAAL,CAAkBF,KAAlB,EAAyBF,KAAK,CAAC9B,MAAN,CAAaiC,CAAb,CAAzB,CAAhC,CAVA,IAWA,KAAKf,MAAL,EAAaC,IAAb,KAAsBW,KAAK,CAACZ,MAAN,EAAcC,IAXpC,IAYA,KAAKD,MAAL,EAAaL,OAAb,MAA0BiB,KAAK,CAACZ,MAAN,EAAcL,OAAd,IAAyBiB,KAAK,CAACZ,MAAN,EAAcJ,QAAjE,CAZA,IAaA,KAAKL,KAAL,EAAYf,GAAZ,KAAoBoC,KAAK,CAACrB,KAAN,EAAaf,GAbjC,IAcA,KAAKU,SAAL,EAAgBV,GAAhB,KAAwBoC,KAAK,CAAC1B,SAAN,EAAiBV,GAdzC,IAeA,KAAKgB,KAAL,EAAYhB,GAAZ,KAAoBoC,KAAK,CAACpB,KAAN,EAAahB,GAfjC,IAgBA,KAAKuB,QAAL,EAAeL,IAAf,KAAwBkB,KAAK,CAACb,QAAN,EAAgBL,IAhBxC,IAiBA,KAAKK,QAAL,EAAevB,GAAf,KAAuBoC,KAAK,CAACb,QAAN,EAAgBvB,GAlBzC;EAoBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEwC,YAAY,CAACF,KAAD,EAAQG,KAAR,EAAe;IACzB,OAAOH,KAAK,CAACpB,IAAN,KAAeuB,KAAK,CAACvB,IAArB,IAA6BoB,KAAK,CAACJ,KAAN,KAAgBO,KAAK,CAACP,KAAnD,IAA4DI,KAAK,CAACI,MAAN,KAAiBD,KAAK,CAACC,MAA1F;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,QAAQ,CAACzB,IAAD,EAAOgB,KAAP,EAAcQ,MAAd,EAAsB;IAC5B,OAAO,KAAKE,SAAL,CAAe;MAAE1B,IAAF;MAAQgB,KAAR;MAAeQ;IAAf,CAAf,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,SAAS,GAAY;IAAA,kCAARtC,MAAQ;MAARA,MAAQ;IAAA;;IACnB,KAAKA,MAAL,CAAYuC,IAAZ,CAAiB,GAAG,KAAKpD,WAAL,CAAiBgB,eAAjB,CAAiCH,MAAjC,CAApB;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEwC,YAAY,CAACC,KAAD,EAAQC,WAAR,EAAgC;IAAA,mCAAR1C,MAAQ;MAARA,MAAQ;IAAA;;IAC1C,KAAKA,MAAL,CAAY2C,MAAZ,CAAmBF,KAAnB,EAA0BC,WAA1B,EAAuC,GAAG,KAAKvD,WAAL,CAAiBgB,eAAjB,CAAiC,GAAGH,MAApC,CAA1C;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE4C,SAAS,GAAY;IAAA,mCAAR5C,MAAQ;MAARA,MAAQ;IAAA;;IACnB,KAAKwC,YAAL,CAAkB,CAAlB,EAAqB,KAAKxC,MAAL,CAAYwB,MAAjC,EAAyCxB,MAAzC;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE6C,SAAS,CAACC,OAAD,EAAUC,iBAAV,EAA6BC,aAA7B,EAA4C;IACnD,IAAIF,OAAO,KAAK,IAAhB,EAAsB;MACpB,KAAKnC,MAAL,GAAc,EAAd;MACA,OAAO,IAAP;IACD;;IAED,IAAI,OAAOmC,OAAP,KAAmB,QAAvB,EAAiC;MAC/B,IAAI,CAAC9D,8BAAL,EAAqC;QACnCJ,OAAO,CAACqE,WAAR,CACE,uFADF,EAEE,oBAFF;QAKAjE,8BAA8B,GAAG,IAAjC;MACD;;MAED8D,OAAO,GAAG;QAAElC,IAAI,EAAEkC,OAAR;QAAiBpD,GAAG,EAAEsD,aAAtB;QAAqCnC,OAAO,EAAEkC;MAA9C,CAAV;IACD;;IAED,MAAM;MAAEnC,IAAF;MAAQlB,GAAR;MAAamB;IAAb,IAAyBiC,OAA/B;IACA,KAAKnC,MAAL,GAAc;MAAEC,IAAI,EAAE7B,IAAI,CAACmE,YAAL,CAAkBtC,IAAlB,EAAwB9B,UAAxB,EAAoC,mBAApC,CAAR;MAAkEY,GAAlE;MAAuEmB;IAAvE,CAAd;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEsC,QAAQ,CAACxD,KAAD,EAAQ;IACd,KAAKA,KAAL,GAAaZ,IAAI,CAACa,YAAL,CAAkBD,KAAlB,CAAb;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEyD,cAAc,CAAC3D,WAAD,EAAc;IAC1B,KAAKA,WAAL,GAAmBV,IAAI,CAACmE,YAAL,CAAkBzD,WAAlB,EAA+BX,UAA/B,EAA2C,mBAA3C,CAAnB;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEuE,SAAS,CAACP,OAAD,EAAUC,iBAAV,EAA6B;IACpC,IAAID,OAAO,KAAK,IAAhB,EAAsB;MACpB,KAAK5B,MAAL,GAAc,EAAd;MACA,OAAO,IAAP;IACD;;IAED,IAAI,OAAO4B,OAAP,KAAmB,QAAvB,EAAiC;MAC/B,IAAI,CAAC7D,8BAAL,EAAqC;QACnCL,OAAO,CAACqE,WAAR,CACE,uFADF,EAEE,oBAFF;QAKAhE,8BAA8B,GAAG,IAAjC;MACD;;MAED6D,OAAO,GAAG;QAAE3B,IAAI,EAAE2B,OAAR;QAAiBjC,OAAO,EAAEkC;MAA1B,CAAV;IACD;;IAED,MAAM;MAAE5B,IAAF;MAAQN;IAAR,IAAoBiC,OAA1B;IACA,KAAK5B,MAAL,GAAc;MAAEC,IAAI,EAAEpC,IAAI,CAACmE,YAAL,CAAkB/B,IAAlB,EAAwBrC,UAAxB,EAAoC,mBAApC,CAAR;MAAkE+B;IAAlE,CAAd;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEyC,QAAQ,CAAC5D,GAAD,EAAM;IACZ,KAAKe,KAAL,GAAa;MAAEf;IAAF,CAAb;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE6D,YAAY,CAAC7D,GAAD,EAAM;IAChB,KAAKU,SAAL,GAAiB;MAAEV;IAAF,CAAjB;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE8D,YAAY,GAAyB;IAAA,IAAxB3D,SAAwB,uEAAZC,IAAI,CAAC2D,GAAL,EAAY;IACnC,IAAI5D,SAAS,YAAYC,IAAzB,EAA+BD,SAAS,GAAGA,SAAS,CAACE,OAAV,EAAZ;IAC/B,KAAKF,SAAL,GAAiBA,SAAjB;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE6D,QAAQ,CAAClE,KAAD,EAAQ;IACd,KAAKA,KAAL,GAAaT,IAAI,CAACmE,YAAL,CAAkB1D,KAAlB,EAAyBV,UAAzB,EAAqC,aAArC,CAAb;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE6E,MAAM,CAACjE,GAAD,EAAM;IACV,KAAKA,GAAL,GAAWA,GAAX;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;;;EACEkE,MAAM,GAAG;IACP,OAAO;MACLpE,KAAK,EAAE,KAAKA,KADP;MAELD,IAAI,EAAE,MAFD;MAGLE,WAAW,EAAE,KAAKA,WAHb;MAILC,GAAG,EAAE,KAAKA,GAJL;MAKLG,SAAS,EAAE,KAAKA,SAAL,IAAkB,IAAIC,IAAJ,CAAS,KAAKD,SAAd,CALxB;MAMLF,KAAK,EAAE,KAAKA,KANP;MAOLK,MAAM,EAAE,KAAKA,MAPR;MAQLI,SAAS,EAAE,KAAKA,SARX;MASLK,KAAK,EAAE,KAAKA,KATP;MAULE,MAAM,EAAE,KAAKA,MAAL,IAAe;QACrBC,IAAI,EAAE,KAAKD,MAAL,CAAYC,IADG;QAErBlB,GAAG,EAAE,KAAKiB,MAAL,CAAYjB,GAFI;QAGrBoB,QAAQ,EAAE,KAAKH,MAAL,CAAYE;MAHD,CAVlB;MAeLK,MAAM,EAAE,KAAKA,MAAL,IAAe;QACrBC,IAAI,EAAE,KAAKD,MAAL,CAAYC,IADG;QAErBL,QAAQ,EAAE,KAAKI,MAAL,CAAYL;MAFD;IAflB,CAAP;EAoBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACuB,OAAdgD,cAAc,CAACjD,IAAD,EAAOgB,KAAP,EAA8B;IAAA,IAAhBQ,MAAgB,uEAAP,KAAO;IACjD,OAAO;MACLxB,IAAI,EAAE7B,IAAI,CAACmE,YAAL,CAAkBtC,IAAlB,EAAwB9B,UAAxB,EAAoC,kBAApC,EAAwD,KAAxD,CADD;MAEL8C,KAAK,EAAE7C,IAAI,CAACmE,YAAL,CAAkBtB,KAAlB,EAAyB9C,UAAzB,EAAqC,mBAArC,EAA0D,KAA1D,CAFF;MAGLsD;IAHK,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACwB,OAAfjC,eAAe,GAAY;IAAA,mCAARH,MAAQ;MAARA,MAAQ;IAAA;;IAChC,OAAOA,MAAM,CACV8D,IADI,CACC,CADD,EAEJ7D,GAFI,CAEA+B,KAAK,IACR,KAAK6B,cAAL,CAAoB7B,KAAK,CAACpB,IAA1B,EAAgCoB,KAAK,CAACJ,KAAtC,EAA6C,OAAOI,KAAK,CAACI,MAAb,KAAwB,SAAxB,GAAoCJ,KAAK,CAACI,MAA1C,GAAmD,KAAhG,CAHG,CAAP;EAKD;;AAxiBgB;;AA2iBnB2B,MAAM,CAACC,OAAP,GAAiB9E,YAAjB;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}