{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst Base = require('./Base');\n\nconst {\n  Error\n} = require('../errors');\n\nconst Permissions = require('../util/Permissions');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\nconst Util = require('../util/Util');\n\nlet deprecationEmittedForComparePositions = false;\n/**\n * @type {WeakSet<Role>}\n * @private\n * @internal\n */\n\nconst deletedRoles = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n/**\n * Represents a role on Discord.\n * @extends {Base}\n */\n\nclass Role extends Base {\n  constructor(client, data, guild) {\n    super(client);\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n    /**\n     * The icon hash of the role\n     * @type {?string}\n     */\n\n    this.icon = null;\n    /**\n     * The unicode emoji for the role\n     * @type {?string}\n     */\n\n    this.unicodeEmoji = null;\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The role's id (unique to the guild it is part of)\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the role\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('color' in data) {\n      /**\n       * The base 10 color of the role\n       * @type {number}\n       */\n      this.color = data.color;\n    }\n\n    if ('hoist' in data) {\n      /**\n       * If true, users that are part of this role will appear in a separate category in the users list\n       * @type {boolean}\n       */\n      this.hoist = data.hoist;\n    }\n\n    if ('position' in data) {\n      /**\n       * The raw position of the role from the API\n       * @type {number}\n       */\n      this.rawPosition = data.position;\n    }\n\n    if ('permissions' in data) {\n      /**\n       * The permissions of the role\n       * @type {Readonly<Permissions>}\n       */\n      this.permissions = new Permissions(BigInt(data.permissions)).freeze();\n    }\n\n    if ('managed' in data) {\n      /**\n       * Whether or not the role is managed by an external service\n       * @type {boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if ('mentionable' in data) {\n      /**\n       * Whether or not the role can be mentioned by anyone\n       * @type {boolean}\n       */\n      this.mentionable = data.mentionable;\n    }\n\n    if ('icon' in data) this.icon = data.icon;\n    if ('unicode_emoji' in data) this.unicodeEmoji = data.unicode_emoji;\n    /**\n     * The tags this role has\n     * @type {?Object}\n     * @property {Snowflake} [botId] The id of the bot this role belongs to\n     * @property {Snowflake|string} [integrationId] The id of the integration this role belongs to\n     * @property {true} [premiumSubscriberRole] Whether this is the guild's premium subscription role\n     */\n\n    this.tags = data.tags ? {} : null;\n\n    if (data.tags) {\n      if ('bot_id' in data.tags) {\n        this.tags.botId = data.tags.bot_id;\n      }\n\n      if ('integration_id' in data.tags) {\n        this.tags.integrationId = data.tags.integration_id;\n      }\n\n      if ('premium_subscriber' in data.tags) {\n        this.tags.premiumSubscriberRole = true;\n      }\n    }\n  }\n  /**\n   * The timestamp the role was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n  /**\n   * The time the role was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * Whether or not the role has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n\n\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Role#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    return deletedRoles.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Role#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    if (value) deletedRoles.add(this);else deletedRoles.delete(this);\n  }\n  /**\n   * The hexadecimal version of the role color, with a leading hashtag\n   * @type {string}\n   * @readonly\n   */\n\n\n  get hexColor() {\n    return `#${this.color.toString(16).padStart(6, '0')}`;\n  }\n  /**\n   * The cached guild members that have this role\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n\n\n  get members() {\n    return this.guild.members.cache.filter(m => m.roles.cache.has(this.id));\n  }\n  /**\n   * Whether the role is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get editable() {\n    if (this.managed) return false;\n    const clientMember = this.guild.members.resolve(this.client.user);\n    if (!clientMember.permissions.has(Permissions.FLAGS.MANAGE_ROLES)) return false;\n    return clientMember.roles.highest.comparePositionTo(this) > 0;\n  }\n  /**\n   * The position of the role in the role manager\n   * @type {number}\n   * @readonly\n   */\n\n\n  get position() {\n    const sorted = this.guild._sortedRoles();\n\n    return [...sorted.values()].indexOf(sorted.get(this.id));\n  }\n  /**\n   * Compares this role's position to another role's.\n   * @param {RoleResolvable} role Role to compare to this one\n   * @returns {number} Negative number if this role's position is lower (other role's is higher),\n   * positive number if this one is higher (other's is lower), 0 if equal\n   */\n\n\n  comparePositionTo(role) {\n    return this.guild.roles.comparePositions(this, role);\n  }\n  /**\n   * The data for a role.\n   * @typedef {Object} RoleData\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   * @property {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} [icon] The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @property {?string} [unicodeEmoji] The unicode emoji for the role\n   */\n\n  /**\n   * Edits the role.\n   * @param {RoleData} data The new data for the role\n   * @param {string} [reason] Reason for editing this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Edit a role\n   * role.edit({ name: 'new role' })\n   *   .then(updated => console.log(`Edited role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n\n\n  edit(data, reason) {\n    return this.guild.roles.edit(this, data, reason);\n  }\n  /**\n   * Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\n   * taking into account permission overwrites.\n   * @param {GuildChannel|Snowflake} channel The guild channel to use as context\n   * @param {boolean} [checkAdmin=true] Whether having `ADMINISTRATOR` will return all permissions\n   * @returns {Readonly<Permissions>}\n   */\n\n\n  permissionsIn(channel) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n    return channel.rolePermissions(this, checkAdmin);\n  }\n  /**\n   * Sets a new name for the role.\n   * @param {string} name The new name of the role\n   * @param {string} [reason] Reason for changing the role's name\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the name of the role\n   * role.setName('new role')\n   *   .then(updated => console.log(`Updated role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n\n\n  setName(name, reason) {\n    return this.edit({\n      name\n    }, reason);\n  }\n  /**\n   * Sets a new color for the role.\n   * @param {ColorResolvable} color The color of the role\n   * @param {string} [reason] Reason for changing the role's color\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the color of a role\n   * role.setColor('#FF0000')\n   *   .then(updated => console.log(`Set color of role to ${updated.color}`))\n   *   .catch(console.error);\n   */\n\n\n  setColor(color, reason) {\n    return this.edit({\n      color\n    }, reason);\n  }\n  /**\n   * Sets whether or not the role should be hoisted.\n   * @param {boolean} [hoist=true] Whether or not to hoist the role\n   * @param {string} [reason] Reason for setting whether or not the role should be hoisted\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the hoist of the role\n   * role.setHoist(true)\n   *   .then(updated => console.log(`Role hoisted: ${updated.hoist}`))\n   *   .catch(console.error);\n   */\n\n\n  setHoist() {\n    let hoist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let reason = arguments.length > 1 ? arguments[1] : undefined;\n    return this.edit({\n      hoist\n    }, reason);\n  }\n  /**\n   * Sets the permissions of the role.\n   * @param {PermissionResolvable} permissions The permissions of the role\n   * @param {string} [reason] Reason for changing the role's permissions\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the permissions of the role\n   * role.setPermissions([Permissions.FLAGS.KICK_MEMBERS, Permissions.FLAGS.BAN_MEMBERS])\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove all permissions from a role\n   * role.setPermissions(0n)\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   */\n\n\n  setPermissions(permissions, reason) {\n    return this.edit({\n      permissions\n    }, reason);\n  }\n  /**\n   * Sets whether this role is mentionable.\n   * @param {boolean} [mentionable=true] Whether this role should be mentionable\n   * @param {string} [reason] Reason for setting whether or not this role should be mentionable\n   * @returns {Promise<Role>}\n   * @example\n   * // Make the role mentionable\n   * role.setMentionable(true)\n   *   .then(updated => console.log(`Role updated ${updated.name}`))\n   *   .catch(console.error);\n   */\n\n\n  setMentionable() {\n    let mentionable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let reason = arguments.length > 1 ? arguments[1] : undefined;\n    return this.edit({\n      mentionable\n    }, reason);\n  }\n  /**\n   * Sets a new icon for the role.\n   * @param {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} icon The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @param {string} [reason] Reason for changing the role's icon\n   * @returns {Promise<Role>}\n   */\n\n\n  setIcon(icon, reason) {\n    return this.edit({\n      icon\n    }, reason);\n  }\n  /**\n   * Sets a new unicode emoji for the role.\n   * @param {?string} unicodeEmoji The new unicode emoji for the role\n   * @param {string} [reason] Reason for changing the role's unicode emoji\n   * @returns {Promise<Role>}\n   * @example\n   * // Set a new unicode emoji for the role\n   * role.setUnicodeEmoji('🤖')\n   *   .then(updated => console.log(`Set unicode emoji for the role to ${updated.unicodeEmoji}`))\n   *   .catch(console.error);\n   */\n\n\n  setUnicodeEmoji(unicodeEmoji, reason) {\n    return this.edit({\n      unicodeEmoji\n    }, reason);\n  }\n  /**\n   * Options used to set the position of a role.\n   * @typedef {Object} SetRolePositionOptions\n   * @property {boolean} [relative=false] Whether to change the position relative to its current value or not\n   * @property {string} [reason] The reason for changing the position\n   */\n\n  /**\n   * Sets the new position of the role.\n   * @param {number} position The new position for the role\n   * @param {SetRolePositionOptions} [options] Options for setting the position\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the position of the role\n   * role.setPosition(1)\n   *   .then(updated => console.log(`Role position: ${updated.position}`))\n   *   .catch(console.error);\n   */\n\n\n  async setPosition(position) {\n    let {\n      relative,\n      reason\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedRoles = await Util.setPosition(this, position, relative, this.guild._sortedRoles(), this.client.api.guilds(this.guild.id).roles, reason);\n    this.client.actions.GuildRolesPositionUpdate.handle({\n      guild_id: this.guild.id,\n      roles: updatedRoles\n    });\n    return this;\n  }\n  /**\n   * Deletes the role.\n   * @param {string} [reason] Reason for deleting this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Delete a role\n   * role.delete('The role needed to go')\n   *   .then(deleted => console.log(`Deleted role ${deleted.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async delete(reason) {\n    await this.guild.roles.delete(this.id, reason);\n    return this;\n  }\n  /**\n   * A link to the role's icon\n   * @param {StaticImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n\n\n  iconURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.icon) return null;\n    return this.client.rest.cdn.RoleIcon(this.id, this.icon, format, size);\n  }\n  /**\n   * Whether this role equals another role. It compares all properties, so for most operations\n   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Role} role Role to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(role) {\n    return role && this.id === role.id && this.name === role.name && this.color === role.color && this.hoist === role.hoist && this.position === role.position && this.permissions.bitfield === role.permissions.bitfield && this.managed === role.managed && this.icon === role.icon && this.unicodeEmoji === role.unicodeEmoji;\n  }\n  /**\n   * When concatenated with a string, this automatically returns the role's mention instead of the Role object.\n   * @returns {string}\n   * @example\n   * // Logs: Role: <@&123456789012345678>\n   * console.log(`Role: ${role}`);\n   */\n\n\n  toString() {\n    if (this.id === this.guild.id) return '@everyone';\n    return `<@&${this.id}>`;\n  }\n\n  toJSON() {\n    return { ...super.toJSON({\n        createdTimestamp: true\n      }),\n      permissions: this.permissions.toJSON()\n    };\n  }\n  /**\n   * Compares the positions of two roles.\n   * @param {Role} role1 First role to compare\n   * @param {Role} role2 Second role to compare\n   * @returns {number} Negative number if the first role's position is lower (second role's is higher),\n   * positive number if the first's is higher (second's is lower), 0 if equal\n   * @deprecated Use {@link RoleManager#comparePositions} instead.\n   */\n\n\n  static comparePositions(role1, role2) {\n    if (!deprecationEmittedForComparePositions) {\n      process.emitWarning('The Role.comparePositions method is deprecated. Use RoleManager#comparePositions instead.', 'DeprecationWarning');\n      deprecationEmittedForComparePositions = true;\n    }\n\n    return role1.guild.roles.comparePositions(role1, role2);\n  }\n\n}\n\nexports.Role = Role;\nexports.deletedRoles = deletedRoles;\n/**\n * @external APIRole\n * @see {@link https://discord.com/developers/docs/topics/permissions#role-object}\n */","map":{"version":3,"names":["process","require","Base","Error","Permissions","SnowflakeUtil","Util","deprecationEmittedForComparePositions","deletedRoles","WeakSet","deprecationEmittedForDeleted","Role","constructor","client","data","guild","icon","unicodeEmoji","_patch","id","name","color","hoist","rawPosition","position","permissions","BigInt","freeze","managed","mentionable","unicode_emoji","tags","botId","bot_id","integrationId","integration_id","premiumSubscriberRole","createdTimestamp","timestampFrom","createdAt","Date","deleted","emitWarning","has","value","add","delete","hexColor","toString","padStart","members","cache","filter","m","roles","editable","clientMember","resolve","user","FLAGS","MANAGE_ROLES","highest","comparePositionTo","sorted","_sortedRoles","values","indexOf","get","role","comparePositions","edit","reason","permissionsIn","channel","checkAdmin","channels","rolePermissions","setName","setColor","setHoist","setPermissions","setMentionable","setIcon","setUnicodeEmoji","setPosition","relative","updatedRoles","api","guilds","actions","GuildRolesPositionUpdate","handle","guild_id","iconURL","format","size","rest","cdn","RoleIcon","equals","bitfield","toJSON","role1","role2","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/Role.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst Base = require('./Base');\nconst { Error } = require('../errors');\nconst Permissions = require('../util/Permissions');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\nconst Util = require('../util/Util');\n\nlet deprecationEmittedForComparePositions = false;\n\n/**\n * @type {WeakSet<Role>}\n * @private\n * @internal\n */\nconst deletedRoles = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n\n/**\n * Represents a role on Discord.\n * @extends {Base}\n */\nclass Role extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The icon hash of the role\n     * @type {?string}\n     */\n    this.icon = null;\n\n    /**\n     * The unicode emoji for the role\n     * @type {?string}\n     */\n    this.unicodeEmoji = null;\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The role's id (unique to the guild it is part of)\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('name' in data) {\n      /**\n       * The name of the role\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('color' in data) {\n      /**\n       * The base 10 color of the role\n       * @type {number}\n       */\n      this.color = data.color;\n    }\n\n    if ('hoist' in data) {\n      /**\n       * If true, users that are part of this role will appear in a separate category in the users list\n       * @type {boolean}\n       */\n      this.hoist = data.hoist;\n    }\n\n    if ('position' in data) {\n      /**\n       * The raw position of the role from the API\n       * @type {number}\n       */\n      this.rawPosition = data.position;\n    }\n\n    if ('permissions' in data) {\n      /**\n       * The permissions of the role\n       * @type {Readonly<Permissions>}\n       */\n      this.permissions = new Permissions(BigInt(data.permissions)).freeze();\n    }\n\n    if ('managed' in data) {\n      /**\n       * Whether or not the role is managed by an external service\n       * @type {boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if ('mentionable' in data) {\n      /**\n       * Whether or not the role can be mentioned by anyone\n       * @type {boolean}\n       */\n      this.mentionable = data.mentionable;\n    }\n\n    if ('icon' in data) this.icon = data.icon;\n\n    if ('unicode_emoji' in data) this.unicodeEmoji = data.unicode_emoji;\n\n    /**\n     * The tags this role has\n     * @type {?Object}\n     * @property {Snowflake} [botId] The id of the bot this role belongs to\n     * @property {Snowflake|string} [integrationId] The id of the integration this role belongs to\n     * @property {true} [premiumSubscriberRole] Whether this is the guild's premium subscription role\n     */\n    this.tags = data.tags ? {} : null;\n    if (data.tags) {\n      if ('bot_id' in data.tags) {\n        this.tags.botId = data.tags.bot_id;\n      }\n      if ('integration_id' in data.tags) {\n        this.tags.integrationId = data.tags.integration_id;\n      }\n      if ('premium_subscriber' in data.tags) {\n        this.tags.premiumSubscriberRole = true;\n      }\n    }\n  }\n\n  /**\n   * The timestamp the role was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the role was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether or not the role has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Role#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    return deletedRoles.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Role#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    if (value) deletedRoles.add(this);\n    else deletedRoles.delete(this);\n  }\n\n  /**\n   * The hexadecimal version of the role color, with a leading hashtag\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    return `#${this.color.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * The cached guild members that have this role\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.guild.members.cache.filter(m => m.roles.cache.has(this.id));\n  }\n\n  /**\n   * Whether the role is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    if (this.managed) return false;\n    const clientMember = this.guild.members.resolve(this.client.user);\n    if (!clientMember.permissions.has(Permissions.FLAGS.MANAGE_ROLES)) return false;\n    return clientMember.roles.highest.comparePositionTo(this) > 0;\n  }\n\n  /**\n   * The position of the role in the role manager\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    const sorted = this.guild._sortedRoles();\n    return [...sorted.values()].indexOf(sorted.get(this.id));\n  }\n\n  /**\n   * Compares this role's position to another role's.\n   * @param {RoleResolvable} role Role to compare to this one\n   * @returns {number} Negative number if this role's position is lower (other role's is higher),\n   * positive number if this one is higher (other's is lower), 0 if equal\n   */\n  comparePositionTo(role) {\n    return this.guild.roles.comparePositions(this, role);\n  }\n\n  /**\n   * The data for a role.\n   * @typedef {Object} RoleData\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   * @property {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} [icon] The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @property {?string} [unicodeEmoji] The unicode emoji for the role\n   */\n\n  /**\n   * Edits the role.\n   * @param {RoleData} data The new data for the role\n   * @param {string} [reason] Reason for editing this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Edit a role\n   * role.edit({ name: 'new role' })\n   *   .then(updated => console.log(`Edited role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    return this.guild.roles.edit(this, data, reason);\n  }\n\n  /**\n   * Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\n   * taking into account permission overwrites.\n   * @param {GuildChannel|Snowflake} channel The guild channel to use as context\n   * @param {boolean} [checkAdmin=true] Whether having `ADMINISTRATOR` will return all permissions\n   * @returns {Readonly<Permissions>}\n   */\n  permissionsIn(channel, checkAdmin = true) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n    return channel.rolePermissions(this, checkAdmin);\n  }\n\n  /**\n   * Sets a new name for the role.\n   * @param {string} name The new name of the role\n   * @param {string} [reason] Reason for changing the role's name\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the name of the role\n   * role.setName('new role')\n   *   .then(updated => console.log(`Updated role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Sets a new color for the role.\n   * @param {ColorResolvable} color The color of the role\n   * @param {string} [reason] Reason for changing the role's color\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the color of a role\n   * role.setColor('#FF0000')\n   *   .then(updated => console.log(`Set color of role to ${updated.color}`))\n   *   .catch(console.error);\n   */\n  setColor(color, reason) {\n    return this.edit({ color }, reason);\n  }\n\n  /**\n   * Sets whether or not the role should be hoisted.\n   * @param {boolean} [hoist=true] Whether or not to hoist the role\n   * @param {string} [reason] Reason for setting whether or not the role should be hoisted\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the hoist of the role\n   * role.setHoist(true)\n   *   .then(updated => console.log(`Role hoisted: ${updated.hoist}`))\n   *   .catch(console.error);\n   */\n  setHoist(hoist = true, reason) {\n    return this.edit({ hoist }, reason);\n  }\n\n  /**\n   * Sets the permissions of the role.\n   * @param {PermissionResolvable} permissions The permissions of the role\n   * @param {string} [reason] Reason for changing the role's permissions\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the permissions of the role\n   * role.setPermissions([Permissions.FLAGS.KICK_MEMBERS, Permissions.FLAGS.BAN_MEMBERS])\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove all permissions from a role\n   * role.setPermissions(0n)\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   */\n  setPermissions(permissions, reason) {\n    return this.edit({ permissions }, reason);\n  }\n\n  /**\n   * Sets whether this role is mentionable.\n   * @param {boolean} [mentionable=true] Whether this role should be mentionable\n   * @param {string} [reason] Reason for setting whether or not this role should be mentionable\n   * @returns {Promise<Role>}\n   * @example\n   * // Make the role mentionable\n   * role.setMentionable(true)\n   *   .then(updated => console.log(`Role updated ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setMentionable(mentionable = true, reason) {\n    return this.edit({ mentionable }, reason);\n  }\n\n  /**\n   * Sets a new icon for the role.\n   * @param {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} icon The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @param {string} [reason] Reason for changing the role's icon\n   * @returns {Promise<Role>}\n   */\n  setIcon(icon, reason) {\n    return this.edit({ icon }, reason);\n  }\n\n  /**\n   * Sets a new unicode emoji for the role.\n   * @param {?string} unicodeEmoji The new unicode emoji for the role\n   * @param {string} [reason] Reason for changing the role's unicode emoji\n   * @returns {Promise<Role>}\n   * @example\n   * // Set a new unicode emoji for the role\n   * role.setUnicodeEmoji('🤖')\n   *   .then(updated => console.log(`Set unicode emoji for the role to ${updated.unicodeEmoji}`))\n   *   .catch(console.error);\n   */\n  setUnicodeEmoji(unicodeEmoji, reason) {\n    return this.edit({ unicodeEmoji }, reason);\n  }\n\n  /**\n   * Options used to set the position of a role.\n   * @typedef {Object} SetRolePositionOptions\n   * @property {boolean} [relative=false] Whether to change the position relative to its current value or not\n   * @property {string} [reason] The reason for changing the position\n   */\n\n  /**\n   * Sets the new position of the role.\n   * @param {number} position The new position for the role\n   * @param {SetRolePositionOptions} [options] Options for setting the position\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the position of the role\n   * role.setPosition(1)\n   *   .then(updated => console.log(`Role position: ${updated.position}`))\n   *   .catch(console.error);\n   */\n  async setPosition(position, { relative, reason } = {}) {\n    const updatedRoles = await Util.setPosition(\n      this,\n      position,\n      relative,\n      this.guild._sortedRoles(),\n      this.client.api.guilds(this.guild.id).roles,\n      reason,\n    );\n    this.client.actions.GuildRolesPositionUpdate.handle({\n      guild_id: this.guild.id,\n      roles: updatedRoles,\n    });\n    return this;\n  }\n\n  /**\n   * Deletes the role.\n   * @param {string} [reason] Reason for deleting this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Delete a role\n   * role.delete('The role needed to go')\n   *   .then(deleted => console.log(`Deleted role ${deleted.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.roles.delete(this.id, reason);\n    return this;\n  }\n\n  /**\n   * A link to the role's icon\n   * @param {StaticImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.RoleIcon(this.id, this.icon, format, size);\n  }\n\n  /**\n   * Whether this role equals another role. It compares all properties, so for most operations\n   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Role} role Role to compare with\n   * @returns {boolean}\n   */\n  equals(role) {\n    return (\n      role &&\n      this.id === role.id &&\n      this.name === role.name &&\n      this.color === role.color &&\n      this.hoist === role.hoist &&\n      this.position === role.position &&\n      this.permissions.bitfield === role.permissions.bitfield &&\n      this.managed === role.managed &&\n      this.icon === role.icon &&\n      this.unicodeEmoji === role.unicodeEmoji\n    );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the role's mention instead of the Role object.\n   * @returns {string}\n   * @example\n   * // Logs: Role: <@&123456789012345678>\n   * console.log(`Role: ${role}`);\n   */\n  toString() {\n    if (this.id === this.guild.id) return '@everyone';\n    return `<@&${this.id}>`;\n  }\n\n  toJSON() {\n    return {\n      ...super.toJSON({ createdTimestamp: true }),\n      permissions: this.permissions.toJSON(),\n    };\n  }\n\n  /**\n   * Compares the positions of two roles.\n   * @param {Role} role1 First role to compare\n   * @param {Role} role2 Second role to compare\n   * @returns {number} Negative number if the first role's position is lower (second role's is higher),\n   * positive number if the first's is higher (second's is lower), 0 if equal\n   * @deprecated Use {@link RoleManager#comparePositions} instead.\n   */\n  static comparePositions(role1, role2) {\n    if (!deprecationEmittedForComparePositions) {\n      process.emitWarning(\n        'The Role.comparePositions method is deprecated. Use RoleManager#comparePositions instead.',\n        'DeprecationWarning',\n      );\n\n      deprecationEmittedForComparePositions = true;\n    }\n\n    return role1.guild.roles.comparePositions(role1, role2);\n  }\n}\n\nexports.Role = Role;\nexports.deletedRoles = deletedRoles;\n\n/**\n * @external APIRole\n * @see {@link https://discord.com/developers/docs/topics/permissions#role-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}