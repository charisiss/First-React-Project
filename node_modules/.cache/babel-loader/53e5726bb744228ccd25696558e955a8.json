{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst AnonymousGuild = require('./AnonymousGuild');\n\nconst GuildAuditLogs = require('./GuildAuditLogs');\n\nconst GuildPreview = require('./GuildPreview');\n\nconst GuildTemplate = require('./GuildTemplate');\n\nconst Integration = require('./Integration');\n\nconst Webhook = require('./Webhook');\n\nconst WelcomeScreen = require('./WelcomeScreen');\n\nconst {\n  Error\n} = require('../errors');\n\nconst GuildApplicationCommandManager = require('../managers/GuildApplicationCommandManager');\n\nconst GuildBanManager = require('../managers/GuildBanManager');\n\nconst GuildChannelManager = require('../managers/GuildChannelManager');\n\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\n\nconst GuildInviteManager = require('../managers/GuildInviteManager');\n\nconst GuildMemberManager = require('../managers/GuildMemberManager');\n\nconst GuildScheduledEventManager = require('../managers/GuildScheduledEventManager');\n\nconst GuildStickerManager = require('../managers/GuildStickerManager');\n\nconst PresenceManager = require('../managers/PresenceManager');\n\nconst RoleManager = require('../managers/RoleManager');\n\nconst StageInstanceManager = require('../managers/StageInstanceManager');\n\nconst VoiceStateManager = require('../managers/VoiceStateManager');\n\nconst {\n  ChannelTypes,\n  DefaultMessageNotificationLevels,\n  PartialTypes,\n  VerificationLevels,\n  ExplicitContentFilterLevels,\n  Status,\n  MFALevels,\n  PremiumTiers\n} = require('../util/Constants');\n\nconst DataResolver = require('../util/DataResolver');\n\nconst SystemChannelFlags = require('../util/SystemChannelFlags');\n\nconst Util = require('../util/Util');\n\nlet deprecationEmittedForSetChannelPositions = false;\nlet deprecationEmittedForSetRolePositions = false;\nlet deprecationEmittedForDeleted = false;\n/**\n * @type {WeakSet<Guild>}\n * @private\n * @internal\n */\n\nconst deletedGuilds = new WeakSet();\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with {@link Guild#available}.</info>\n * @extends {AnonymousGuild}\n */\n\nclass Guild extends AnonymousGuild {\n  constructor(client, data) {\n    super(client, data, false);\n    /**\n     * A manager of the application commands belonging to this guild\n     * @type {GuildApplicationCommandManager}\n     */\n\n    this.commands = new GuildApplicationCommandManager(this);\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n\n    this.members = new GuildMemberManager(this);\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n\n    this.channels = new GuildChannelManager(this);\n    /**\n     * A manager of the bans belonging to this guild\n     * @type {GuildBanManager}\n     */\n\n    this.bans = new GuildBanManager(this);\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n\n    this.roles = new RoleManager(this);\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n\n    this.presences = new PresenceManager(this.client);\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n\n    this.voiceStates = new VoiceStateManager(this);\n    /**\n     * A manager of the stage instances of this guild\n     * @type {StageInstanceManager}\n     */\n\n    this.stageInstances = new StageInstanceManager(this);\n    /**\n     * A manager of the invites of this guild\n     * @type {GuildInviteManager}\n     */\n\n    this.invites = new GuildInviteManager(this);\n    /**\n     * A manager of the scheduled events of this guild\n     * @type {GuildScheduledEventManager}\n     */\n\n    this.scheduledEvents = new GuildScheduledEventManager(this);\n    if (!data) return;\n\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n    } else {\n      this._patch(data);\n\n      if (!data.channels) this.available = false;\n    }\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n\n\n    this.shardId = data.shardId;\n  }\n  /**\n   * Whether or not the structure has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n\n\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Guild#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    return deletedGuilds.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Guild#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    if (value) deletedGuilds.add(this);else deletedGuilds.delete(this);\n  }\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n\n\n  get shard() {\n    return this.client.ws.shards.get(this.shardId);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    this.id = data.id;\n    if ('name' in data) this.name = data.name;\n    if ('icon' in data) this.icon = data.icon;\n\n    if ('unavailable' in data) {\n      this.available = !data.unavailable;\n    } else {\n      this.available ??= true;\n    }\n\n    if ('discovery_splash' in data) {\n      /**\n       * The hash of the guild discovery splash image\n       * @type {?string}\n       */\n      this.discoverySplash = data.discovery_splash;\n    }\n\n    if ('member_count' in data) {\n      /**\n       * The full amount of members in this guild\n       * @type {number}\n       */\n      this.memberCount = data.member_count;\n    }\n\n    if ('large' in data) {\n      /**\n       * Whether the guild is \"large\" (has more than {@link WebsocketOptions large_threshold} members, 50 by default)\n       * @type {boolean}\n       */\n      this.large = Boolean(data.large);\n    }\n\n    if ('premium_progress_bar_enabled' in data) {\n      /**\n       * Whether this guild has its premium (boost) progress bar enabled\n       * @type {boolean}\n       */\n      this.premiumProgressBarEnabled = data.premium_progress_bar_enabled;\n    }\n    /**\n     * An array of enabled guild features, here are the possible values:\n     * * ANIMATED_ICON\n     * * BANNER\n     * * COMMERCE\n     * * COMMUNITY\n     * * DISCOVERABLE\n     * * FEATURABLE\n     * * INVITE_SPLASH\n     * * MEMBER_VERIFICATION_GATE_ENABLED\n     * * NEWS\n     * * PARTNERED\n     * * PREVIEW_ENABLED\n     * * VANITY_URL\n     * * VERIFIED\n     * * VIP_REGIONS\n     * * WELCOME_SCREEN_ENABLED\n     * * TICKETED_EVENTS_ENABLED\n     * * MONETIZATION_ENABLED\n     * * MORE_STICKERS\n     * * THREE_DAY_THREAD_ARCHIVE\n     * * SEVEN_DAY_THREAD_ARCHIVE\n     * * PRIVATE_THREADS\n     * * ROLE_ICONS\n     * @typedef {string} Features\n     * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-guild-features}\n     */\n\n\n    if ('application_id' in data) {\n      /**\n       * The id of the application that created this guild (if applicable)\n       * @type {?Snowflake}\n       */\n      this.applicationId = data.application_id;\n    }\n\n    if ('afk_timeout' in data) {\n      /**\n       * The time in seconds before a user is counted as \"away from keyboard\"\n       * @type {?number}\n       */\n      this.afkTimeout = data.afk_timeout;\n    }\n\n    if ('afk_channel_id' in data) {\n      /**\n       * The id of the voice channel where AFK members are moved\n       * @type {?Snowflake}\n       */\n      this.afkChannelId = data.afk_channel_id;\n    }\n\n    if ('system_channel_id' in data) {\n      /**\n       * The system channel's id\n       * @type {?Snowflake}\n       */\n      this.systemChannelId = data.system_channel_id;\n    }\n\n    if ('premium_tier' in data) {\n      /**\n       * The premium tier of this guild\n       * @type {PremiumTier}\n       */\n      this.premiumTier = PremiumTiers[data.premium_tier];\n    }\n\n    if ('premium_subscription_count' in data) {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    }\n\n    if ('widget_enabled' in data) {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    }\n\n    if ('widget_channel_id' in data) {\n      /**\n       * The widget channel's id, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelId = data.widget_channel_id;\n    }\n\n    if ('explicit_content_filter' in data) {\n      /**\n       * The explicit content filter level of the guild\n       * @type {ExplicitContentFilterLevel}\n       */\n      this.explicitContentFilter = ExplicitContentFilterLevels[data.explicit_content_filter];\n    }\n\n    if ('mfa_level' in data) {\n      /**\n       * The required MFA level for this guild\n       * @type {MFALevel}\n       */\n      this.mfaLevel = MFALevels[data.mfa_level];\n    }\n\n    if ('joined_at' in data) {\n      /**\n       * The timestamp the client user joined the guild at\n       * @type {number}\n       */\n      this.joinedTimestamp = new Date(data.joined_at).getTime();\n    }\n\n    if ('default_message_notifications' in data) {\n      /**\n       * The default message notification level of the guild\n       * @type {DefaultMessageNotificationLevel}\n       */\n      this.defaultMessageNotifications = DefaultMessageNotificationLevels[data.default_message_notifications];\n    }\n\n    if ('system_channel_flags' in data) {\n      /**\n       * The value set for the guild's system channel flags\n       * @type {Readonly<SystemChannelFlags>}\n       */\n      this.systemChannelFlags = new SystemChannelFlags(data.system_channel_flags).freeze();\n    }\n\n    if ('max_members' in data) {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else {\n      this.maximumMembers ??= null;\n    }\n\n    if ('max_presences' in data) {\n      /**\n       * The maximum amount of presences the guild can have\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences ?? 25_000;\n    } else {\n      this.maximumPresences ??= null;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else {\n      this.approximateMemberCount ??= null;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else {\n      this.approximatePresenceCount ??= null;\n    }\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n\n\n    this.vanityURLUses ??= null;\n\n    if ('rules_channel_id' in data) {\n      /**\n       * The rules channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.rulesChannelId = data.rules_channel_id;\n    }\n\n    if ('public_updates_channel_id' in data) {\n      /**\n       * The community updates channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.publicUpdatesChannelId = data.public_updates_channel_id;\n    }\n\n    if ('preferred_locale' in data) {\n      /**\n       * The preferred locale of the guild, defaults to `en-US`\n       * @type {string}\n       * @see {@link https://discord.com/developers/docs/dispatch/field-values#predefined-field-values-accepted-locales}\n       */\n      this.preferredLocale = data.preferred_locale;\n    }\n\n    if (data.channels) {\n      this.channels.cache.clear();\n\n      for (const rawChannel of data.channels) {\n        this.client.channels._add(rawChannel, this);\n      }\n    }\n\n    if (data.threads) {\n      for (const rawThread of data.threads) {\n        this.client.channels._add(rawThread, this);\n      }\n    }\n\n    if (data.roles) {\n      this.roles.cache.clear();\n\n      for (const role of data.roles) this.roles._add(role);\n    }\n\n    if (data.members) {\n      this.members.cache.clear();\n\n      for (const guildUser of data.members) this.members._add(guildUser);\n    }\n\n    if ('owner_id' in data) {\n      /**\n       * The user id of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerId = data.owner_id;\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences._add(Object.assign(presence, {\n          guild: this\n        }));\n      }\n    }\n\n    if (data.stage_instances) {\n      this.stageInstances.cache.clear();\n\n      for (const stageInstance of data.stage_instances) {\n        this.stageInstances._add(stageInstance);\n      }\n    }\n\n    if (data.guild_scheduled_events) {\n      this.scheduledEvents.cache.clear();\n\n      for (const scheduledEvent of data.guild_scheduled_events) {\n        this.scheduledEvents._add(scheduledEvent);\n      }\n    }\n\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n\n      for (const voiceState of data.voice_states) {\n        this.voiceStates._add(voiceState);\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis._add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis\n      });\n    }\n\n    if (!this.stickers) {\n      /**\n       * A manager of the stickers belonging to this guild\n       * @type {GuildStickerManager}\n       */\n      this.stickers = new GuildStickerManager(this);\n      if (data.stickers) for (const sticker of data.stickers) this.stickers._add(sticker);\n    } else if (data.stickers) {\n      this.client.actions.GuildStickersUpdate.handle({\n        guild_id: this.id,\n        stickers: data.stickers\n      });\n    }\n  }\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  discoverySplashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.discoverySplash && this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n  /**\n   * Fetches the owner of the guild.\n   * If the member object isn't needed, use {@link Guild#ownerId} instead.\n   * @param {BaseFetchOptions} [options] The options for fetching the member\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  fetchOwner(options) {\n    return this.members.fetch({ ...options,\n      user: this.ownerId\n    });\n  }\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n\n\n  get afkChannel() {\n    return this.client.channels.resolve(this.afkChannelId);\n  }\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n\n\n  get systemChannel() {\n    return this.client.channels.resolve(this.systemChannelId);\n  }\n  /**\n   * Widget channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n\n\n  get widgetChannel() {\n    return this.client.channels.resolve(this.widgetChannelId);\n  }\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n\n\n  get rulesChannel() {\n    return this.client.channels.resolve(this.rulesChannelId);\n  }\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n\n\n  get publicUpdatesChannel() {\n    return this.client.channels.resolve(this.publicUpdatesChannelId);\n  }\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n\n\n  get me() {\n    return this.members.resolve(this.client.user.id) ?? (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER) ? this.members._add({\n      user: {\n        id: this.client.user.id\n      }\n    }, true) : null);\n  }\n  /**\n   * The maximum bitrate available for this guild\n   * @type {number}\n   * @readonly\n   */\n\n\n  get maximumBitrate() {\n    if (this.features.includes('VIP_REGIONS')) {\n      return 384_000;\n    }\n\n    switch (PremiumTiers[this.premiumTier]) {\n      case PremiumTiers.TIER_1:\n        return 128_000;\n\n      case PremiumTiers.TIER_2:\n        return 256_000;\n\n      case PremiumTiers.TIER_3:\n        return 384_000;\n\n      default:\n        return 96_000;\n    }\n  }\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @returns {Promise<Collection<Snowflake|string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchIntegrations() {\n    const data = await this.client.api.guilds(this.id).integrations.get();\n    return data.reduce((collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)), new Collection());\n  }\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n\n\n  async fetchTemplates() {\n    const templates = await this.client.api.guilds(this.id).templates.get();\n    return templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection());\n  }\n  /**\n   * Fetches the welcome screen for this guild.\n   * @returns {Promise<WelcomeScreen>}\n   */\n\n\n  async fetchWelcomeScreen() {\n    const data = await this.client.api.guilds(this.id, 'welcome-screen').get();\n    return new WelcomeScreen(this, data);\n  }\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n\n\n  async createTemplate(name, description) {\n    const data = await this.client.api.guilds(this.id).templates.post({\n      data: {\n        name,\n        description\n      }\n    });\n    return new GuildTemplate(this.client, data);\n  }\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n\n\n  async fetchPreview() {\n    const data = await this.client.api.guilds(this.id).preview.get();\n    return new GuildPreview(this.client, data);\n  }\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity URL invite object to this guild.\n   * Resolves with an object containing the vanity URL invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n\n\n  async fetchVanityData() {\n    if (!this.features.includes('VANITY_URL')) {\n      throw new Error('VANITY_URL');\n    }\n\n    const data = await this.client.api.guilds(this.id, 'vanity-url').get();\n    this.vanityURLCode = data.code;\n    this.vanityURLUses = data.uses;\n    return data;\n  }\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchWebhooks() {\n    const apiHooks = await this.client.api.guilds(this.id).webhooks.get();\n    const hooks = new Collection();\n\n    for (const hook of apiHooks) hooks.set(hook.id, new Webhook(this.client, hook));\n\n    return hooks;\n  }\n  /**\n   * Fetches the guild widget data, requires the widget to be enabled.\n   * @returns {Promise<Widget>}\n   * @example\n   * // Fetches the guild widget data\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))\n   *   .catch(console.error);\n   */\n\n\n  fetchWidget() {\n    return this.client.fetchGuildWidget(this.id);\n  }\n  /**\n   * Data for the Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettings\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannel} channel The widget invite channel\n   */\n\n  /**\n   * The Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettingsData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannelResolvable} channel The widget invite channel\n   */\n\n  /**\n   * Fetches the guild widget settings.\n   * @returns {Promise<GuildWidgetSettings>}\n   * @example\n   * // Fetches the guild widget settings\n   * guild.fetchWidgetSettings()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchWidgetSettings() {\n    const data = await this.client.api.guilds(this.id).widget.get();\n    this.widgetEnabled = data.enabled;\n    this.widgetChannelId = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null\n    };\n  }\n  /**\n   * Options used to fetch audit logs.\n   * @typedef {Object} GuildAuditLogsFetchOptions\n   * @property {Snowflake|GuildAuditLogsEntry} [before] Only return entries before this entry\n   * @property {number} [limit] The number of entries to return\n   * @property {UserResolvable} [user] Only return entries for actions made by this user\n   * @property {AuditLogAction|number} [type] Only return entries for this action type\n   */\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {GuildAuditLogsFetchOptions} [options={}] Options for fetching audit logs\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n\n\n  async fetchAuditLogs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (options.before && options.before instanceof GuildAuditLogs.Entry) options.before = options.before.id;\n    if (typeof options.type === 'string') options.type = GuildAuditLogs.Actions[options.type];\n    const data = await this.client.api.guilds(this.id)['audit-logs'].get({\n      query: {\n        before: options.before,\n        limit: options.limit,\n        user_id: this.client.users.resolveId(options.user),\n        action_type: options.type\n      }\n    });\n    return GuildAuditLogs.build(this, data);\n  }\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {VerificationLevel|number} [verificationLevel] The verification level of the guild\n   * @property {ExplicitContentFilterLevel|number} [explicitContentFilter] The level of the explicit content filter\n   * @property {VoiceChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {TextChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [splash] The invite splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [discoverySplash] The discovery splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [banner] The banner of the guild\n   * @property {DefaultMessageNotificationLevel|number} [defaultMessageNotifications] The default message notification\n   * level of the guild\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {TextChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {TextChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {string} [preferredLocale] The preferred locale of the guild\n   * @property {boolean} [premiumProgressBarEnabled] Whether the guild's premium progress bar is enabled\n   * @property {string} [description] The discovery description of the guild\n   * @property {Features[]} [features] The features of the guild\n   */\n\n  /**\n   * Data that can be resolved to a Text Channel object. This can be:\n   * * A TextChannel\n   * * A Snowflake\n   * @typedef {TextChannel|Snowflake} TextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a Voice Channel object. This can be:\n   * * A VoiceChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|Snowflake} VoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @param {string} [reason] Reason for editing this guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name\n   * guild.edit({\n   *   name: 'Discord Guild',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated}`))\n   *   .catch(console.error);\n   */\n\n\n  async edit(data, reason) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n\n    if (typeof data.verificationLevel !== 'undefined') {\n      _data.verification_level = typeof data.verificationLevel === 'number' ? data.verificationLevel : VerificationLevels[data.verificationLevel];\n    }\n\n    if (typeof data.afkChannel !== 'undefined') {\n      _data.afk_channel_id = this.client.channels.resolveId(data.afkChannel);\n    }\n\n    if (typeof data.systemChannel !== 'undefined') {\n      _data.system_channel_id = this.client.channels.resolveId(data.systemChannel);\n    }\n\n    if (data.afkTimeout) _data.afk_timeout = Number(data.afkTimeout);\n    if (typeof data.icon !== 'undefined') _data.icon = await DataResolver.resolveImage(data.icon);\n    if (data.owner) _data.owner_id = this.client.users.resolveId(data.owner);\n    if (typeof data.splash !== 'undefined') _data.splash = await DataResolver.resolveImage(data.splash);\n\n    if (typeof data.discoverySplash !== 'undefined') {\n      _data.discovery_splash = await DataResolver.resolveImage(data.discoverySplash);\n    }\n\n    if (typeof data.banner !== 'undefined') _data.banner = await DataResolver.resolveImage(data.banner);\n\n    if (typeof data.explicitContentFilter !== 'undefined') {\n      _data.explicit_content_filter = typeof data.explicitContentFilter === 'number' ? data.explicitContentFilter : ExplicitContentFilterLevels[data.explicitContentFilter];\n    }\n\n    if (typeof data.defaultMessageNotifications !== 'undefined') {\n      _data.default_message_notifications = typeof data.defaultMessageNotifications === 'number' ? data.defaultMessageNotifications : DefaultMessageNotificationLevels[data.defaultMessageNotifications];\n    }\n\n    if (typeof data.systemChannelFlags !== 'undefined') {\n      _data.system_channel_flags = SystemChannelFlags.resolve(data.systemChannelFlags);\n    }\n\n    if (typeof data.rulesChannel !== 'undefined') {\n      _data.rules_channel_id = this.client.channels.resolveId(data.rulesChannel);\n    }\n\n    if (typeof data.publicUpdatesChannel !== 'undefined') {\n      _data.public_updates_channel_id = this.client.channels.resolveId(data.publicUpdatesChannel);\n    }\n\n    if (typeof data.features !== 'undefined') {\n      _data.features = data.features;\n    }\n\n    if (typeof data.description !== 'undefined') {\n      _data.description = data.description;\n    }\n\n    if (data.preferredLocale) _data.preferred_locale = data.preferredLocale;\n    if ('premiumProgressBarEnabled' in data) _data.premium_progress_bar_enabled = data.premiumProgressBarEnabled;\n    const newData = await this.client.api.guilds(this.id).patch({\n      data: _data,\n      reason\n    });\n    return this.client.actions.GuildUpdate.handle(newData).updated;\n  }\n  /**\n   * Welcome channel data\n   * @typedef {Object} WelcomeChannelData\n   * @property {string} description The description to show for this welcome channel\n   * @property {TextChannel|NewsChannel|StoreChannel|Snowflake} channel The channel to link for this welcome channel\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to display for this welcome channel\n   */\n\n  /**\n   * Welcome screen edit data\n   * @typedef {Object} WelcomeScreenEditData\n   * @property {boolean} [enabled] Whether the welcome screen is enabled\n   * @property {string} [description] The description for the welcome screen\n   * @property {WelcomeChannelData[]} [welcomeChannels] The welcome channel data for the welcome screen\n   */\n\n  /**\n   * Data that can be resolved to a GuildTextChannel object. This can be:\n   * * A TextChannel\n   * * A NewsChannel\n   * * A Snowflake\n   * @typedef {TextChannel|NewsChannel|Snowflake} GuildTextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a GuildVoiceChannel object. This can be:\n   * * A VoiceChannel\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|StageChannel|Snowflake} GuildVoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild's welcome screen\n   * @param {WelcomeScreenEditData} data Data to edit the welcome screen with\n   * @returns {Promise<WelcomeScreen>}\n   * @example\n   * guild.editWelcomeScreen({\n   *   description: 'Hello World',\n   *   enabled: true,\n   *   welcomeChannels: [\n   *     {\n   *       description: 'foobar',\n   *       channel: '222197033908436994',\n   *     }\n   *   ],\n   * })\n   */\n\n\n  async editWelcomeScreen(data) {\n    const {\n      enabled,\n      description,\n      welcomeChannels\n    } = data;\n    const welcome_channels = welcomeChannels?.map(welcomeChannelData => {\n      const emoji = this.emojis.resolve(welcomeChannelData.emoji);\n      return {\n        emoji_id: emoji?.id,\n        emoji_name: emoji?.name ?? welcomeChannelData.emoji,\n        channel_id: this.channels.resolveId(welcomeChannelData.channel),\n        description: welcomeChannelData.description\n      };\n    });\n    const patchData = await this.client.api.guilds(this.id, 'welcome-screen').patch({\n      data: {\n        welcome_channels,\n        description,\n        enabled\n      }\n    });\n    return new WelcomeScreen(this, patchData);\n  }\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {ExplicitContentFilterLevel|number} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n\n\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({\n      explicitContentFilter\n    }, reason);\n  }\n  /* eslint-disable max-len */\n\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {DefaultMessageNotificationLevel|number} defaultMessageNotifications The new default message notification level of the guild\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n\n\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({\n      defaultMessageNotifications\n    }, reason);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n\n\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({\n      systemChannelFlags\n    }, reason);\n  }\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setName(name, reason) {\n    return this.edit({\n      name\n    }, reason);\n  }\n  /**\n   * Edits the verification level of the guild.\n   * @param {VerificationLevel|number} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n\n\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({\n      verificationLevel\n    }, reason);\n  }\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {VoiceChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({\n      afkChannel\n    }, reason);\n  }\n  /**\n   * Edits the system channel of the guild.\n   * @param {TextChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({\n      systemChannel\n    }, reason);\n  }\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n\n\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({\n      afkTimeout\n    }, reason);\n  }\n  /**\n   * Sets a new guild icon.\n   * @param {?(Base64Resolvable|BufferResolvable)} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n\n\n  setIcon(icon, reason) {\n    return this.edit({\n      icon\n    }, reason);\n  }\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(guild => guild.fetchOwner())\n   *  .then(owner => console.log(`Updated the guild owner to ${owner.displayName}`))\n   *  .catch(console.error);\n   */\n\n\n  setOwner(owner, reason) {\n    return this.edit({\n      owner\n    }, reason);\n  }\n  /**\n   * Sets a new guild invite splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n\n\n  setSplash(splash, reason) {\n    return this.edit({\n      splash\n    }, reason);\n  }\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n\n\n  setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({\n      discoverySplash\n    }, reason);\n  }\n  /**\n   * Sets a new guild banner.\n   * @param {?(Base64Resolvable|BufferResolvable)} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n\n\n  setBanner(banner, reason) {\n    return this.edit({\n      banner\n    }, reason);\n  }\n  /**\n   * Edits the rules channel of the guild.\n   * @param {TextChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({\n      rulesChannel\n    }, reason);\n  }\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {TextChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({\n      publicUpdatesChannel\n    }, reason);\n  }\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {string} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n\n\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({\n      preferredLocale\n    }, reason);\n  }\n  /**\n   * Edits the enabled state of the guild's premium progress bar\n   * @param {boolean} [enabled=true] The new enabled state of the guild's premium progress bar\n   * @param {string} [reason] Reason for changing the state of the guild's premium progress bar\n   * @returns {Promise<Guild>}\n   */\n\n\n  setPremiumProgressBarEnabled() {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let reason = arguments.length > 1 ? arguments[1] : undefined;\n    return this.edit({\n      premiumProgressBarEnabled: enabled\n    }, reason);\n  }\n  /**\n   * Data that can be resolved to give a Category Channel object. This can be:\n   * * A CategoryChannel object\n   * * A Snowflake\n   * @typedef {CategoryChannel|Snowflake} CategoryChannelResolvable\n   */\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {GuildChannel|Snowflake} channel Channel to update\n   * @property {number} [position] New position for the channel\n   * @property {CategoryChannelResolvable} [parent] Parent channel for this channel\n   * @property {boolean} [lockPermissions] If the overwrites should be locked to the parents overwrites\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * <info>Only one channel's parent can be changed at a time</info>\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @deprecated Use {@link GuildChannelManager#setPositions} instead\n   * @example\n   * guild.setChannelPositions([{ channel: channelId, position: newChannelIndex }])\n   *   .then(guild => console.log(`Updated channel positions for ${guild}`))\n   *   .catch(console.error);\n   */\n\n\n  setChannelPositions(channelPositions) {\n    if (!deprecationEmittedForSetChannelPositions) {\n      process.emitWarning('The Guild#setChannelPositions method is deprecated. Use GuildChannelManager#setPositions instead.', 'DeprecationWarning');\n      deprecationEmittedForSetChannelPositions = true;\n    }\n\n    return this.channels.setPositions(channelPositions);\n  }\n  /**\n   * The data needed for updating a guild role's position\n   * @typedef {Object} GuildRolePosition\n   * @property {RoleResolvable} role The role's id\n   * @property {number} position The position to update\n   */\n\n  /**\n   * Batch-updates the guild's role positions\n   * @param {GuildRolePosition[]} rolePositions Role positions to update\n   * @returns {Promise<Guild>}\n   * @deprecated Use {@link RoleManager#setPositions} instead\n   * @example\n   * guild.setRolePositions([{ role: roleId, position: updatedRoleIndex }])\n   *  .then(guild => console.log(`Role positions updated for ${guild}`))\n   *  .catch(console.error);\n   */\n\n\n  setRolePositions(rolePositions) {\n    if (!deprecationEmittedForSetRolePositions) {\n      process.emitWarning('The Guild#setRolePositions method is deprecated. Use RoleManager#setPositions instead.', 'DeprecationWarning');\n      deprecationEmittedForSetRolePositions = true;\n    }\n\n    return this.roles.setPositions(rolePositions);\n  }\n  /**\n   * Edits the guild's widget settings.\n   * @param {GuildWidgetSettingsData} settings The widget settings for the guild\n   * @param {string} [reason] Reason for changing the guild's widget settings\n   * @returns {Promise<Guild>}\n   */\n\n\n  async setWidgetSettings(settings, reason) {\n    await this.client.api.guilds(this.id).widget.patch({\n      data: {\n        enabled: settings.enabled,\n        channel_id: this.channels.resolveId(settings.channel)\n      },\n      reason\n    });\n    return this;\n  }\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(g => console.log(`Left the guild ${g}`))\n   *   .catch(console.error);\n   */\n\n\n  async leave() {\n    if (this.ownerId === this.client.user.id) throw new Error('GUILD_OWNED');\n    await this.client.api.users('@me').guilds(this.id).delete();\n    return this.client.actions.GuildDelete.handle({\n      id: this.id\n    }).guild;\n  }\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n\n\n  async delete() {\n    await this.client.api.guilds(this.id).delete();\n    return this.client.actions.GuildDelete.handle({\n      id: this.id\n    }).guild;\n  }\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(guild) {\n    return guild && guild instanceof this.constructor && this.id === guild.id && this.available === guild.available && this.splash === guild.splash && this.discoverySplash === guild.discoverySplash && this.name === guild.name && this.memberCount === guild.memberCount && this.large === guild.large && this.icon === guild.icon && this.ownerId === guild.ownerId && this.verificationLevel === guild.verificationLevel && (this.features === guild.features || this.features.length === guild.features.length && this.features.every((feat, i) => feat === guild.features[i]));\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n  /**\n   * The voice state adapter for this guild that can be used with @discordjs/voice to play audio in voice\n   * and stage channels.\n   * @type {Function}\n   * @readonly\n   */\n\n\n  get voiceAdapterCreator() {\n    return methods => {\n      this.client.voice.adapters.set(this.id, methods);\n      return {\n        sendPayload: data => {\n          if (this.shard.status !== Status.READY) return false;\n          this.shard.send(data);\n          return true;\n        },\n        destroy: () => {\n          this.client.voice.adapters.delete(this.id);\n        }\n      };\n    };\n  }\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and ids.\n   * @returns {Collection<Snowflake, Role>}\n   * @private\n   */\n\n\n  _sortedRoles() {\n    return Util.discordSort(this.roles.cache);\n  }\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<Snowflake, GuildChannel>}\n   * @private\n   */\n\n\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelTypes.GUILD_CATEGORY;\n    return Util.discordSort(this.channels.cache.filter(c => (['GUILD_TEXT', 'GUILD_NEWS', 'GUILD_STORE'].includes(channel.type) ? ['GUILD_TEXT', 'GUILD_NEWS', 'GUILD_STORE'].includes(c.type) : c.type === channel.type) && (category || c.parent === channel.parent)));\n  }\n\n}\n\nexports.Guild = Guild;\nexports.deletedGuilds = deletedGuilds;\n/**\n * @external APIGuild\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object}\n */","map":{"version":3,"names":["process","require","Collection","AnonymousGuild","GuildAuditLogs","GuildPreview","GuildTemplate","Integration","Webhook","WelcomeScreen","Error","GuildApplicationCommandManager","GuildBanManager","GuildChannelManager","GuildEmojiManager","GuildInviteManager","GuildMemberManager","GuildScheduledEventManager","GuildStickerManager","PresenceManager","RoleManager","StageInstanceManager","VoiceStateManager","ChannelTypes","DefaultMessageNotificationLevels","PartialTypes","VerificationLevels","ExplicitContentFilterLevels","Status","MFALevels","PremiumTiers","DataResolver","SystemChannelFlags","Util","deprecationEmittedForSetChannelPositions","deprecationEmittedForSetRolePositions","deprecationEmittedForDeleted","deletedGuilds","WeakSet","Guild","constructor","client","data","commands","members","channels","bans","roles","presences","voiceStates","stageInstances","invites","scheduledEvents","unavailable","available","_patch","shardId","deleted","emitWarning","has","value","add","delete","shard","ws","shards","get","id","name","icon","discoverySplash","discovery_splash","memberCount","member_count","large","Boolean","premiumProgressBarEnabled","premium_progress_bar_enabled","applicationId","application_id","afkTimeout","afk_timeout","afkChannelId","afk_channel_id","systemChannelId","system_channel_id","premiumTier","premium_tier","premiumSubscriptionCount","premium_subscription_count","widgetEnabled","widget_enabled","widgetChannelId","widget_channel_id","explicitContentFilter","explicit_content_filter","mfaLevel","mfa_level","joinedTimestamp","Date","joined_at","getTime","defaultMessageNotifications","default_message_notifications","systemChannelFlags","system_channel_flags","freeze","maximumMembers","max_members","maximumPresences","max_presences","approximateMemberCount","approximate_member_count","approximatePresenceCount","approximate_presence_count","vanityURLUses","rulesChannelId","rules_channel_id","publicUpdatesChannelId","public_updates_channel_id","preferredLocale","preferred_locale","cache","clear","rawChannel","_add","threads","rawThread","role","guildUser","ownerId","owner_id","presence","Object","assign","guild","stage_instances","stageInstance","guild_scheduled_events","scheduledEvent","voice_states","voiceState","emojis","emoji","actions","GuildEmojisUpdate","handle","guild_id","stickers","sticker","GuildStickersUpdate","joinedAt","discoverySplashURL","format","size","rest","cdn","DiscoverySplash","fetchOwner","options","fetch","user","afkChannel","resolve","systemChannel","widgetChannel","rulesChannel","publicUpdatesChannel","me","partials","includes","GUILD_MEMBER","maximumBitrate","features","TIER_1","TIER_2","TIER_3","fetchIntegrations","api","guilds","integrations","reduce","collection","integration","set","fetchTemplates","templates","col","code","fetchWelcomeScreen","createTemplate","description","post","fetchPreview","preview","fetchVanityData","vanityURLCode","uses","fetchWebhooks","apiHooks","webhooks","hooks","hook","fetchWidget","fetchGuildWidget","fetchWidgetSettings","widget","enabled","channel_id","channel","fetchAuditLogs","before","Entry","type","Actions","query","limit","user_id","users","resolveId","action_type","build","edit","reason","_data","verificationLevel","verification_level","Number","resolveImage","owner","splash","banner","newData","patch","GuildUpdate","updated","editWelcomeScreen","welcomeChannels","welcome_channels","map","welcomeChannelData","emoji_id","emoji_name","patchData","setExplicitContentFilter","setDefaultMessageNotifications","setSystemChannelFlags","setName","setVerificationLevel","setAFKChannel","setSystemChannel","setAFKTimeout","setIcon","setOwner","setSplash","setDiscoverySplash","setBanner","setRulesChannel","setPublicUpdatesChannel","setPreferredLocale","setPremiumProgressBarEnabled","setChannelPositions","channelPositions","setPositions","setRolePositions","rolePositions","setWidgetSettings","settings","leave","GuildDelete","equals","length","every","feat","i","toJSON","json","createdTimestamp","nameAcronym","iconURL","splashURL","bannerURL","voiceAdapterCreator","methods","voice","adapters","sendPayload","status","READY","send","destroy","_sortedRoles","discordSort","_sortedChannels","category","GUILD_CATEGORY","filter","c","parent","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/Guild.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst AnonymousGuild = require('./AnonymousGuild');\nconst GuildAuditLogs = require('./GuildAuditLogs');\nconst GuildPreview = require('./GuildPreview');\nconst GuildTemplate = require('./GuildTemplate');\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst WelcomeScreen = require('./WelcomeScreen');\nconst { Error } = require('../errors');\nconst GuildApplicationCommandManager = require('../managers/GuildApplicationCommandManager');\nconst GuildBanManager = require('../managers/GuildBanManager');\nconst GuildChannelManager = require('../managers/GuildChannelManager');\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\nconst GuildInviteManager = require('../managers/GuildInviteManager');\nconst GuildMemberManager = require('../managers/GuildMemberManager');\nconst GuildScheduledEventManager = require('../managers/GuildScheduledEventManager');\nconst GuildStickerManager = require('../managers/GuildStickerManager');\nconst PresenceManager = require('../managers/PresenceManager');\nconst RoleManager = require('../managers/RoleManager');\nconst StageInstanceManager = require('../managers/StageInstanceManager');\nconst VoiceStateManager = require('../managers/VoiceStateManager');\nconst {\n  ChannelTypes,\n  DefaultMessageNotificationLevels,\n  PartialTypes,\n  VerificationLevels,\n  ExplicitContentFilterLevels,\n  Status,\n  MFALevels,\n  PremiumTiers,\n} = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\nconst SystemChannelFlags = require('../util/SystemChannelFlags');\nconst Util = require('../util/Util');\n\nlet deprecationEmittedForSetChannelPositions = false;\nlet deprecationEmittedForSetRolePositions = false;\nlet deprecationEmittedForDeleted = false;\n\n/**\n * @type {WeakSet<Guild>}\n * @private\n * @internal\n */\nconst deletedGuilds = new WeakSet();\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with {@link Guild#available}.</info>\n * @extends {AnonymousGuild}\n */\nclass Guild extends AnonymousGuild {\n  constructor(client, data) {\n    super(client, data, false);\n\n    /**\n     * A manager of the application commands belonging to this guild\n     * @type {GuildApplicationCommandManager}\n     */\n    this.commands = new GuildApplicationCommandManager(this);\n\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n    this.members = new GuildMemberManager(this);\n\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n    this.channels = new GuildChannelManager(this);\n\n    /**\n     * A manager of the bans belonging to this guild\n     * @type {GuildBanManager}\n     */\n    this.bans = new GuildBanManager(this);\n\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n    this.roles = new RoleManager(this);\n\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n    this.presences = new PresenceManager(this.client);\n\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n    this.voiceStates = new VoiceStateManager(this);\n\n    /**\n     * A manager of the stage instances of this guild\n     * @type {StageInstanceManager}\n     */\n    this.stageInstances = new StageInstanceManager(this);\n\n    /**\n     * A manager of the invites of this guild\n     * @type {GuildInviteManager}\n     */\n    this.invites = new GuildInviteManager(this);\n\n    /**\n     * A manager of the scheduled events of this guild\n     * @type {GuildScheduledEventManager}\n     */\n    this.scheduledEvents = new GuildScheduledEventManager(this);\n\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n    } else {\n      this._patch(data);\n      if (!data.channels) this.available = false;\n    }\n\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n    this.shardId = data.shardId;\n  }\n\n  /**\n   * Whether or not the structure has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Guild#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    return deletedGuilds.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Guild#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    if (value) deletedGuilds.add(this);\n    else deletedGuilds.delete(this);\n  }\n\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n  get shard() {\n    return this.client.ws.shards.get(this.shardId);\n  }\n\n  _patch(data) {\n    super._patch(data);\n    this.id = data.id;\n    if ('name' in data) this.name = data.name;\n    if ('icon' in data) this.icon = data.icon;\n    if ('unavailable' in data) {\n      this.available = !data.unavailable;\n    } else {\n      this.available ??= true;\n    }\n\n    if ('discovery_splash' in data) {\n      /**\n       * The hash of the guild discovery splash image\n       * @type {?string}\n       */\n      this.discoverySplash = data.discovery_splash;\n    }\n\n    if ('member_count' in data) {\n      /**\n       * The full amount of members in this guild\n       * @type {number}\n       */\n      this.memberCount = data.member_count;\n    }\n\n    if ('large' in data) {\n      /**\n       * Whether the guild is \"large\" (has more than {@link WebsocketOptions large_threshold} members, 50 by default)\n       * @type {boolean}\n       */\n      this.large = Boolean(data.large);\n    }\n\n    if ('premium_progress_bar_enabled' in data) {\n      /**\n       * Whether this guild has its premium (boost) progress bar enabled\n       * @type {boolean}\n       */\n      this.premiumProgressBarEnabled = data.premium_progress_bar_enabled;\n    }\n\n    /**\n     * An array of enabled guild features, here are the possible values:\n     * * ANIMATED_ICON\n     * * BANNER\n     * * COMMERCE\n     * * COMMUNITY\n     * * DISCOVERABLE\n     * * FEATURABLE\n     * * INVITE_SPLASH\n     * * MEMBER_VERIFICATION_GATE_ENABLED\n     * * NEWS\n     * * PARTNERED\n     * * PREVIEW_ENABLED\n     * * VANITY_URL\n     * * VERIFIED\n     * * VIP_REGIONS\n     * * WELCOME_SCREEN_ENABLED\n     * * TICKETED_EVENTS_ENABLED\n     * * MONETIZATION_ENABLED\n     * * MORE_STICKERS\n     * * THREE_DAY_THREAD_ARCHIVE\n     * * SEVEN_DAY_THREAD_ARCHIVE\n     * * PRIVATE_THREADS\n     * * ROLE_ICONS\n     * @typedef {string} Features\n     * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-guild-features}\n     */\n\n    if ('application_id' in data) {\n      /**\n       * The id of the application that created this guild (if applicable)\n       * @type {?Snowflake}\n       */\n      this.applicationId = data.application_id;\n    }\n\n    if ('afk_timeout' in data) {\n      /**\n       * The time in seconds before a user is counted as \"away from keyboard\"\n       * @type {?number}\n       */\n      this.afkTimeout = data.afk_timeout;\n    }\n\n    if ('afk_channel_id' in data) {\n      /**\n       * The id of the voice channel where AFK members are moved\n       * @type {?Snowflake}\n       */\n      this.afkChannelId = data.afk_channel_id;\n    }\n\n    if ('system_channel_id' in data) {\n      /**\n       * The system channel's id\n       * @type {?Snowflake}\n       */\n      this.systemChannelId = data.system_channel_id;\n    }\n\n    if ('premium_tier' in data) {\n      /**\n       * The premium tier of this guild\n       * @type {PremiumTier}\n       */\n      this.premiumTier = PremiumTiers[data.premium_tier];\n    }\n\n    if ('premium_subscription_count' in data) {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    }\n\n    if ('widget_enabled' in data) {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    }\n\n    if ('widget_channel_id' in data) {\n      /**\n       * The widget channel's id, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelId = data.widget_channel_id;\n    }\n\n    if ('explicit_content_filter' in data) {\n      /**\n       * The explicit content filter level of the guild\n       * @type {ExplicitContentFilterLevel}\n       */\n      this.explicitContentFilter = ExplicitContentFilterLevels[data.explicit_content_filter];\n    }\n\n    if ('mfa_level' in data) {\n      /**\n       * The required MFA level for this guild\n       * @type {MFALevel}\n       */\n      this.mfaLevel = MFALevels[data.mfa_level];\n    }\n\n    if ('joined_at' in data) {\n      /**\n       * The timestamp the client user joined the guild at\n       * @type {number}\n       */\n      this.joinedTimestamp = new Date(data.joined_at).getTime();\n    }\n\n    if ('default_message_notifications' in data) {\n      /**\n       * The default message notification level of the guild\n       * @type {DefaultMessageNotificationLevel}\n       */\n      this.defaultMessageNotifications = DefaultMessageNotificationLevels[data.default_message_notifications];\n    }\n\n    if ('system_channel_flags' in data) {\n      /**\n       * The value set for the guild's system channel flags\n       * @type {Readonly<SystemChannelFlags>}\n       */\n      this.systemChannelFlags = new SystemChannelFlags(data.system_channel_flags).freeze();\n    }\n\n    if ('max_members' in data) {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else {\n      this.maximumMembers ??= null;\n    }\n\n    if ('max_presences' in data) {\n      /**\n       * The maximum amount of presences the guild can have\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences ?? 25_000;\n    } else {\n      this.maximumPresences ??= null;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else {\n      this.approximateMemberCount ??= null;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else {\n      this.approximatePresenceCount ??= null;\n    }\n\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n    this.vanityURLUses ??= null;\n\n    if ('rules_channel_id' in data) {\n      /**\n       * The rules channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.rulesChannelId = data.rules_channel_id;\n    }\n\n    if ('public_updates_channel_id' in data) {\n      /**\n       * The community updates channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.publicUpdatesChannelId = data.public_updates_channel_id;\n    }\n\n    if ('preferred_locale' in data) {\n      /**\n       * The preferred locale of the guild, defaults to `en-US`\n       * @type {string}\n       * @see {@link https://discord.com/developers/docs/dispatch/field-values#predefined-field-values-accepted-locales}\n       */\n      this.preferredLocale = data.preferred_locale;\n    }\n\n    if (data.channels) {\n      this.channels.cache.clear();\n      for (const rawChannel of data.channels) {\n        this.client.channels._add(rawChannel, this);\n      }\n    }\n\n    if (data.threads) {\n      for (const rawThread of data.threads) {\n        this.client.channels._add(rawThread, this);\n      }\n    }\n\n    if (data.roles) {\n      this.roles.cache.clear();\n      for (const role of data.roles) this.roles._add(role);\n    }\n\n    if (data.members) {\n      this.members.cache.clear();\n      for (const guildUser of data.members) this.members._add(guildUser);\n    }\n\n    if ('owner_id' in data) {\n      /**\n       * The user id of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerId = data.owner_id;\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences._add(Object.assign(presence, { guild: this }));\n      }\n    }\n\n    if (data.stage_instances) {\n      this.stageInstances.cache.clear();\n      for (const stageInstance of data.stage_instances) {\n        this.stageInstances._add(stageInstance);\n      }\n    }\n\n    if (data.guild_scheduled_events) {\n      this.scheduledEvents.cache.clear();\n      for (const scheduledEvent of data.guild_scheduled_events) {\n        this.scheduledEvents._add(scheduledEvent);\n      }\n    }\n\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n      for (const voiceState of data.voice_states) {\n        this.voiceStates._add(voiceState);\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis._add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis,\n      });\n    }\n\n    if (!this.stickers) {\n      /**\n       * A manager of the stickers belonging to this guild\n       * @type {GuildStickerManager}\n       */\n      this.stickers = new GuildStickerManager(this);\n      if (data.stickers) for (const sticker of data.stickers) this.stickers._add(sticker);\n    } else if (data.stickers) {\n      this.client.actions.GuildStickersUpdate.handle({\n        guild_id: this.id,\n        stickers: data.stickers,\n      });\n    }\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL({ format, size } = {}) {\n    return this.discoverySplash && this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * Fetches the owner of the guild.\n   * If the member object isn't needed, use {@link Guild#ownerId} instead.\n   * @param {BaseFetchOptions} [options] The options for fetching the member\n   * @returns {Promise<GuildMember>}\n   */\n  fetchOwner(options) {\n    return this.members.fetch({ ...options, user: this.ownerId });\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.resolve(this.afkChannelId);\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.resolve(this.systemChannelId);\n  }\n\n  /**\n   * Widget channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get widgetChannel() {\n    return this.client.channels.resolve(this.widgetChannelId);\n  }\n\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get rulesChannel() {\n    return this.client.channels.resolve(this.rulesChannelId);\n  }\n\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get publicUpdatesChannel() {\n    return this.client.channels.resolve(this.publicUpdatesChannelId);\n  }\n\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get me() {\n    return (\n      this.members.resolve(this.client.user.id) ??\n      (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER)\n        ? this.members._add({ user: { id: this.client.user.id } }, true)\n        : null)\n    );\n  }\n\n  /**\n   * The maximum bitrate available for this guild\n   * @type {number}\n   * @readonly\n   */\n  get maximumBitrate() {\n    if (this.features.includes('VIP_REGIONS')) {\n      return 384_000;\n    }\n\n    switch (PremiumTiers[this.premiumTier]) {\n      case PremiumTiers.TIER_1:\n        return 128_000;\n      case PremiumTiers.TIER_2:\n        return 256_000;\n      case PremiumTiers.TIER_3:\n        return 384_000;\n      default:\n        return 96_000;\n    }\n  }\n\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @returns {Promise<Collection<Snowflake|string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n  async fetchIntegrations() {\n    const data = await this.client.api.guilds(this.id).integrations.get();\n    return data.reduce(\n      (collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n  async fetchTemplates() {\n    const templates = await this.client.api.guilds(this.id).templates.get();\n    return templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection());\n  }\n\n  /**\n   * Fetches the welcome screen for this guild.\n   * @returns {Promise<WelcomeScreen>}\n   */\n  async fetchWelcomeScreen() {\n    const data = await this.client.api.guilds(this.id, 'welcome-screen').get();\n    return new WelcomeScreen(this, data);\n  }\n\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async createTemplate(name, description) {\n    const data = await this.client.api.guilds(this.id).templates.post({ data: { name, description } });\n    return new GuildTemplate(this.client, data);\n  }\n\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchPreview() {\n    const data = await this.client.api.guilds(this.id).preview.get();\n    return new GuildPreview(this.client, data);\n  }\n\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity URL invite object to this guild.\n   * Resolves with an object containing the vanity URL invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n  async fetchVanityData() {\n    if (!this.features.includes('VANITY_URL')) {\n      throw new Error('VANITY_URL');\n    }\n    const data = await this.client.api.guilds(this.id, 'vanity-url').get();\n    this.vanityURLCode = data.code;\n    this.vanityURLUses = data.uses;\n\n    return data;\n  }\n\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  async fetchWebhooks() {\n    const apiHooks = await this.client.api.guilds(this.id).webhooks.get();\n    const hooks = new Collection();\n    for (const hook of apiHooks) hooks.set(hook.id, new Webhook(this.client, hook));\n    return hooks;\n  }\n\n  /**\n   * Fetches the guild widget data, requires the widget to be enabled.\n   * @returns {Promise<Widget>}\n   * @example\n   * // Fetches the guild widget data\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))\n   *   .catch(console.error);\n   */\n  fetchWidget() {\n    return this.client.fetchGuildWidget(this.id);\n  }\n\n  /**\n   * Data for the Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettings\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannel} channel The widget invite channel\n   */\n\n  /**\n   * The Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettingsData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannelResolvable} channel The widget invite channel\n   */\n\n  /**\n   * Fetches the guild widget settings.\n   * @returns {Promise<GuildWidgetSettings>}\n   * @example\n   * // Fetches the guild widget settings\n   * guild.fetchWidgetSettings()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  async fetchWidgetSettings() {\n    const data = await this.client.api.guilds(this.id).widget.get();\n    this.widgetEnabled = data.enabled;\n    this.widgetChannelId = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null,\n    };\n  }\n\n  /**\n   * Options used to fetch audit logs.\n   * @typedef {Object} GuildAuditLogsFetchOptions\n   * @property {Snowflake|GuildAuditLogsEntry} [before] Only return entries before this entry\n   * @property {number} [limit] The number of entries to return\n   * @property {UserResolvable} [user] Only return entries for actions made by this user\n   * @property {AuditLogAction|number} [type] Only return entries for this action type\n   */\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {GuildAuditLogsFetchOptions} [options={}] Options for fetching audit logs\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  async fetchAuditLogs(options = {}) {\n    if (options.before && options.before instanceof GuildAuditLogs.Entry) options.before = options.before.id;\n    if (typeof options.type === 'string') options.type = GuildAuditLogs.Actions[options.type];\n\n    const data = await this.client.api.guilds(this.id)['audit-logs'].get({\n      query: {\n        before: options.before,\n        limit: options.limit,\n        user_id: this.client.users.resolveId(options.user),\n        action_type: options.type,\n      },\n    });\n    return GuildAuditLogs.build(this, data);\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {VerificationLevel|number} [verificationLevel] The verification level of the guild\n   * @property {ExplicitContentFilterLevel|number} [explicitContentFilter] The level of the explicit content filter\n   * @property {VoiceChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {TextChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [splash] The invite splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [discoverySplash] The discovery splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [banner] The banner of the guild\n   * @property {DefaultMessageNotificationLevel|number} [defaultMessageNotifications] The default message notification\n   * level of the guild\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {TextChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {TextChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {string} [preferredLocale] The preferred locale of the guild\n   * @property {boolean} [premiumProgressBarEnabled] Whether the guild's premium progress bar is enabled\n   * @property {string} [description] The discovery description of the guild\n   * @property {Features[]} [features] The features of the guild\n   */\n\n  /**\n   * Data that can be resolved to a Text Channel object. This can be:\n   * * A TextChannel\n   * * A Snowflake\n   * @typedef {TextChannel|Snowflake} TextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a Voice Channel object. This can be:\n   * * A VoiceChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|Snowflake} VoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @param {string} [reason] Reason for editing this guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name\n   * guild.edit({\n   *   name: 'Discord Guild',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated}`))\n   *   .catch(console.error);\n   */\n  async edit(data, reason) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n    if (typeof data.verificationLevel !== 'undefined') {\n      _data.verification_level =\n        typeof data.verificationLevel === 'number'\n          ? data.verificationLevel\n          : VerificationLevels[data.verificationLevel];\n    }\n    if (typeof data.afkChannel !== 'undefined') {\n      _data.afk_channel_id = this.client.channels.resolveId(data.afkChannel);\n    }\n    if (typeof data.systemChannel !== 'undefined') {\n      _data.system_channel_id = this.client.channels.resolveId(data.systemChannel);\n    }\n    if (data.afkTimeout) _data.afk_timeout = Number(data.afkTimeout);\n    if (typeof data.icon !== 'undefined') _data.icon = await DataResolver.resolveImage(data.icon);\n    if (data.owner) _data.owner_id = this.client.users.resolveId(data.owner);\n    if (typeof data.splash !== 'undefined') _data.splash = await DataResolver.resolveImage(data.splash);\n    if (typeof data.discoverySplash !== 'undefined') {\n      _data.discovery_splash = await DataResolver.resolveImage(data.discoverySplash);\n    }\n    if (typeof data.banner !== 'undefined') _data.banner = await DataResolver.resolveImage(data.banner);\n    if (typeof data.explicitContentFilter !== 'undefined') {\n      _data.explicit_content_filter =\n        typeof data.explicitContentFilter === 'number'\n          ? data.explicitContentFilter\n          : ExplicitContentFilterLevels[data.explicitContentFilter];\n    }\n    if (typeof data.defaultMessageNotifications !== 'undefined') {\n      _data.default_message_notifications =\n        typeof data.defaultMessageNotifications === 'number'\n          ? data.defaultMessageNotifications\n          : DefaultMessageNotificationLevels[data.defaultMessageNotifications];\n    }\n    if (typeof data.systemChannelFlags !== 'undefined') {\n      _data.system_channel_flags = SystemChannelFlags.resolve(data.systemChannelFlags);\n    }\n    if (typeof data.rulesChannel !== 'undefined') {\n      _data.rules_channel_id = this.client.channels.resolveId(data.rulesChannel);\n    }\n    if (typeof data.publicUpdatesChannel !== 'undefined') {\n      _data.public_updates_channel_id = this.client.channels.resolveId(data.publicUpdatesChannel);\n    }\n    if (typeof data.features !== 'undefined') {\n      _data.features = data.features;\n    }\n    if (typeof data.description !== 'undefined') {\n      _data.description = data.description;\n    }\n    if (data.preferredLocale) _data.preferred_locale = data.preferredLocale;\n    if ('premiumProgressBarEnabled' in data) _data.premium_progress_bar_enabled = data.premiumProgressBarEnabled;\n    const newData = await this.client.api.guilds(this.id).patch({ data: _data, reason });\n    return this.client.actions.GuildUpdate.handle(newData).updated;\n  }\n\n  /**\n   * Welcome channel data\n   * @typedef {Object} WelcomeChannelData\n   * @property {string} description The description to show for this welcome channel\n   * @property {TextChannel|NewsChannel|StoreChannel|Snowflake} channel The channel to link for this welcome channel\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to display for this welcome channel\n   */\n\n  /**\n   * Welcome screen edit data\n   * @typedef {Object} WelcomeScreenEditData\n   * @property {boolean} [enabled] Whether the welcome screen is enabled\n   * @property {string} [description] The description for the welcome screen\n   * @property {WelcomeChannelData[]} [welcomeChannels] The welcome channel data for the welcome screen\n   */\n\n  /**\n   * Data that can be resolved to a GuildTextChannel object. This can be:\n   * * A TextChannel\n   * * A NewsChannel\n   * * A Snowflake\n   * @typedef {TextChannel|NewsChannel|Snowflake} GuildTextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a GuildVoiceChannel object. This can be:\n   * * A VoiceChannel\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|StageChannel|Snowflake} GuildVoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild's welcome screen\n   * @param {WelcomeScreenEditData} data Data to edit the welcome screen with\n   * @returns {Promise<WelcomeScreen>}\n   * @example\n   * guild.editWelcomeScreen({\n   *   description: 'Hello World',\n   *   enabled: true,\n   *   welcomeChannels: [\n   *     {\n   *       description: 'foobar',\n   *       channel: '222197033908436994',\n   *     }\n   *   ],\n   * })\n   */\n  async editWelcomeScreen(data) {\n    const { enabled, description, welcomeChannels } = data;\n    const welcome_channels = welcomeChannels?.map(welcomeChannelData => {\n      const emoji = this.emojis.resolve(welcomeChannelData.emoji);\n      return {\n        emoji_id: emoji?.id,\n        emoji_name: emoji?.name ?? welcomeChannelData.emoji,\n        channel_id: this.channels.resolveId(welcomeChannelData.channel),\n        description: welcomeChannelData.description,\n      };\n    });\n\n    const patchData = await this.client.api.guilds(this.id, 'welcome-screen').patch({\n      data: {\n        welcome_channels,\n        description,\n        enabled,\n      },\n    });\n    return new WelcomeScreen(this, patchData);\n  }\n\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {ExplicitContentFilterLevel|number} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({ explicitContentFilter }, reason);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {DefaultMessageNotificationLevel|number} defaultMessageNotifications The new default message notification level of the guild\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({ defaultMessageNotifications }, reason);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({ systemChannelFlags }, reason);\n  }\n\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Edits the verification level of the guild.\n   * @param {VerificationLevel|number} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({ verificationLevel }, reason);\n  }\n\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {VoiceChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({ afkChannel }, reason);\n  }\n\n  /**\n   * Edits the system channel of the guild.\n   * @param {TextChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({ systemChannel }, reason);\n  }\n\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({ afkTimeout }, reason);\n  }\n\n  /**\n   * Sets a new guild icon.\n   * @param {?(Base64Resolvable|BufferResolvable)} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  setIcon(icon, reason) {\n    return this.edit({ icon }, reason);\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(guild => guild.fetchOwner())\n   *  .then(owner => console.log(`Updated the guild owner to ${owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({ owner }, reason);\n  }\n\n  /**\n   * Sets a new guild invite splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  setSplash(splash, reason) {\n    return this.edit({ splash }, reason);\n  }\n\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n  setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({ discoverySplash }, reason);\n  }\n\n  /**\n   * Sets a new guild banner.\n   * @param {?(Base64Resolvable|BufferResolvable)} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n  setBanner(banner, reason) {\n    return this.edit({ banner }, reason);\n  }\n\n  /**\n   * Edits the rules channel of the guild.\n   * @param {TextChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({ rulesChannel }, reason);\n  }\n\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {TextChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({ publicUpdatesChannel }, reason);\n  }\n\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {string} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({ preferredLocale }, reason);\n  }\n\n  /**\n   * Edits the enabled state of the guild's premium progress bar\n   * @param {boolean} [enabled=true] The new enabled state of the guild's premium progress bar\n   * @param {string} [reason] Reason for changing the state of the guild's premium progress bar\n   * @returns {Promise<Guild>}\n   */\n  setPremiumProgressBarEnabled(enabled = true, reason) {\n    return this.edit({ premiumProgressBarEnabled: enabled }, reason);\n  }\n\n  /**\n   * Data that can be resolved to give a Category Channel object. This can be:\n   * * A CategoryChannel object\n   * * A Snowflake\n   * @typedef {CategoryChannel|Snowflake} CategoryChannelResolvable\n   */\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {GuildChannel|Snowflake} channel Channel to update\n   * @property {number} [position] New position for the channel\n   * @property {CategoryChannelResolvable} [parent] Parent channel for this channel\n   * @property {boolean} [lockPermissions] If the overwrites should be locked to the parents overwrites\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * <info>Only one channel's parent can be changed at a time</info>\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @deprecated Use {@link GuildChannelManager#setPositions} instead\n   * @example\n   * guild.setChannelPositions([{ channel: channelId, position: newChannelIndex }])\n   *   .then(guild => console.log(`Updated channel positions for ${guild}`))\n   *   .catch(console.error);\n   */\n  setChannelPositions(channelPositions) {\n    if (!deprecationEmittedForSetChannelPositions) {\n      process.emitWarning(\n        'The Guild#setChannelPositions method is deprecated. Use GuildChannelManager#setPositions instead.',\n        'DeprecationWarning',\n      );\n\n      deprecationEmittedForSetChannelPositions = true;\n    }\n\n    return this.channels.setPositions(channelPositions);\n  }\n\n  /**\n   * The data needed for updating a guild role's position\n   * @typedef {Object} GuildRolePosition\n   * @property {RoleResolvable} role The role's id\n   * @property {number} position The position to update\n   */\n\n  /**\n   * Batch-updates the guild's role positions\n   * @param {GuildRolePosition[]} rolePositions Role positions to update\n   * @returns {Promise<Guild>}\n   * @deprecated Use {@link RoleManager#setPositions} instead\n   * @example\n   * guild.setRolePositions([{ role: roleId, position: updatedRoleIndex }])\n   *  .then(guild => console.log(`Role positions updated for ${guild}`))\n   *  .catch(console.error);\n   */\n  setRolePositions(rolePositions) {\n    if (!deprecationEmittedForSetRolePositions) {\n      process.emitWarning(\n        'The Guild#setRolePositions method is deprecated. Use RoleManager#setPositions instead.',\n        'DeprecationWarning',\n      );\n\n      deprecationEmittedForSetRolePositions = true;\n    }\n\n    return this.roles.setPositions(rolePositions);\n  }\n\n  /**\n   * Edits the guild's widget settings.\n   * @param {GuildWidgetSettingsData} settings The widget settings for the guild\n   * @param {string} [reason] Reason for changing the guild's widget settings\n   * @returns {Promise<Guild>}\n   */\n  async setWidgetSettings(settings, reason) {\n    await this.client.api.guilds(this.id).widget.patch({\n      data: {\n        enabled: settings.enabled,\n        channel_id: this.channels.resolveId(settings.channel),\n      },\n      reason,\n    });\n    return this;\n  }\n\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(g => console.log(`Left the guild ${g}`))\n   *   .catch(console.error);\n   */\n  async leave() {\n    if (this.ownerId === this.client.user.id) throw new Error('GUILD_OWNED');\n    await this.client.api.users('@me').guilds(this.id).delete();\n    return this.client.actions.GuildDelete.handle({ id: this.id }).guild;\n  }\n\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.api.guilds(this.id).delete();\n    return this.client.actions.GuildDelete.handle({ id: this.id }).guild;\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    return (\n      guild &&\n      guild instanceof this.constructor &&\n      this.id === guild.id &&\n      this.available === guild.available &&\n      this.splash === guild.splash &&\n      this.discoverySplash === guild.discoverySplash &&\n      this.name === guild.name &&\n      this.memberCount === guild.memberCount &&\n      this.large === guild.large &&\n      this.icon === guild.icon &&\n      this.ownerId === guild.ownerId &&\n      this.verificationLevel === guild.verificationLevel &&\n      (this.features === guild.features ||\n        (this.features.length === guild.features.length &&\n          this.features.every((feat, i) => feat === guild.features[i])))\n    );\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false,\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n\n  /**\n   * The voice state adapter for this guild that can be used with @discordjs/voice to play audio in voice\n   * and stage channels.\n   * @type {Function}\n   * @readonly\n   */\n  get voiceAdapterCreator() {\n    return methods => {\n      this.client.voice.adapters.set(this.id, methods);\n      return {\n        sendPayload: data => {\n          if (this.shard.status !== Status.READY) return false;\n          this.shard.send(data);\n          return true;\n        },\n        destroy: () => {\n          this.client.voice.adapters.delete(this.id);\n        },\n      };\n    };\n  }\n\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and ids.\n   * @returns {Collection<Snowflake, Role>}\n   * @private\n   */\n  _sortedRoles() {\n    return Util.discordSort(this.roles.cache);\n  }\n\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<Snowflake, GuildChannel>}\n   * @private\n   */\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelTypes.GUILD_CATEGORY;\n    return Util.discordSort(\n      this.channels.cache.filter(\n        c =>\n          (['GUILD_TEXT', 'GUILD_NEWS', 'GUILD_STORE'].includes(channel.type)\n            ? ['GUILD_TEXT', 'GUILD_NEWS', 'GUILD_STORE'].includes(c.type)\n            : c.type === channel.type) &&\n          (category || c.parent === channel.parent),\n      ),\n    );\n  }\n}\n\nexports.Guild = Guild;\nexports.deletedGuilds = deletedGuilds;\n\n/**\n * @external APIGuild\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}