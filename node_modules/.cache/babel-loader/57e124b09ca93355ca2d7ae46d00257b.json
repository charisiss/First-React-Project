{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst Base = require('./Base');\n\nconst {\n  StickerFormatTypes,\n  StickerTypes\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * @type {WeakSet<StageInstance>}\n * @private\n * @internal\n */\n\n\nconst deletedStickers = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n/**\n * Represents a Sticker.\n * @extends {Base}\n */\n\nclass Sticker extends Base {\n  constructor(client, sticker) {\n    super(client);\n\n    this._patch(sticker);\n  }\n\n  _patch(sticker) {\n    /**\n     * The sticker's id\n     * @type {Snowflake}\n     */\n    this.id = sticker.id;\n\n    if ('description' in sticker) {\n      /**\n       * The description of the sticker\n       * @type {?string}\n       */\n      this.description = sticker.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if ('type' in sticker) {\n      /**\n       * The type of the sticker\n       * @type {?StickerType}\n       */\n      this.type = StickerTypes[sticker.type];\n    } else {\n      this.type ??= null;\n    }\n\n    if ('format_type' in sticker) {\n      /**\n       * The format of the sticker\n       * @type {StickerFormatType}\n       */\n      this.format = StickerFormatTypes[sticker.format_type];\n    }\n\n    if ('name' in sticker) {\n      /**\n       * The name of the sticker\n       * @type {string}\n       */\n      this.name = sticker.name;\n    }\n\n    if ('pack_id' in sticker) {\n      /**\n       * The id of the pack the sticker is from, for standard stickers\n       * @type {?Snowflake}\n       */\n      this.packId = sticker.pack_id;\n    } else {\n      this.packId ??= null;\n    }\n\n    if ('tags' in sticker) {\n      /**\n       * An array of tags for the sticker\n       * @type {?string[]}\n       */\n      this.tags = sticker.tags.split(', ');\n    } else {\n      this.tags ??= null;\n    }\n\n    if ('available' in sticker) {\n      /**\n       * Whether or not the guild sticker is available\n       * @type {?boolean}\n       */\n      this.available = sticker.available;\n    } else {\n      this.available ??= null;\n    }\n\n    if ('guild_id' in sticker) {\n      /**\n       * The id of the guild that owns this sticker\n       * @type {?Snowflake}\n       */\n      this.guildId = sticker.guild_id;\n    } else {\n      this.guildId ??= null;\n    }\n\n    if ('user' in sticker) {\n      /**\n       * The user that uploaded the guild sticker\n       * @type {?User}\n       */\n      this.user = this.client.users._add(sticker.user);\n    } else {\n      this.user ??= null;\n    }\n\n    if ('sort_value' in sticker) {\n      /**\n       * The standard sticker's sort order within its pack\n       * @type {?number}\n       */\n      this.sortValue = sticker.sort_value;\n    } else {\n      this.sortValue ??= null;\n    }\n  }\n  /**\n   * The timestamp the sticker was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n  /**\n   * The time the sticker was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * Whether or not the sticker has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n\n\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Sticker#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    return deletedStickers.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Sticker#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    if (value) deletedStickers.add(this);else deletedStickers.delete(this);\n  }\n  /**\n   * Whether this sticker is partial\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return !this.type;\n  }\n  /**\n   * The guild that owns this sticker\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n  /**\n   * A link to the sticker\n   * <info>If the sticker's format is LOTTIE, it returns the URL of the Lottie JSON file.</info>\n   * @type {string}\n   */\n\n\n  get url() {\n    return this.client.rest.cdn.Sticker(this.id, this.format);\n  }\n  /**\n   * Fetches this sticker.\n   * @returns {Promise<Sticker>}\n   */\n\n\n  async fetch() {\n    const data = await this.client.api.stickers(this.id).get();\n\n    this._patch(data);\n\n    return this;\n  }\n  /**\n   * Fetches the pack this sticker is part of from Discord, if this is a Nitro sticker.\n   * @returns {Promise<?StickerPack>}\n   */\n\n\n  async fetchPack() {\n    return (this.packId && (await this.client.fetchPremiumStickerPacks()).get(this.packId)) ?? null;\n  }\n  /**\n   * Fetches the user who uploaded this sticker, if this is a guild sticker.\n   * @returns {Promise<?User>}\n   */\n\n\n  async fetchUser() {\n    if (this.partial) await this.fetch();\n    if (!this.guildId) throw new Error('NOT_GUILD_STICKER');\n    const data = await this.client.api.guilds(this.guildId).stickers(this.id).get();\n\n    this._patch(data);\n\n    return this.user;\n  }\n  /**\n   * Data for editing a sticker.\n   * @typedef {Object} GuildStickerEditData\n   * @property {string} [name] The name of the sticker\n   * @property {?string} [description] The description of the sticker\n   * @property {string} [tags] The Discord name of a unicode emoji representing the sticker's expression\n   */\n\n  /**\n   * Edits the sticker.\n   * @param {GuildStickerEditData} [data] The new data for the sticker\n   * @param {string} [reason] Reason for editing this sticker\n   * @returns {Promise<Sticker>}\n   * @example\n   * // Update the name of a sticker\n   * sticker.edit({ name: 'new name' })\n   *   .then(s => console.log(`Updated the name of the sticker to ${s.name}`))\n   *   .catch(console.error);\n   */\n\n\n  edit(data, reason) {\n    return this.guild.stickers.edit(this, data, reason);\n  }\n  /**\n   * Deletes the sticker.\n   * @returns {Promise<Sticker>}\n   * @param {string} [reason] Reason for deleting this sticker\n   * @example\n   * // Delete a message\n   * sticker.delete()\n   *   .then(s => console.log(`Deleted sticker ${s.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async delete(reason) {\n    await this.guild.stickers.delete(this, reason);\n    return this;\n  }\n  /**\n   * Whether this sticker is the same as another one.\n   * @param {Sticker|APISticker} other The sticker to compare it to\n   * @returns {boolean}\n   */\n\n\n  equals(other) {\n    if (other instanceof Sticker) {\n      return other.id === this.id && other.description === this.description && other.type === this.type && other.format === this.format && other.name === this.name && other.packId === this.packId && other.tags.length === this.tags.length && other.tags.every(tag => this.tags.includes(tag)) && other.available === this.available && other.guildId === this.guildId && other.sortValue === this.sortValue;\n    } else {\n      return other.id === this.id && other.description === this.description && other.name === this.name && other.tags === this.tags.join(', ');\n    }\n  }\n\n}\n\nexports.Sticker = Sticker;\nexports.deletedStickers = deletedStickers;\n/**\n * @external APISticker\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object}\n */","map":{"version":3,"names":["process","require","Base","StickerFormatTypes","StickerTypes","SnowflakeUtil","deletedStickers","WeakSet","deprecationEmittedForDeleted","Sticker","constructor","client","sticker","_patch","id","description","type","format","format_type","name","packId","pack_id","tags","split","available","guildId","guild_id","user","users","_add","sortValue","sort_value","createdTimestamp","timestampFrom","createdAt","Date","deleted","emitWarning","has","value","add","delete","partial","guild","guilds","resolve","url","rest","cdn","fetch","data","api","stickers","get","fetchPack","fetchPremiumStickerPacks","fetchUser","Error","edit","reason","equals","other","length","every","tag","includes","join","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/Sticker.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst Base = require('./Base');\nconst { StickerFormatTypes, StickerTypes } = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * @type {WeakSet<StageInstance>}\n * @private\n * @internal\n */\nconst deletedStickers = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n\n/**\n * Represents a Sticker.\n * @extends {Base}\n */\nclass Sticker extends Base {\n  constructor(client, sticker) {\n    super(client);\n\n    this._patch(sticker);\n  }\n\n  _patch(sticker) {\n    /**\n     * The sticker's id\n     * @type {Snowflake}\n     */\n    this.id = sticker.id;\n\n    if ('description' in sticker) {\n      /**\n       * The description of the sticker\n       * @type {?string}\n       */\n      this.description = sticker.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if ('type' in sticker) {\n      /**\n       * The type of the sticker\n       * @type {?StickerType}\n       */\n      this.type = StickerTypes[sticker.type];\n    } else {\n      this.type ??= null;\n    }\n\n    if ('format_type' in sticker) {\n      /**\n       * The format of the sticker\n       * @type {StickerFormatType}\n       */\n      this.format = StickerFormatTypes[sticker.format_type];\n    }\n\n    if ('name' in sticker) {\n      /**\n       * The name of the sticker\n       * @type {string}\n       */\n      this.name = sticker.name;\n    }\n\n    if ('pack_id' in sticker) {\n      /**\n       * The id of the pack the sticker is from, for standard stickers\n       * @type {?Snowflake}\n       */\n      this.packId = sticker.pack_id;\n    } else {\n      this.packId ??= null;\n    }\n\n    if ('tags' in sticker) {\n      /**\n       * An array of tags for the sticker\n       * @type {?string[]}\n       */\n      this.tags = sticker.tags.split(', ');\n    } else {\n      this.tags ??= null;\n    }\n\n    if ('available' in sticker) {\n      /**\n       * Whether or not the guild sticker is available\n       * @type {?boolean}\n       */\n      this.available = sticker.available;\n    } else {\n      this.available ??= null;\n    }\n\n    if ('guild_id' in sticker) {\n      /**\n       * The id of the guild that owns this sticker\n       * @type {?Snowflake}\n       */\n      this.guildId = sticker.guild_id;\n    } else {\n      this.guildId ??= null;\n    }\n\n    if ('user' in sticker) {\n      /**\n       * The user that uploaded the guild sticker\n       * @type {?User}\n       */\n      this.user = this.client.users._add(sticker.user);\n    } else {\n      this.user ??= null;\n    }\n\n    if ('sort_value' in sticker) {\n      /**\n       * The standard sticker's sort order within its pack\n       * @type {?number}\n       */\n      this.sortValue = sticker.sort_value;\n    } else {\n      this.sortValue ??= null;\n    }\n  }\n\n  /**\n   * The timestamp the sticker was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the sticker was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether or not the sticker has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Sticker#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    return deletedStickers.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Sticker#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    if (value) deletedStickers.add(this);\n    else deletedStickers.delete(this);\n  }\n\n  /**\n   * Whether this sticker is partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.type;\n  }\n\n  /**\n   * The guild that owns this sticker\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * A link to the sticker\n   * <info>If the sticker's format is LOTTIE, it returns the URL of the Lottie JSON file.</info>\n   * @type {string}\n   */\n  get url() {\n    return this.client.rest.cdn.Sticker(this.id, this.format);\n  }\n\n  /**\n   * Fetches this sticker.\n   * @returns {Promise<Sticker>}\n   */\n  async fetch() {\n    const data = await this.client.api.stickers(this.id).get();\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * Fetches the pack this sticker is part of from Discord, if this is a Nitro sticker.\n   * @returns {Promise<?StickerPack>}\n   */\n  async fetchPack() {\n    return (this.packId && (await this.client.fetchPremiumStickerPacks()).get(this.packId)) ?? null;\n  }\n\n  /**\n   * Fetches the user who uploaded this sticker, if this is a guild sticker.\n   * @returns {Promise<?User>}\n   */\n  async fetchUser() {\n    if (this.partial) await this.fetch();\n    if (!this.guildId) throw new Error('NOT_GUILD_STICKER');\n\n    const data = await this.client.api.guilds(this.guildId).stickers(this.id).get();\n    this._patch(data);\n    return this.user;\n  }\n\n  /**\n   * Data for editing a sticker.\n   * @typedef {Object} GuildStickerEditData\n   * @property {string} [name] The name of the sticker\n   * @property {?string} [description] The description of the sticker\n   * @property {string} [tags] The Discord name of a unicode emoji representing the sticker's expression\n   */\n\n  /**\n   * Edits the sticker.\n   * @param {GuildStickerEditData} [data] The new data for the sticker\n   * @param {string} [reason] Reason for editing this sticker\n   * @returns {Promise<Sticker>}\n   * @example\n   * // Update the name of a sticker\n   * sticker.edit({ name: 'new name' })\n   *   .then(s => console.log(`Updated the name of the sticker to ${s.name}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    return this.guild.stickers.edit(this, data, reason);\n  }\n\n  /**\n   * Deletes the sticker.\n   * @returns {Promise<Sticker>}\n   * @param {string} [reason] Reason for deleting this sticker\n   * @example\n   * // Delete a message\n   * sticker.delete()\n   *   .then(s => console.log(`Deleted sticker ${s.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.stickers.delete(this, reason);\n    return this;\n  }\n\n  /**\n   * Whether this sticker is the same as another one.\n   * @param {Sticker|APISticker} other The sticker to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof Sticker) {\n      return (\n        other.id === this.id &&\n        other.description === this.description &&\n        other.type === this.type &&\n        other.format === this.format &&\n        other.name === this.name &&\n        other.packId === this.packId &&\n        other.tags.length === this.tags.length &&\n        other.tags.every(tag => this.tags.includes(tag)) &&\n        other.available === this.available &&\n        other.guildId === this.guildId &&\n        other.sortValue === this.sortValue\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.description === this.description &&\n        other.name === this.name &&\n        other.tags === this.tags.join(', ')\n      );\n    }\n  }\n}\n\nexports.Sticker = Sticker;\nexports.deletedStickers = deletedStickers;\n\n/**\n * @external APISticker\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}