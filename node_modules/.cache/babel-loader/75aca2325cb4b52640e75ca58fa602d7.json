{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  Error\n} = require('../errors');\n\nconst {\n  GuildScheduledEventEntityTypes,\n  GuildScheduledEventStatuses,\n  GuildScheduledEventPrivacyLevels,\n  Endpoints\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * Represents a scheduled event in a {@link Guild}.\n * @extends {Base}\n */\n\n\nclass GuildScheduledEvent extends Base {\n  constructor(client, data) {\n    super(client);\n    /**\n     * The id of the guild scheduled event\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * The id of the guild this guild scheduled event belongs to\n     * @type {Snowflake}\n     */\n\n    this.guildId = data.guild_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('channel_id' in data) {\n      /**\n       * The channel id in which the scheduled event will be hosted, or `null` if entity type is `EXTERNAL`\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n\n    if ('creator_id' in data) {\n      /**\n       * The id of the user that created this guild scheduled event\n       * @type {?Snowflake}\n       */\n      this.creatorId = data.creator_id;\n    } else {\n      this.creatorId ??= null;\n    }\n    /**\n     * The name of the guild scheduled event\n     * @type {string}\n     */\n\n\n    this.name = data.name;\n\n    if ('description' in data) {\n      /**\n       * The description of the guild scheduled event\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n    /**\n     * The timestamp the guild scheduled event will start at\n     * <info>This can be potentially `null` only when it's an {@link AuditLogEntryTarget}</info>\n     * @type {?number}\n     */\n\n\n    this.scheduledStartTimestamp = data.scheduled_start_time ? Date.parse(data.scheduled_start_time) : null;\n    /**\n     * The timestamp the guild scheduled event will end at,\n     * or `null` if the event does not have a scheduled time to end\n     * @type {?number}\n     */\n\n    this.scheduledEndTimestamp = data.scheduled_end_time ? Date.parse(data.scheduled_end_time) : null;\n    /**\n     * The privacy level of the guild scheduled event\n     * @type {PrivacyLevel}\n     */\n\n    this.privacyLevel = GuildScheduledEventPrivacyLevels[data.privacy_level];\n    /**\n     * The status of the guild scheduled event\n     * @type {GuildScheduledEventStatus}\n     */\n\n    this.status = GuildScheduledEventStatuses[data.status];\n    /**\n     * The type of hosting entity associated with the scheduled event\n     * @type {GuildScheduledEventEntityType}\n     */\n\n    this.entityType = GuildScheduledEventEntityTypes[data.entity_type];\n\n    if ('entity_id' in data) {\n      /**\n       * The id of the hosting entity associated with the scheduled event\n       * @type {?Snowflake}\n       */\n      this.entityId = data.entity_id;\n    } else {\n      this.entityId ??= null;\n    }\n\n    if ('user_count' in data) {\n      /**\n       * The number of users who are subscribed to this guild scheduled event\n       * @type {?number}\n       */\n      this.userCount = data.user_count;\n    } else {\n      this.userCount ??= null;\n    }\n\n    if ('creator' in data) {\n      /**\n       * The user that created this guild scheduled event\n       * @type {?User}\n       */\n      this.creator = this.client.users._add(data.creator);\n    } else {\n      this.creator ??= this.client.users.resolve(this.creatorId);\n    }\n    /* eslint-disable max-len */\n\n    /**\n     * Represents the additional metadata for a {@link GuildScheduledEvent}\n     * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata}\n     * @typedef {Object} GuildScheduledEventEntityMetadata\n     * @property {?string} location The location of the guild scheduled event\n     */\n\n    /* eslint-enable max-len */\n\n\n    if ('entity_metadata' in data) {\n      if (data.entity_metadata) {\n        /**\n         * Additional metadata\n         * @type {?GuildScheduledEventEntityMetadata}\n         */\n        this.entityMetadata = {\n          location: data.entity_metadata.location ?? this.entityMetadata?.location ?? null\n        };\n      } else {\n        this.entityMetadata = null;\n      }\n    } else {\n      this.entityMetadata ??= null;\n    }\n  }\n  /**\n   * The timestamp the guild scheduled event was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n  /**\n   * The time the guild scheduled event was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * The time the guild scheduled event will start at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get scheduledStartAt() {\n    return new Date(this.scheduledStartTimestamp);\n  }\n  /**\n   * The time the guild scheduled event will end at,\n   * or `null` if the event does not have a scheduled time to end\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get scheduledEndAt() {\n    return this.scheduledEndTimestamp && new Date(this.scheduledEndTimestamp);\n  }\n  /**\n   * The channel associated with this scheduled event\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n\n\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n  /**\n   * The guild this scheduled event belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n  /**\n   * The URL to the guild scheduled event\n   * @type {string}\n   * @readonly\n   */\n\n\n  get url() {\n    return Endpoints.scheduledEvent(this.client.options.http.scheduledEvent, this.guildId, this.id);\n  }\n  /**\n   * Options used to create an invite URL to a {@link GuildScheduledEvent}\n   * @typedef {CreateInviteOptions} CreateGuildScheduledEventInviteURLOptions\n   * @property {GuildInvitableChannelResolvable} [channel] The channel to create the invite in.\n   * <warn>This is required when the `entityType` of `GuildScheduledEvent` is `EXTERNAL`, gets ignored otherwise</warn>\n   */\n\n  /**\n   * Creates an invite URL to this guild scheduled event.\n   * @param {CreateGuildScheduledEventInviteURLOptions} [options] The options to create the invite\n   * @returns {Promise<string>}\n   */\n\n\n  async createInviteURL(options) {\n    let channelId = this.channelId;\n\n    if (this.entityType === 'EXTERNAL') {\n      if (!options?.channel) throw new Error('INVITE_OPTIONS_MISSING_CHANNEL');\n      channelId = this.guild.channels.resolveId(options.channel);\n      if (!channelId) throw new Error('GUILD_CHANNEL_RESOLVE');\n    }\n\n    const invite = await this.guild.invites.create(channelId, options);\n    return Endpoints.invite(this.client.options.http.invite, invite.code, this.id);\n  }\n  /**\n   * Edits this guild scheduled event.\n   * @param {GuildScheduledEventEditOptions} options The options to edit the guild scheduled event\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Edit a guild scheduled event\n   * guildScheduledEvent.edit({ name: 'Party' })\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n\n\n  edit(options) {\n    return this.guild.scheduledEvents.edit(this.id, options);\n  }\n  /**\n   * Deletes this guild scheduled event.\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Delete a guild scheduled event\n   * guildScheduledEvent.delete()\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n\n\n  async delete() {\n    await this.guild.scheduledEvents.delete(this.id);\n    return this;\n  }\n  /**\n   * Sets a new name for the guild scheduled event.\n   * @param {string} name The new name of the guild scheduled event\n   * @param {string} [reason] The reason for changing the name\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set name of a guild scheduled event\n   * guildScheduledEvent.setName('Birthday Party')\n   *  .then(guildScheduledEvent => console.log(`Set the name to: ${guildScheduledEvent.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setName(name, reason) {\n    return this.edit({\n      name,\n      reason\n    });\n  }\n  /**\n   * Sets a new time to schedule the event at.\n   * @param {DateResolvable} scheduledStartTime The time to schedule the event at\n   * @param {string} [reason] The reason for changing the scheduled start time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set start time of a guild scheduled event\n   * guildScheduledEvent.setScheduledStartTime('2022-09-24T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the start time to: ${guildScheduledEvent.scheduledStartTime}`))\n   *  .catch(console.error);\n   */\n\n\n  setScheduledStartTime(scheduledStartTime, reason) {\n    return this.edit({\n      scheduledStartTime,\n      reason\n    });\n  } // TODO: scheduledEndTime gets reset on passing null but it hasn't been documented\n\n  /**\n   * Sets a new time to end the event at.\n   * @param {DateResolvable} scheduledEndTime The time to end the event at\n   * @param {string} [reason] The reason for changing the scheduled end time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set end time of a guild scheduled event\n   * guildScheduledEvent.setScheduledEndTime('2022-09-25T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the end time to: ${guildScheduledEvent.scheduledEndTime}`))\n   *  .catch(console.error);\n   */\n\n\n  setScheduledEndTime(scheduledEndTime, reason) {\n    return this.edit({\n      scheduledEndTime,\n      reason\n    });\n  }\n  /**\n   * Sets the new description of the guild scheduled event.\n   * @param {string} description The description of the guild scheduled event\n   * @param {string} [reason] The reason for changing the description\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set description of a guild scheduled event\n   * guildScheduledEvent.setDescription('A virtual birthday party')\n   *  .then(guildScheduledEvent => console.log(`Set the description to: ${guildScheduledEvent.description}`))\n   *  .catch(console.error);\n   */\n\n\n  setDescription(description, reason) {\n    return this.edit({\n      description,\n      reason\n    });\n  }\n  /**\n   * Sets the new status of the guild scheduled event.\n   * <info>If you're working with TypeScript, use this method in conjunction with status type-guards\n   * like {@link GuildScheduledEvent#isScheduled} to get only valid status as suggestion</info>\n   * @param {GuildScheduledEventStatus|number} status The status of the guild scheduled event\n   * @param {string} [reason] The reason for changing the status\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set status of a guild scheduled event\n   * guildScheduledEvent.setStatus('ACTIVE')\n   *  .then(guildScheduledEvent => console.log(`Set the status to: ${guildScheduledEvent.status}`))\n   *  .catch(console.error);\n   */\n\n\n  setStatus(status, reason) {\n    return this.edit({\n      status,\n      reason\n    });\n  }\n  /**\n   * Sets the new location of the guild scheduled event.\n   * @param {string} location The location of the guild scheduled event\n   * @param {string} [reason] The reason for changing the location\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set location of a guild scheduled event\n   * guildScheduledEvent.setLocation('Earth')\n   *  .then(guildScheduledEvent => console.log(`Set the location to: ${guildScheduledEvent.entityMetadata.location}`))\n   *  .catch(console.error);\n   */\n\n\n  setLocation(location, reason) {\n    return this.edit({\n      entityMetadata: {\n        location\n      },\n      reason\n    });\n  }\n  /**\n   * Fetches subscribers of this guild scheduled event.\n   * @param {FetchGuildScheduledEventSubscribersOptions} [options] Options for fetching the subscribers\n   * @returns {Promise<Collection<Snowflake, GuildScheduledEventUser>>}\n   */\n\n\n  fetchSubscribers(options) {\n    return this.guild.scheduledEvents.fetchSubscribers(this.id, options);\n  }\n  /**\n   * When concatenated with a string, this automatically concatenates the event's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Event: https://discord.com/events/412345678901234567/499876543211234567\n   * console.log(`Event: ${guildScheduledEvent}`);\n   */\n\n\n  toString() {\n    return this.url;\n  }\n  /**\n   * Indicates whether this guild scheduled event has an `ACTIVE` status.\n   * @returns {boolean}\n   */\n\n\n  isActive() {\n    return GuildScheduledEventStatuses[this.status] === GuildScheduledEventStatuses.ACTIVE;\n  }\n  /**\n   * Indicates whether this guild scheduled event has a `CANCELED` status.\n   * @returns {boolean}\n   */\n\n\n  isCanceled() {\n    return GuildScheduledEventStatuses[this.status] === GuildScheduledEventStatuses.CANCELED;\n  }\n  /**\n   * Indicates whether this guild scheduled event has a `COMPLETED` status.\n   * @returns {boolean}\n   */\n\n\n  isCompleted() {\n    return GuildScheduledEventStatuses[this.status] === GuildScheduledEventStatuses.COMPLETED;\n  }\n  /**\n   * Indicates whether this guild scheduled event has a `SCHEDULED` status.\n   * @returns {boolean}\n   */\n\n\n  isScheduled() {\n    return GuildScheduledEventStatuses[this.status] === GuildScheduledEventStatuses.SCHEDULED;\n  }\n\n}\n\nexports.GuildScheduledEvent = GuildScheduledEvent;","map":{"version":3,"names":["Base","require","Error","GuildScheduledEventEntityTypes","GuildScheduledEventStatuses","GuildScheduledEventPrivacyLevels","Endpoints","SnowflakeUtil","GuildScheduledEvent","constructor","client","data","id","guildId","guild_id","_patch","channelId","channel_id","creatorId","creator_id","name","description","scheduledStartTimestamp","scheduled_start_time","Date","parse","scheduledEndTimestamp","scheduled_end_time","privacyLevel","privacy_level","status","entityType","entity_type","entityId","entity_id","userCount","user_count","creator","users","_add","resolve","entity_metadata","entityMetadata","location","createdTimestamp","timestampFrom","createdAt","scheduledStartAt","scheduledEndAt","channel","channels","guild","guilds","url","scheduledEvent","options","http","createInviteURL","resolveId","invite","invites","create","code","edit","scheduledEvents","delete","setName","reason","setScheduledStartTime","scheduledStartTime","setScheduledEndTime","scheduledEndTime","setDescription","setStatus","setLocation","fetchSubscribers","toString","isActive","ACTIVE","isCanceled","CANCELED","isCompleted","COMPLETED","isScheduled","SCHEDULED","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/GuildScheduledEvent.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Error } = require('../errors');\nconst {\n  GuildScheduledEventEntityTypes,\n  GuildScheduledEventStatuses,\n  GuildScheduledEventPrivacyLevels,\n  Endpoints,\n} = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * Represents a scheduled event in a {@link Guild}.\n * @extends {Base}\n */\nclass GuildScheduledEvent extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the guild scheduled event\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The id of the guild this guild scheduled event belongs to\n     * @type {Snowflake}\n     */\n    this.guildId = data.guild_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('channel_id' in data) {\n      /**\n       * The channel id in which the scheduled event will be hosted, or `null` if entity type is `EXTERNAL`\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n\n    if ('creator_id' in data) {\n      /**\n       * The id of the user that created this guild scheduled event\n       * @type {?Snowflake}\n       */\n      this.creatorId = data.creator_id;\n    } else {\n      this.creatorId ??= null;\n    }\n\n    /**\n     * The name of the guild scheduled event\n     * @type {string}\n     */\n    this.name = data.name;\n\n    if ('description' in data) {\n      /**\n       * The description of the guild scheduled event\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    /**\n     * The timestamp the guild scheduled event will start at\n     * <info>This can be potentially `null` only when it's an {@link AuditLogEntryTarget}</info>\n     * @type {?number}\n     */\n    this.scheduledStartTimestamp = data.scheduled_start_time ? Date.parse(data.scheduled_start_time) : null;\n\n    /**\n     * The timestamp the guild scheduled event will end at,\n     * or `null` if the event does not have a scheduled time to end\n     * @type {?number}\n     */\n    this.scheduledEndTimestamp = data.scheduled_end_time ? Date.parse(data.scheduled_end_time) : null;\n\n    /**\n     * The privacy level of the guild scheduled event\n     * @type {PrivacyLevel}\n     */\n    this.privacyLevel = GuildScheduledEventPrivacyLevels[data.privacy_level];\n\n    /**\n     * The status of the guild scheduled event\n     * @type {GuildScheduledEventStatus}\n     */\n    this.status = GuildScheduledEventStatuses[data.status];\n\n    /**\n     * The type of hosting entity associated with the scheduled event\n     * @type {GuildScheduledEventEntityType}\n     */\n    this.entityType = GuildScheduledEventEntityTypes[data.entity_type];\n\n    if ('entity_id' in data) {\n      /**\n       * The id of the hosting entity associated with the scheduled event\n       * @type {?Snowflake}\n       */\n      this.entityId = data.entity_id;\n    } else {\n      this.entityId ??= null;\n    }\n\n    if ('user_count' in data) {\n      /**\n       * The number of users who are subscribed to this guild scheduled event\n       * @type {?number}\n       */\n      this.userCount = data.user_count;\n    } else {\n      this.userCount ??= null;\n    }\n\n    if ('creator' in data) {\n      /**\n       * The user that created this guild scheduled event\n       * @type {?User}\n       */\n      this.creator = this.client.users._add(data.creator);\n    } else {\n      this.creator ??= this.client.users.resolve(this.creatorId);\n    }\n\n    /* eslint-disable max-len */\n    /**\n     * Represents the additional metadata for a {@link GuildScheduledEvent}\n     * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata}\n     * @typedef {Object} GuildScheduledEventEntityMetadata\n     * @property {?string} location The location of the guild scheduled event\n     */\n    /* eslint-enable max-len */\n\n    if ('entity_metadata' in data) {\n      if (data.entity_metadata) {\n        /**\n         * Additional metadata\n         * @type {?GuildScheduledEventEntityMetadata}\n         */\n        this.entityMetadata = {\n          location: data.entity_metadata.location ?? this.entityMetadata?.location ?? null,\n        };\n      } else {\n        this.entityMetadata = null;\n      }\n    } else {\n      this.entityMetadata ??= null;\n    }\n  }\n\n  /**\n   * The timestamp the guild scheduled event was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the guild scheduled event was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the guild scheduled event will start at\n   * @type {Date}\n   * @readonly\n   */\n  get scheduledStartAt() {\n    return new Date(this.scheduledStartTimestamp);\n  }\n\n  /**\n   * The time the guild scheduled event will end at,\n   * or `null` if the event does not have a scheduled time to end\n   * @type {?Date}\n   * @readonly\n   */\n  get scheduledEndAt() {\n    return this.scheduledEndTimestamp && new Date(this.scheduledEndTimestamp);\n  }\n\n  /**\n   * The channel associated with this scheduled event\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild this scheduled event belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The URL to the guild scheduled event\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Endpoints.scheduledEvent(this.client.options.http.scheduledEvent, this.guildId, this.id);\n  }\n\n  /**\n   * Options used to create an invite URL to a {@link GuildScheduledEvent}\n   * @typedef {CreateInviteOptions} CreateGuildScheduledEventInviteURLOptions\n   * @property {GuildInvitableChannelResolvable} [channel] The channel to create the invite in.\n   * <warn>This is required when the `entityType` of `GuildScheduledEvent` is `EXTERNAL`, gets ignored otherwise</warn>\n   */\n\n  /**\n   * Creates an invite URL to this guild scheduled event.\n   * @param {CreateGuildScheduledEventInviteURLOptions} [options] The options to create the invite\n   * @returns {Promise<string>}\n   */\n  async createInviteURL(options) {\n    let channelId = this.channelId;\n    if (this.entityType === 'EXTERNAL') {\n      if (!options?.channel) throw new Error('INVITE_OPTIONS_MISSING_CHANNEL');\n      channelId = this.guild.channels.resolveId(options.channel);\n      if (!channelId) throw new Error('GUILD_CHANNEL_RESOLVE');\n    }\n    const invite = await this.guild.invites.create(channelId, options);\n    return Endpoints.invite(this.client.options.http.invite, invite.code, this.id);\n  }\n\n  /**\n   * Edits this guild scheduled event.\n   * @param {GuildScheduledEventEditOptions} options The options to edit the guild scheduled event\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Edit a guild scheduled event\n   * guildScheduledEvent.edit({ name: 'Party' })\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.scheduledEvents.edit(this.id, options);\n  }\n\n  /**\n   * Deletes this guild scheduled event.\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Delete a guild scheduled event\n   * guildScheduledEvent.delete()\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.scheduledEvents.delete(this.id);\n    return this;\n  }\n\n  /**\n   * Sets a new name for the guild scheduled event.\n   * @param {string} name The new name of the guild scheduled event\n   * @param {string} [reason] The reason for changing the name\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set name of a guild scheduled event\n   * guildScheduledEvent.setName('Birthday Party')\n   *  .then(guildScheduledEvent => console.log(`Set the name to: ${guildScheduledEvent.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Sets a new time to schedule the event at.\n   * @param {DateResolvable} scheduledStartTime The time to schedule the event at\n   * @param {string} [reason] The reason for changing the scheduled start time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set start time of a guild scheduled event\n   * guildScheduledEvent.setScheduledStartTime('2022-09-24T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the start time to: ${guildScheduledEvent.scheduledStartTime}`))\n   *  .catch(console.error);\n   */\n  setScheduledStartTime(scheduledStartTime, reason) {\n    return this.edit({ scheduledStartTime, reason });\n  }\n\n  // TODO: scheduledEndTime gets reset on passing null but it hasn't been documented\n  /**\n   * Sets a new time to end the event at.\n   * @param {DateResolvable} scheduledEndTime The time to end the event at\n   * @param {string} [reason] The reason for changing the scheduled end time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set end time of a guild scheduled event\n   * guildScheduledEvent.setScheduledEndTime('2022-09-25T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the end time to: ${guildScheduledEvent.scheduledEndTime}`))\n   *  .catch(console.error);\n   */\n  setScheduledEndTime(scheduledEndTime, reason) {\n    return this.edit({ scheduledEndTime, reason });\n  }\n\n  /**\n   * Sets the new description of the guild scheduled event.\n   * @param {string} description The description of the guild scheduled event\n   * @param {string} [reason] The reason for changing the description\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set description of a guild scheduled event\n   * guildScheduledEvent.setDescription('A virtual birthday party')\n   *  .then(guildScheduledEvent => console.log(`Set the description to: ${guildScheduledEvent.description}`))\n   *  .catch(console.error);\n   */\n  setDescription(description, reason) {\n    return this.edit({ description, reason });\n  }\n\n  /**\n   * Sets the new status of the guild scheduled event.\n   * <info>If you're working with TypeScript, use this method in conjunction with status type-guards\n   * like {@link GuildScheduledEvent#isScheduled} to get only valid status as suggestion</info>\n   * @param {GuildScheduledEventStatus|number} status The status of the guild scheduled event\n   * @param {string} [reason] The reason for changing the status\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set status of a guild scheduled event\n   * guildScheduledEvent.setStatus('ACTIVE')\n   *  .then(guildScheduledEvent => console.log(`Set the status to: ${guildScheduledEvent.status}`))\n   *  .catch(console.error);\n   */\n  setStatus(status, reason) {\n    return this.edit({ status, reason });\n  }\n\n  /**\n   * Sets the new location of the guild scheduled event.\n   * @param {string} location The location of the guild scheduled event\n   * @param {string} [reason] The reason for changing the location\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set location of a guild scheduled event\n   * guildScheduledEvent.setLocation('Earth')\n   *  .then(guildScheduledEvent => console.log(`Set the location to: ${guildScheduledEvent.entityMetadata.location}`))\n   *  .catch(console.error);\n   */\n  setLocation(location, reason) {\n    return this.edit({ entityMetadata: { location }, reason });\n  }\n\n  /**\n   * Fetches subscribers of this guild scheduled event.\n   * @param {FetchGuildScheduledEventSubscribersOptions} [options] Options for fetching the subscribers\n   * @returns {Promise<Collection<Snowflake, GuildScheduledEventUser>>}\n   */\n  fetchSubscribers(options) {\n    return this.guild.scheduledEvents.fetchSubscribers(this.id, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the event's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Event: https://discord.com/events/412345678901234567/499876543211234567\n   * console.log(`Event: ${guildScheduledEvent}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has an `ACTIVE` status.\n   * @returns {boolean}\n   */\n  isActive() {\n    return GuildScheduledEventStatuses[this.status] === GuildScheduledEventStatuses.ACTIVE;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a `CANCELED` status.\n   * @returns {boolean}\n   */\n  isCanceled() {\n    return GuildScheduledEventStatuses[this.status] === GuildScheduledEventStatuses.CANCELED;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a `COMPLETED` status.\n   * @returns {boolean}\n   */\n  isCompleted() {\n    return GuildScheduledEventStatuses[this.status] === GuildScheduledEventStatuses.COMPLETED;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a `SCHEDULED` status.\n   * @returns {boolean}\n   */\n  isScheduled() {\n    return GuildScheduledEventStatuses[this.status] === GuildScheduledEventStatuses.SCHEDULED;\n  }\n}\n\nexports.GuildScheduledEvent = GuildScheduledEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}