{"ast":null,"code":"'use strict'; // Discord epoch (2015-01-01T00:00:00.000Z)\n\nconst EPOCH = 1_420_070_400_000;\nlet INCREMENT = BigInt(0);\n/**\n * A container for useful snowflake-related methods.\n */\n\nclass SnowflakeUtil extends null {\n  /**\n   * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake},\n   * except the epoch is 2015-01-01T00:00:00.000Z.\n   *\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   * ```\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker's id as 1 and the process's id as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(`\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`);\n    }\n\n    if (INCREMENT >= 4095n) INCREMENT = BigInt(0); // Assign WorkerId as 1 and ProcessId as 0:\n\n    return (BigInt(timestamp - EPOCH) << 22n | 1n << 17n | INCREMENT++).toString();\n  }\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerId The worker's id in the snowflake\n   * @property {number} processId The process's id in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake}\n   */\n\n\n  static deconstruct(snowflake) {\n    const bigIntSnowflake = BigInt(snowflake);\n    return {\n      timestamp: Number(bigIntSnowflake >> 22n) + EPOCH,\n\n      get date() {\n        return new Date(this.timestamp);\n      },\n\n      workerId: Number(bigIntSnowflake >> 17n & 0b11111n),\n      processId: Number(bigIntSnowflake >> 12n & 0b11111n),\n      increment: Number(bigIntSnowflake & 0b111111111111n),\n      binary: bigIntSnowflake.toString(2).padStart(64, '0')\n    };\n  }\n  /**\n   * Retrieves the timestamp field's value from a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to get the timestamp value from\n   * @returns {number}\n   */\n\n\n  static timestampFrom(snowflake) {\n    return Number(BigInt(snowflake) >> 22n) + EPOCH;\n  }\n  /**\n   * Discord's epoch value (2015-01-01T00:00:00.000Z).\n   * @type {number}\n   * @readonly\n   */\n\n\n  static get EPOCH() {\n    return EPOCH;\n  }\n\n}\n\nmodule.exports = SnowflakeUtil;","map":{"version":3,"names":["EPOCH","INCREMENT","BigInt","SnowflakeUtil","generate","timestamp","Date","now","getTime","isNaN","TypeError","toString","deconstruct","snowflake","bigIntSnowflake","Number","date","workerId","processId","increment","binary","padStart","timestampFrom","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/util/SnowflakeUtil.js"],"sourcesContent":["'use strict';\n\n// Discord epoch (2015-01-01T00:00:00.000Z)\nconst EPOCH = 1_420_070_400_000;\nlet INCREMENT = BigInt(0);\n\n/**\n * A container for useful snowflake-related methods.\n */\nclass SnowflakeUtil extends null {\n  /**\n   * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake},\n   * except the epoch is 2015-01-01T00:00:00.000Z.\n   *\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   * ```\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker's id as 1 and the process's id as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(\n        `\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`,\n      );\n    }\n    if (INCREMENT >= 4095n) INCREMENT = BigInt(0);\n\n    // Assign WorkerId as 1 and ProcessId as 0:\n    return ((BigInt(timestamp - EPOCH) << 22n) | (1n << 17n) | INCREMENT++).toString();\n  }\n\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerId The worker's id in the snowflake\n   * @property {number} processId The process's id in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake}\n   */\n  static deconstruct(snowflake) {\n    const bigIntSnowflake = BigInt(snowflake);\n    return {\n      timestamp: Number(bigIntSnowflake >> 22n) + EPOCH,\n      get date() {\n        return new Date(this.timestamp);\n      },\n      workerId: Number((bigIntSnowflake >> 17n) & 0b11111n),\n      processId: Number((bigIntSnowflake >> 12n) & 0b11111n),\n      increment: Number(bigIntSnowflake & 0b111111111111n),\n      binary: bigIntSnowflake.toString(2).padStart(64, '0'),\n    };\n  }\n\n  /**\n   * Retrieves the timestamp field's value from a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to get the timestamp value from\n   * @returns {number}\n   */\n  static timestampFrom(snowflake) {\n    return Number(BigInt(snowflake) >> 22n) + EPOCH;\n  }\n\n  /**\n   * Discord's epoch value (2015-01-01T00:00:00.000Z).\n   * @type {number}\n   * @readonly\n   */\n  static get EPOCH() {\n    return EPOCH;\n  }\n}\n\nmodule.exports = SnowflakeUtil;\n"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,KAAK,GAAG,iBAAd;AACA,IAAIC,SAAS,GAAGC,MAAM,CAAC,CAAD,CAAtB;AAEA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4B,IAA5B,CAAiC;EAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;EACiB,OAARC,QAAQ,GAAyB;IAAA,IAAxBC,SAAwB,uEAAZC,IAAI,CAACC,GAAL,EAAY;IACtC,IAAIF,SAAS,YAAYC,IAAzB,EAA+BD,SAAS,GAAGA,SAAS,CAACG,OAAV,EAAZ;;IAC/B,IAAI,OAAOH,SAAP,KAAqB,QAArB,IAAiCI,KAAK,CAACJ,SAAD,CAA1C,EAAuD;MACrD,MAAM,IAAIK,SAAJ,CACH,mDAAkDD,KAAK,CAACJ,SAAD,CAAL,GAAmB,KAAnB,GAA2B,OAAOA,SAAU,GAD3F,CAAN;IAGD;;IACD,IAAIJ,SAAS,IAAI,KAAjB,EAAwBA,SAAS,GAAGC,MAAM,CAAC,CAAD,CAAlB,CAPc,CAStC;;IACA,OAAO,CAAEA,MAAM,CAACG,SAAS,GAAGL,KAAb,CAAN,IAA6B,GAA9B,GAAsC,MAAM,GAA5C,GAAmDC,SAAS,EAA7D,EAAiEU,QAAjE,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACoB,OAAXC,WAAW,CAACC,SAAD,EAAY;IAC5B,MAAMC,eAAe,GAAGZ,MAAM,CAACW,SAAD,CAA9B;IACA,OAAO;MACLR,SAAS,EAAEU,MAAM,CAACD,eAAe,IAAI,GAApB,CAAN,GAAiCd,KADvC;;MAEL,IAAIgB,IAAJ,GAAW;QACT,OAAO,IAAIV,IAAJ,CAAS,KAAKD,SAAd,CAAP;MACD,CAJI;;MAKLY,QAAQ,EAAEF,MAAM,CAAED,eAAe,IAAI,GAApB,GAA2B,QAA5B,CALX;MAMLI,SAAS,EAAEH,MAAM,CAAED,eAAe,IAAI,GAApB,GAA2B,QAA5B,CANZ;MAOLK,SAAS,EAAEJ,MAAM,CAACD,eAAe,GAAG,eAAnB,CAPZ;MAQLM,MAAM,EAAEN,eAAe,CAACH,QAAhB,CAAyB,CAAzB,EAA4BU,QAA5B,CAAqC,EAArC,EAAyC,GAAzC;IARH,CAAP;EAUD;EAED;AACF;AACA;AACA;AACA;;;EACsB,OAAbC,aAAa,CAACT,SAAD,EAAY;IAC9B,OAAOE,MAAM,CAACb,MAAM,CAACW,SAAD,CAAN,IAAqB,GAAtB,CAAN,GAAmCb,KAA1C;EACD;EAED;AACF;AACA;AACA;AACA;;;EACkB,WAALA,KAAK,GAAG;IACjB,OAAOA,KAAP;EACD;;AA/E8B;;AAkFjCuB,MAAM,CAACC,OAAP,GAAiBrB,aAAjB"},"metadata":{},"sourceType":"script"}