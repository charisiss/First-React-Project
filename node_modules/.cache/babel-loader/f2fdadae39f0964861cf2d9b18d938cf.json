{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  GuildScheduledEvent\n} = require('./GuildScheduledEvent');\n\nconst IntegrationApplication = require('./IntegrationApplication');\n\nconst InviteStageInstance = require('./InviteStageInstance');\n\nconst {\n  Error\n} = require('../errors');\n\nconst {\n  Endpoints\n} = require('../util/Constants');\n\nconst Permissions = require('../util/Permissions'); // TODO: Convert `inviter` and `channel` in this class to a getter.\n\n/**\n * Represents an invitation to a guild channel.\n * @extends {Base}\n */\n\n\nclass Invite extends Base {\n  constructor(client, data) {\n    super(client);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    const InviteGuild = require('./InviteGuild');\n    /**\n     * The guild the invite is for including welcome screen data if present\n     * @type {?(Guild|InviteGuild)}\n     */\n\n\n    this.guild ??= null;\n\n    if (data.guild) {\n      this.guild = this.client.guilds.resolve(data.guild.id) ?? new InviteGuild(this.client, data.guild);\n    }\n\n    if ('code' in data) {\n      /**\n       * The code for this invite\n       * @type {string}\n       */\n      this.code = data.code;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate number of online members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.presenceCount = data.approximate_presence_count;\n    } else {\n      this.presenceCount ??= null;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate total number of members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.memberCount = data.approximate_member_count;\n    } else {\n      this.memberCount ??= null;\n    }\n\n    if ('temporary' in data) {\n      /**\n       * Whether or not this invite only grants temporary membership\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?boolean}\n       */\n      this.temporary = data.temporary ?? null;\n    } else {\n      this.temporary ??= null;\n    }\n\n    if ('max_age' in data) {\n      /**\n       * The maximum age of the invite, in seconds, 0 if never expires\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxAge = data.max_age;\n    } else {\n      this.maxAge ??= null;\n    }\n\n    if ('uses' in data) {\n      /**\n       * How many times this invite has been used\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.uses = data.uses;\n    } else {\n      this.uses ??= null;\n    }\n\n    if ('max_uses' in data) {\n      /**\n       * The maximum uses of this invite\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxUses = data.max_uses;\n    } else {\n      this.maxUses ??= null;\n    }\n\n    if ('inviter_id' in data) {\n      /**\n       * The user's id who created this invite\n       * @type {?Snowflake}\n       */\n      this.inviterId = data.inviter_id;\n      this.inviter = this.client.users.resolve(data.inviter_id);\n    } else {\n      this.inviterId ??= null;\n    }\n\n    if ('inviter' in data) {\n      /**\n       * The user who created this invite\n       * @type {?User}\n       */\n      this.inviter ??= this.client.users._add(data.inviter);\n      this.inviterId = data.inviter.id;\n    } else {\n      this.inviter ??= null;\n    }\n\n    if ('target_user' in data) {\n      /**\n       * The user whose stream to display for this voice channel stream invite\n       * @type {?User}\n       */\n      this.targetUser = this.client.users._add(data.target_user);\n    } else {\n      this.targetUser ??= null;\n    }\n\n    if ('target_application' in data) {\n      /**\n       * The embedded application to open for this voice channel embedded application invite\n       * @type {?IntegrationApplication}\n       */\n      this.targetApplication = new IntegrationApplication(this.client, data.target_application);\n    } else {\n      this.targetApplication ??= null;\n    }\n    /**\n     * The type of the invite target:\n     * * 1: STREAM\n     * * 2: EMBEDDED_APPLICATION\n     * @typedef {number} TargetType\n     * @see {@link https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types}\n     */\n\n\n    if ('target_type' in data) {\n      /**\n       * The target type\n       * @type {?TargetType}\n       */\n      this.targetType = data.target_type;\n    } else {\n      this.targetType ??= null;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The channel's id this invite is for\n       * @type {Snowflake}\n       */\n      this.channelId = data.channel_id;\n      this.channel = this.client.channels.cache.get(data.channel_id);\n    }\n\n    if ('channel' in data) {\n      /**\n       * The channel this invite is for\n       * @type {Channel}\n       */\n      this.channel ??= this.client.channels._add(data.channel, this.guild, {\n        cache: false\n      });\n      this.channelId ??= data.channel.id;\n    }\n\n    if ('created_at' in data) {\n      /**\n       * The timestamp this invite was created at\n       * @type {?number}\n       */\n      this.createdTimestamp = new Date(data.created_at).getTime();\n    } else {\n      this.createdTimestamp ??= null;\n    }\n\n    if ('expires_at' in data) this._expiresTimestamp = new Date(data.expires_at).getTime();else this._expiresTimestamp ??= null;\n\n    if ('stage_instance' in data) {\n      /**\n       * The stage instance data if there is a public {@link StageInstance} in the stage channel this invite is for\n       * @type {?InviteStageInstance}\n       */\n      this.stageInstance = new InviteStageInstance(this.client, data.stage_instance, this.channel.id, this.guild.id);\n    } else {\n      this.stageInstance ??= null;\n    }\n\n    if ('guild_scheduled_event' in data) {\n      /**\n       * The guild scheduled event data if there is a {@link GuildScheduledEvent} in the channel this invite is for\n       * @type {?GuildScheduledEvent}\n       */\n      this.guildScheduledEvent = new GuildScheduledEvent(this.client, data.guild_scheduled_event);\n    } else {\n      this.guildScheduledEvent ??= null;\n    }\n  }\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return this.createdTimestamp ? new Date(this.createdTimestamp) : null;\n  }\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false) || guild.me.permissions.has(Permissions.FLAGS.MANAGE_GUILD);\n  }\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get expiresTimestamp() {\n    return this._expiresTimestamp ?? (this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1_000 : null);\n  }\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get expiresAt() {\n    const {\n      expiresTimestamp\n    } = this;\n    return expiresTimestamp ? new Date(expiresTimestamp) : null;\n  }\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n\n\n  get url() {\n    return Endpoints.invite(this.client.options.http.invite, this.code);\n  }\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n\n\n  async delete(reason) {\n    await this.client.api.invites[this.code].delete({\n      reason\n    });\n    return this;\n  }\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n\n\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelId',\n      inviter: 'inviterId',\n      guild: 'guildId'\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n\n}\n/**\n * Regular expression that globally matches Discord invite links\n * @type {RegExp}\n */\n\n\nInvite.INVITES_PATTERN = /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/gi;\nmodule.exports = Invite;","map":{"version":3,"names":["Base","require","GuildScheduledEvent","IntegrationApplication","InviteStageInstance","Error","Endpoints","Permissions","Invite","constructor","client","data","_patch","InviteGuild","guild","guilds","resolve","id","code","presenceCount","approximate_presence_count","memberCount","approximate_member_count","temporary","maxAge","max_age","uses","maxUses","max_uses","inviterId","inviter_id","inviter","users","_add","targetUser","target_user","targetApplication","target_application","targetType","target_type","channelId","channel_id","channel","channels","cache","get","createdTimestamp","Date","created_at","getTime","_expiresTimestamp","expires_at","stageInstance","stage_instance","guildScheduledEvent","guild_scheduled_event","createdAt","deletable","has","me","permissionsFor","user","FLAGS","MANAGE_CHANNELS","permissions","MANAGE_GUILD","expiresTimestamp","expiresAt","url","invite","options","http","delete","reason","api","invites","toString","toJSON","valueOf","INVITES_PATTERN","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/Invite.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { GuildScheduledEvent } = require('./GuildScheduledEvent');\nconst IntegrationApplication = require('./IntegrationApplication');\nconst InviteStageInstance = require('./InviteStageInstance');\nconst { Error } = require('../errors');\nconst { Endpoints } = require('../util/Constants');\nconst Permissions = require('../util/Permissions');\n\n// TODO: Convert `inviter` and `channel` in this class to a getter.\n\n/**\n * Represents an invitation to a guild channel.\n * @extends {Base}\n */\nclass Invite extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    const InviteGuild = require('./InviteGuild');\n    /**\n     * The guild the invite is for including welcome screen data if present\n     * @type {?(Guild|InviteGuild)}\n     */\n    this.guild ??= null;\n    if (data.guild) {\n      this.guild = this.client.guilds.resolve(data.guild.id) ?? new InviteGuild(this.client, data.guild);\n    }\n\n    if ('code' in data) {\n      /**\n       * The code for this invite\n       * @type {string}\n       */\n      this.code = data.code;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate number of online members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.presenceCount = data.approximate_presence_count;\n    } else {\n      this.presenceCount ??= null;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate total number of members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.memberCount = data.approximate_member_count;\n    } else {\n      this.memberCount ??= null;\n    }\n\n    if ('temporary' in data) {\n      /**\n       * Whether or not this invite only grants temporary membership\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?boolean}\n       */\n      this.temporary = data.temporary ?? null;\n    } else {\n      this.temporary ??= null;\n    }\n\n    if ('max_age' in data) {\n      /**\n       * The maximum age of the invite, in seconds, 0 if never expires\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxAge = data.max_age;\n    } else {\n      this.maxAge ??= null;\n    }\n\n    if ('uses' in data) {\n      /**\n       * How many times this invite has been used\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.uses = data.uses;\n    } else {\n      this.uses ??= null;\n    }\n\n    if ('max_uses' in data) {\n      /**\n       * The maximum uses of this invite\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxUses = data.max_uses;\n    } else {\n      this.maxUses ??= null;\n    }\n\n    if ('inviter_id' in data) {\n      /**\n       * The user's id who created this invite\n       * @type {?Snowflake}\n       */\n      this.inviterId = data.inviter_id;\n      this.inviter = this.client.users.resolve(data.inviter_id);\n    } else {\n      this.inviterId ??= null;\n    }\n\n    if ('inviter' in data) {\n      /**\n       * The user who created this invite\n       * @type {?User}\n       */\n      this.inviter ??= this.client.users._add(data.inviter);\n      this.inviterId = data.inviter.id;\n    } else {\n      this.inviter ??= null;\n    }\n\n    if ('target_user' in data) {\n      /**\n       * The user whose stream to display for this voice channel stream invite\n       * @type {?User}\n       */\n      this.targetUser = this.client.users._add(data.target_user);\n    } else {\n      this.targetUser ??= null;\n    }\n\n    if ('target_application' in data) {\n      /**\n       * The embedded application to open for this voice channel embedded application invite\n       * @type {?IntegrationApplication}\n       */\n      this.targetApplication = new IntegrationApplication(this.client, data.target_application);\n    } else {\n      this.targetApplication ??= null;\n    }\n\n    /**\n     * The type of the invite target:\n     * * 1: STREAM\n     * * 2: EMBEDDED_APPLICATION\n     * @typedef {number} TargetType\n     * @see {@link https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types}\n     */\n\n    if ('target_type' in data) {\n      /**\n       * The target type\n       * @type {?TargetType}\n       */\n      this.targetType = data.target_type;\n    } else {\n      this.targetType ??= null;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The channel's id this invite is for\n       * @type {Snowflake}\n       */\n      this.channelId = data.channel_id;\n      this.channel = this.client.channels.cache.get(data.channel_id);\n    }\n\n    if ('channel' in data) {\n      /**\n       * The channel this invite is for\n       * @type {Channel}\n       */\n      this.channel ??= this.client.channels._add(data.channel, this.guild, { cache: false });\n      this.channelId ??= data.channel.id;\n    }\n\n    if ('created_at' in data) {\n      /**\n       * The timestamp this invite was created at\n       * @type {?number}\n       */\n      this.createdTimestamp = new Date(data.created_at).getTime();\n    } else {\n      this.createdTimestamp ??= null;\n    }\n\n    if ('expires_at' in data) this._expiresTimestamp = new Date(data.expires_at).getTime();\n    else this._expiresTimestamp ??= null;\n\n    if ('stage_instance' in data) {\n      /**\n       * The stage instance data if there is a public {@link StageInstance} in the stage channel this invite is for\n       * @type {?InviteStageInstance}\n       */\n      this.stageInstance = new InviteStageInstance(this.client, data.stage_instance, this.channel.id, this.guild.id);\n    } else {\n      this.stageInstance ??= null;\n    }\n\n    if ('guild_scheduled_event' in data) {\n      /**\n       * The guild scheduled event data if there is a {@link GuildScheduledEvent} in the channel this invite is for\n       * @type {?GuildScheduledEvent}\n       */\n      this.guildScheduledEvent = new GuildScheduledEvent(this.client, data.guild_scheduled_event);\n    } else {\n      this.guildScheduledEvent ??= null;\n    }\n  }\n\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.createdTimestamp ? new Date(this.createdTimestamp) : null;\n  }\n\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return (\n      this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false) ||\n      guild.me.permissions.has(Permissions.FLAGS.MANAGE_GUILD)\n    );\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return (\n      this._expiresTimestamp ??\n      (this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1_000 : null)\n    );\n  }\n\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n  get expiresAt() {\n    const { expiresTimestamp } = this;\n    return expiresTimestamp ? new Date(expiresTimestamp) : null;\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Endpoints.invite(this.client.options.http.invite, this.code);\n  }\n\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n  async delete(reason) {\n    await this.client.api.invites[this.code].delete({ reason });\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelId',\n      inviter: 'inviterId',\n      guild: 'guildId',\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n}\n\n/**\n * Regular expression that globally matches Discord invite links\n * @type {RegExp}\n */\nInvite.INVITES_PATTERN = /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/gi;\n\nmodule.exports = Invite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}