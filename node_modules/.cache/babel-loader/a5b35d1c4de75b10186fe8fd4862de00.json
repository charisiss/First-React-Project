{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  Error,\n  TypeError\n} = require('../errors');\n/**\n * Represents the voice state for a Guild Member.\n */\n\n\nclass VoiceState extends Base {\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n    /**\n     * The id of the member of this voice state\n     * @type {Snowflake}\n     */\n\n    this.id = data.user_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('deaf' in data) {\n      /**\n       * Whether this member is deafened server-wide\n       * @type {?boolean}\n       */\n      this.serverDeaf = data.deaf;\n    } else {\n      this.serverDeaf ??= null;\n    }\n\n    if ('mute' in data) {\n      /**\n       * Whether this member is muted server-wide\n       * @type {?boolean}\n       */\n      this.serverMute = data.mute;\n    } else {\n      this.serverMute ??= null;\n    }\n\n    if ('self_deaf' in data) {\n      /**\n       * Whether this member is self-deafened\n       * @type {?boolean}\n       */\n      this.selfDeaf = data.self_deaf;\n    } else {\n      this.selfDeaf ??= null;\n    }\n\n    if ('self_mute' in data) {\n      /**\n       * Whether this member is self-muted\n       * @type {?boolean}\n       */\n      this.selfMute = data.self_mute;\n    } else {\n      this.selfMute ??= null;\n    }\n\n    if ('self_video' in data) {\n      /**\n       * Whether this member's camera is enabled\n       * @type {?boolean}\n       */\n      this.selfVideo = data.self_video;\n    } else {\n      this.selfVideo ??= null;\n    }\n\n    if ('session_id' in data) {\n      /**\n       * The session id for this member's connection\n       * @type {?string}\n       */\n      this.sessionId = data.session_id;\n    } else {\n      this.sessionId ??= null;\n    } // The self_stream is property is omitted if false, check for another property\n    // here to avoid incorrectly clearing this when partial data is specified\n\n\n    if ('self_video' in data) {\n      /**\n       * Whether this member is streaming using \"Screen Share\"\n       * @type {boolean}\n       */\n      this.streaming = data.self_stream ?? false;\n    } else {\n      this.streaming ??= null;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The {@link VoiceChannel} or {@link StageChannel} id the member is in\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n\n    if ('suppress' in data) {\n      /**\n       * Whether this member is suppressed from speaking. This property is specific to stage channels only.\n       * @type {boolean}\n       */\n      this.suppress = data.suppress;\n    }\n\n    if ('request_to_speak_timestamp' in data) {\n      /**\n       * The time at which the member requested to speak. This property is specific to stage channels only.\n       * @type {?number}\n       */\n      this.requestToSpeakTimestamp = new Date(data.request_to_speak_timestamp).getTime();\n    } else {\n      this.requestToSpeakTimestamp ??= null;\n    }\n\n    return this;\n  }\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n\n\n  get member() {\n    return this.guild.members.cache.get(this.id) ?? null;\n  }\n  /**\n   * The channel that the member is connected to\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n\n\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n\n\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n\n\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} [mute=true] Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  setMute() {\n    let mute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let reason = arguments.length > 1 ? arguments[1] : undefined;\n    return this.guild.members.edit(this.id, {\n      mute\n    }, reason);\n  }\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} [deaf=true] Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  setDeaf() {\n    let deaf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let reason = arguments.length > 1 ? arguments[1] : undefined;\n    return this.guild.members.edit(this.id, {\n      deaf\n    }, reason);\n  }\n  /**\n   * Disconnects the member from the channel.\n   * @param {string} [reason] Reason for disconnecting the member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  disconnect(reason) {\n    return this.setChannel(null, reason);\n  }\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {GuildVoiceChannelResolvable|null} channel Channel to move the member to, or `null` if you want to\n   * disconnect them from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  setChannel(channel, reason) {\n    return this.guild.members.edit(this.id, {\n      channel\n    }, reason);\n  }\n  /**\n   * Toggles the request to speak in the channel.\n   * Only applicable for stage channels and for the client's own voice state.\n   * @param {boolean} [request=true] Whether or not the client is requesting to become a speaker.\n   * @example\n   * // Making the client request to speak in a stage channel (raise its hand)\n   * guild.me.voice.setRequestToSpeak(true);\n   * @example\n   * // Making the client cancel a request to speak\n   * guild.me.voice.setRequestToSpeak(false);\n   * @returns {Promise<void>}\n   */\n\n\n  async setRequestToSpeak() {\n    let request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (this.channel?.type !== 'GUILD_STAGE_VOICE') throw new Error('VOICE_NOT_STAGE_CHANNEL');\n    if (this.client.user.id !== this.id) throw new Error('VOICE_STATE_NOT_OWN');\n    await this.client.api.guilds(this.guild.id, 'voice-states', '@me').patch({\n      data: {\n        channel_id: this.channelId,\n        request_to_speak_timestamp: request ? new Date().toISOString() : null\n      }\n    });\n  }\n  /**\n   * Suppress/unsuppress the user. Only applicable for stage channels.\n   * @param {boolean} [suppressed=true] Whether or not the user should be suppressed.\n   * @example\n   * // Making the client a speaker\n   * guild.me.voice.setSuppressed(false);\n   * @example\n   * // Making the client an audience member\n   * guild.me.voice.setSuppressed(true);\n   * @example\n   * // Inviting another user to speak\n   * voiceState.setSuppressed(false);\n   * @example\n   * // Moving another user to the audience, or cancelling their invite to speak\n   * voiceState.setSuppressed(true);\n   * @returns {Promise<void>}\n   */\n\n\n  async setSuppressed() {\n    let suppressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (typeof suppressed !== 'boolean') throw new TypeError('VOICE_STATE_INVALID_TYPE', 'suppressed');\n    if (this.channel?.type !== 'GUILD_STAGE_VOICE') throw new Error('VOICE_NOT_STAGE_CHANNEL');\n    const target = this.client.user.id === this.id ? '@me' : this.id;\n    await this.client.api.guilds(this.guild.id, 'voice-states', target).patch({\n      data: {\n        channel_id: this.channelId,\n        suppress: suppressed\n      }\n    });\n  }\n\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionId: true,\n      channelId: 'channel'\n    });\n  }\n\n}\n\nmodule.exports = VoiceState;","map":{"version":3,"names":["Base","require","Error","TypeError","VoiceState","constructor","guild","data","client","id","user_id","_patch","serverDeaf","deaf","serverMute","mute","selfDeaf","self_deaf","selfMute","self_mute","selfVideo","self_video","sessionId","session_id","streaming","self_stream","channelId","channel_id","suppress","requestToSpeakTimestamp","Date","request_to_speak_timestamp","getTime","member","members","cache","get","channel","channels","setMute","reason","edit","setDeaf","disconnect","setChannel","setRequestToSpeak","request","type","user","api","guilds","patch","toISOString","setSuppressed","suppressed","target","toJSON","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/VoiceState.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Error, TypeError } = require('../errors');\n\n/**\n * Represents the voice state for a Guild Member.\n */\nclass VoiceState extends Base {\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n    this.guild = guild;\n    /**\n     * The id of the member of this voice state\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('deaf' in data) {\n      /**\n       * Whether this member is deafened server-wide\n       * @type {?boolean}\n       */\n      this.serverDeaf = data.deaf;\n    } else {\n      this.serverDeaf ??= null;\n    }\n\n    if ('mute' in data) {\n      /**\n       * Whether this member is muted server-wide\n       * @type {?boolean}\n       */\n      this.serverMute = data.mute;\n    } else {\n      this.serverMute ??= null;\n    }\n\n    if ('self_deaf' in data) {\n      /**\n       * Whether this member is self-deafened\n       * @type {?boolean}\n       */\n      this.selfDeaf = data.self_deaf;\n    } else {\n      this.selfDeaf ??= null;\n    }\n\n    if ('self_mute' in data) {\n      /**\n       * Whether this member is self-muted\n       * @type {?boolean}\n       */\n      this.selfMute = data.self_mute;\n    } else {\n      this.selfMute ??= null;\n    }\n\n    if ('self_video' in data) {\n      /**\n       * Whether this member's camera is enabled\n       * @type {?boolean}\n       */\n      this.selfVideo = data.self_video;\n    } else {\n      this.selfVideo ??= null;\n    }\n\n    if ('session_id' in data) {\n      /**\n       * The session id for this member's connection\n       * @type {?string}\n       */\n      this.sessionId = data.session_id;\n    } else {\n      this.sessionId ??= null;\n    }\n\n    // The self_stream is property is omitted if false, check for another property\n    // here to avoid incorrectly clearing this when partial data is specified\n    if ('self_video' in data) {\n      /**\n       * Whether this member is streaming using \"Screen Share\"\n       * @type {boolean}\n       */\n      this.streaming = data.self_stream ?? false;\n    } else {\n      this.streaming ??= null;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The {@link VoiceChannel} or {@link StageChannel} id the member is in\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n\n    if ('suppress' in data) {\n      /**\n       * Whether this member is suppressed from speaking. This property is specific to stage channels only.\n       * @type {boolean}\n       */\n      this.suppress = data.suppress;\n    }\n\n    if ('request_to_speak_timestamp' in data) {\n      /**\n       * The time at which the member requested to speak. This property is specific to stage channels only.\n       * @type {?number}\n       */\n      this.requestToSpeakTimestamp = new Date(data.request_to_speak_timestamp).getTime();\n    } else {\n      this.requestToSpeakTimestamp ??= null;\n    }\n\n    return this;\n  }\n\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * The channel that the member is connected to\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} [mute=true] Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute = true, reason) {\n    return this.guild.members.edit(this.id, { mute }, reason);\n  }\n\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} [deaf=true] Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf = true, reason) {\n    return this.guild.members.edit(this.id, { deaf }, reason);\n  }\n\n  /**\n   * Disconnects the member from the channel.\n   * @param {string} [reason] Reason for disconnecting the member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n  disconnect(reason) {\n    return this.setChannel(null, reason);\n  }\n\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {GuildVoiceChannelResolvable|null} channel Channel to move the member to, or `null` if you want to\n   * disconnect them from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n  setChannel(channel, reason) {\n    return this.guild.members.edit(this.id, { channel }, reason);\n  }\n\n  /**\n   * Toggles the request to speak in the channel.\n   * Only applicable for stage channels and for the client's own voice state.\n   * @param {boolean} [request=true] Whether or not the client is requesting to become a speaker.\n   * @example\n   * // Making the client request to speak in a stage channel (raise its hand)\n   * guild.me.voice.setRequestToSpeak(true);\n   * @example\n   * // Making the client cancel a request to speak\n   * guild.me.voice.setRequestToSpeak(false);\n   * @returns {Promise<void>}\n   */\n  async setRequestToSpeak(request = true) {\n    if (this.channel?.type !== 'GUILD_STAGE_VOICE') throw new Error('VOICE_NOT_STAGE_CHANNEL');\n\n    if (this.client.user.id !== this.id) throw new Error('VOICE_STATE_NOT_OWN');\n\n    await this.client.api.guilds(this.guild.id, 'voice-states', '@me').patch({\n      data: {\n        channel_id: this.channelId,\n        request_to_speak_timestamp: request ? new Date().toISOString() : null,\n      },\n    });\n  }\n\n  /**\n   * Suppress/unsuppress the user. Only applicable for stage channels.\n   * @param {boolean} [suppressed=true] Whether or not the user should be suppressed.\n   * @example\n   * // Making the client a speaker\n   * guild.me.voice.setSuppressed(false);\n   * @example\n   * // Making the client an audience member\n   * guild.me.voice.setSuppressed(true);\n   * @example\n   * // Inviting another user to speak\n   * voiceState.setSuppressed(false);\n   * @example\n   * // Moving another user to the audience, or cancelling their invite to speak\n   * voiceState.setSuppressed(true);\n   * @returns {Promise<void>}\n   */\n  async setSuppressed(suppressed = true) {\n    if (typeof suppressed !== 'boolean') throw new TypeError('VOICE_STATE_INVALID_TYPE', 'suppressed');\n\n    if (this.channel?.type !== 'GUILD_STAGE_VOICE') throw new Error('VOICE_NOT_STAGE_CHANNEL');\n\n    const target = this.client.user.id === this.id ? '@me' : this.id;\n\n    await this.client.api.guilds(this.guild.id, 'voice-states', target).patch({\n      data: {\n        channel_id: this.channelId,\n        suppress: suppressed,\n      },\n    });\n  }\n\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionId: true,\n      channelId: 'channel',\n    });\n  }\n}\n\nmodule.exports = VoiceState;\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAM;EAAEC,KAAF;EAASC;AAAT,IAAuBF,OAAO,CAAC,WAAD,CAApC;AAEA;AACA;AACA;;;AACA,MAAMG,UAAN,SAAyBJ,IAAzB,CAA8B;EAC5BK,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAc;IACvB,MAAMD,KAAK,CAACE,MAAZ;IACA;AACJ;AACA;AACA;;IACI,KAAKF,KAAL,GAAaA,KAAb;IACA;AACJ;AACA;AACA;;IACI,KAAKG,EAAL,GAAUF,IAAI,CAACG,OAAf;;IACA,KAAKC,MAAL,CAAYJ,IAAZ;EACD;;EAEDI,MAAM,CAACJ,IAAD,EAAO;IACX,IAAI,UAAUA,IAAd,EAAoB;MAClB;AACN;AACA;AACA;MACM,KAAKK,UAAL,GAAkBL,IAAI,CAACM,IAAvB;IACD,CAND,MAMO;MACL,KAAKD,UAAL,KAAoB,IAApB;IACD;;IAED,IAAI,UAAUL,IAAd,EAAoB;MAClB;AACN;AACA;AACA;MACM,KAAKO,UAAL,GAAkBP,IAAI,CAACQ,IAAvB;IACD,CAND,MAMO;MACL,KAAKD,UAAL,KAAoB,IAApB;IACD;;IAED,IAAI,eAAeP,IAAnB,EAAyB;MACvB;AACN;AACA;AACA;MACM,KAAKS,QAAL,GAAgBT,IAAI,CAACU,SAArB;IACD,CAND,MAMO;MACL,KAAKD,QAAL,KAAkB,IAAlB;IACD;;IAED,IAAI,eAAeT,IAAnB,EAAyB;MACvB;AACN;AACA;AACA;MACM,KAAKW,QAAL,GAAgBX,IAAI,CAACY,SAArB;IACD,CAND,MAMO;MACL,KAAKD,QAAL,KAAkB,IAAlB;IACD;;IAED,IAAI,gBAAgBX,IAApB,EAA0B;MACxB;AACN;AACA;AACA;MACM,KAAKa,SAAL,GAAiBb,IAAI,CAACc,UAAtB;IACD,CAND,MAMO;MACL,KAAKD,SAAL,KAAmB,IAAnB;IACD;;IAED,IAAI,gBAAgBb,IAApB,EAA0B;MACxB;AACN;AACA;AACA;MACM,KAAKe,SAAL,GAAiBf,IAAI,CAACgB,UAAtB;IACD,CAND,MAMO;MACL,KAAKD,SAAL,KAAmB,IAAnB;IACD,CA3DU,CA6DX;IACA;;;IACA,IAAI,gBAAgBf,IAApB,EAA0B;MACxB;AACN;AACA;AACA;MACM,KAAKiB,SAAL,GAAiBjB,IAAI,CAACkB,WAAL,IAAoB,KAArC;IACD,CAND,MAMO;MACL,KAAKD,SAAL,KAAmB,IAAnB;IACD;;IAED,IAAI,gBAAgBjB,IAApB,EAA0B;MACxB;AACN;AACA;AACA;MACM,KAAKmB,SAAL,GAAiBnB,IAAI,CAACoB,UAAtB;IACD,CAND,MAMO;MACL,KAAKD,SAAL,KAAmB,IAAnB;IACD;;IAED,IAAI,cAAcnB,IAAlB,EAAwB;MACtB;AACN;AACA;AACA;MACM,KAAKqB,QAAL,GAAgBrB,IAAI,CAACqB,QAArB;IACD;;IAED,IAAI,gCAAgCrB,IAApC,EAA0C;MACxC;AACN;AACA;AACA;MACM,KAAKsB,uBAAL,GAA+B,IAAIC,IAAJ,CAASvB,IAAI,CAACwB,0BAAd,EAA0CC,OAA1C,EAA/B;IACD,CAND,MAMO;MACL,KAAKH,uBAAL,KAAiC,IAAjC;IACD;;IAED,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACY,IAANI,MAAM,GAAG;IACX,OAAO,KAAK3B,KAAL,CAAW4B,OAAX,CAAmBC,KAAnB,CAAyBC,GAAzB,CAA6B,KAAK3B,EAAlC,KAAyC,IAAhD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAP4B,OAAO,GAAG;IACZ,OAAO,KAAK/B,KAAL,CAAWgC,QAAX,CAAoBH,KAApB,CAA0BC,GAA1B,CAA8B,KAAKV,SAAnC,KAAiD,IAAxD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACU,IAAJb,IAAI,GAAG;IACT,OAAO,KAAKD,UAAL,IAAmB,KAAKI,QAA/B;EACD;EAED;AACF;AACA;AACA;AACA;;;EACU,IAAJD,IAAI,GAAG;IACT,OAAO,KAAKD,UAAL,IAAmB,KAAKI,QAA/B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEqB,OAAO,GAAsB;IAAA,IAArBxB,IAAqB,uEAAd,IAAc;IAAA,IAARyB,MAAQ;IAC3B,OAAO,KAAKlC,KAAL,CAAW4B,OAAX,CAAmBO,IAAnB,CAAwB,KAAKhC,EAA7B,EAAiC;MAAEM;IAAF,CAAjC,EAA2CyB,MAA3C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEE,OAAO,GAAsB;IAAA,IAArB7B,IAAqB,uEAAd,IAAc;IAAA,IAAR2B,MAAQ;IAC3B,OAAO,KAAKlC,KAAL,CAAW4B,OAAX,CAAmBO,IAAnB,CAAwB,KAAKhC,EAA7B,EAAiC;MAAEI;IAAF,CAAjC,EAA2C2B,MAA3C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEG,UAAU,CAACH,MAAD,EAAS;IACjB,OAAO,KAAKI,UAAL,CAAgB,IAAhB,EAAsBJ,MAAtB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEI,UAAU,CAACP,OAAD,EAAUG,MAAV,EAAkB;IAC1B,OAAO,KAAKlC,KAAL,CAAW4B,OAAX,CAAmBO,IAAnB,CAAwB,KAAKhC,EAA7B,EAAiC;MAAE4B;IAAF,CAAjC,EAA8CG,MAA9C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACyB,MAAjBK,iBAAiB,GAAiB;IAAA,IAAhBC,OAAgB,uEAAN,IAAM;IACtC,IAAI,KAAKT,OAAL,EAAcU,IAAd,KAAuB,mBAA3B,EAAgD,MAAM,IAAI7C,KAAJ,CAAU,yBAAV,CAAN;IAEhD,IAAI,KAAKM,MAAL,CAAYwC,IAAZ,CAAiBvC,EAAjB,KAAwB,KAAKA,EAAjC,EAAqC,MAAM,IAAIP,KAAJ,CAAU,qBAAV,CAAN;IAErC,MAAM,KAAKM,MAAL,CAAYyC,GAAZ,CAAgBC,MAAhB,CAAuB,KAAK5C,KAAL,CAAWG,EAAlC,EAAsC,cAAtC,EAAsD,KAAtD,EAA6D0C,KAA7D,CAAmE;MACvE5C,IAAI,EAAE;QACJoB,UAAU,EAAE,KAAKD,SADb;QAEJK,0BAA0B,EAAEe,OAAO,GAAG,IAAIhB,IAAJ,GAAWsB,WAAX,EAAH,GAA8B;MAF7D;IADiE,CAAnE,CAAN;EAMD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACqB,MAAbC,aAAa,GAAoB;IAAA,IAAnBC,UAAmB,uEAAN,IAAM;IACrC,IAAI,OAAOA,UAAP,KAAsB,SAA1B,EAAqC,MAAM,IAAInD,SAAJ,CAAc,0BAAd,EAA0C,YAA1C,CAAN;IAErC,IAAI,KAAKkC,OAAL,EAAcU,IAAd,KAAuB,mBAA3B,EAAgD,MAAM,IAAI7C,KAAJ,CAAU,yBAAV,CAAN;IAEhD,MAAMqD,MAAM,GAAG,KAAK/C,MAAL,CAAYwC,IAAZ,CAAiBvC,EAAjB,KAAwB,KAAKA,EAA7B,GAAkC,KAAlC,GAA0C,KAAKA,EAA9D;IAEA,MAAM,KAAKD,MAAL,CAAYyC,GAAZ,CAAgBC,MAAhB,CAAuB,KAAK5C,KAAL,CAAWG,EAAlC,EAAsC,cAAtC,EAAsD8C,MAAtD,EAA8DJ,KAA9D,CAAoE;MACxE5C,IAAI,EAAE;QACJoB,UAAU,EAAE,KAAKD,SADb;QAEJE,QAAQ,EAAE0B;MAFN;IADkE,CAApE,CAAN;EAMD;;EAEDE,MAAM,GAAG;IACP,OAAO,MAAMA,MAAN,CAAa;MAClB/C,EAAE,EAAE,IADc;MAElBG,UAAU,EAAE,IAFM;MAGlBE,UAAU,EAAE,IAHM;MAIlBE,QAAQ,EAAE,IAJQ;MAKlBE,QAAQ,EAAE,IALQ;MAMlBI,SAAS,EAAE,IANO;MAOlBI,SAAS,EAAE;IAPO,CAAb,CAAP;EASD;;AAvQ2B;;AA0Q9B+B,MAAM,CAACC,OAAP,GAAiBtD,UAAjB"},"metadata":{},"sourceType":"script"}