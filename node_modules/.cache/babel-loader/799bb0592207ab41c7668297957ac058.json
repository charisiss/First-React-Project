{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst {\n  setInterval\n} = require('node:timers');\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst BaseClient = require('./BaseClient');\n\nconst ActionsManager = require('./actions/ActionsManager');\n\nconst ClientVoiceManager = require('./voice/ClientVoiceManager');\n\nconst WebSocketManager = require('./websocket/WebSocketManager');\n\nconst {\n  Error,\n  TypeError,\n  RangeError\n} = require('../errors');\n\nconst BaseGuildEmojiManager = require('../managers/BaseGuildEmojiManager');\n\nconst ChannelManager = require('../managers/ChannelManager');\n\nconst GuildManager = require('../managers/GuildManager');\n\nconst UserManager = require('../managers/UserManager');\n\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\n\nconst ClientPresence = require('../structures/ClientPresence');\n\nconst GuildPreview = require('../structures/GuildPreview');\n\nconst GuildTemplate = require('../structures/GuildTemplate');\n\nconst Invite = require('../structures/Invite');\n\nconst {\n  Sticker\n} = require('../structures/Sticker');\n\nconst StickerPack = require('../structures/StickerPack');\n\nconst VoiceRegion = require('../structures/VoiceRegion');\n\nconst Webhook = require('../structures/Webhook');\n\nconst Widget = require('../structures/Widget');\n\nconst {\n  Events,\n  InviteScopes,\n  Status\n} = require('../util/Constants');\n\nconst DataResolver = require('../util/DataResolver');\n\nconst Intents = require('../util/Intents');\n\nconst Options = require('../util/Options');\n\nconst Permissions = require('../util/Permissions');\n\nconst Sweepers = require('../util/Sweepers');\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\n\n\nclass Client extends BaseClient {\n  /**\n   * @param {ClientOptions} options Options for the client\n   */\n  constructor(options) {\n    super(options);\n    const data = require('node:worker_threads').workerData ?? process.env;\n    const defaults = Options.createDefault();\n\n    if (this.options.shards === defaults.shards) {\n      if ('SHARDS' in data) {\n        this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n\n    if (this.options.shardCount === defaults.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(this.options.shards)) {\n        this.options.shardCount = this.options.shards.length;\n      }\n    }\n\n    const typeofShards = typeof this.options.shards;\n\n    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {\n      this.options.shards = Array.from({\n        length: this.options.shardCount\n      }, (_, i) => i);\n    }\n\n    if (typeofShards === 'number') this.options.shards = [this.options.shards];\n\n    if (Array.isArray(this.options.shards)) {\n      this.options.shards = [...new Set(this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)))];\n    }\n\n    this._validateOptions();\n    /**\n     * Functions called when a cache is garbage collected or the Client is destroyed\n     * @type {Set<Function>}\n     * @private\n     */\n\n\n    this._cleanups = new Set();\n    /**\n     * The finalizers used to cleanup items.\n     * @type {FinalizationRegistry}\n     * @private\n     */\n\n    this._finalizers = new FinalizationRegistry(this._finalize.bind(this));\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n\n    this.ws = new WebSocketManager(this);\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n\n    this.actions = new ActionsManager(this);\n    /**\n     * The voice manager of the client\n     * @type {ClientVoiceManager}\n     */\n\n    this.voice = new ClientVoiceManager(this);\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n\n    this.shard = process.env.SHARDING_MANAGER ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE) : null;\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their ids\n     * @type {UserManager}\n     */\n\n    this.users = new UserManager(this);\n    /**\n     * All of the guilds the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n\n    this.guilds = new GuildManager(this);\n    /**\n     * All of the {@link Channel}s that the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n\n    this.channels = new ChannelManager(this);\n    /**\n     * The sweeping functions and their intervals used to periodically sweep caches\n     * @type {Sweepers}\n     */\n\n    this.sweepers = new Sweepers(this, this.options.sweepers);\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n\n    this.presence = new ClientPresence(this, this.options.presence);\n    Object.defineProperty(this, 'token', {\n      writable: true\n    });\n\n    if (!this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot.\n       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.DISCORD_TOKEN;\n    } else {\n      this.token = null;\n    }\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n\n\n    this.user = null;\n    /**\n     * The application of this bot\n     * @type {?ClientApplication}\n     */\n\n    this.application = null;\n    /**\n     * Time at which the client was last regarded as being in the `READY` state\n     * (each time the client disconnects and successfully reconnects, this will be overwritten)\n     * @type {?Date}\n     */\n\n    this.readyAt = null;\n\n    if (this.options.messageSweepInterval > 0) {\n      process.emitWarning('The message sweeping client options are deprecated, use the global sweepers instead.', 'DeprecationWarning');\n      this.sweepMessageInterval = setInterval(this.sweepMessages.bind(this), this.options.messageSweepInterval * 1_000).unref();\n    }\n  }\n  /**\n   * All custom emojis that the client has access to, mapped by their ids\n   * @type {BaseGuildEmojiManager}\n   * @readonly\n   */\n\n\n  get emojis() {\n    const emojis = new BaseGuildEmojiManager(this);\n\n    for (const guild of this.guilds.cache.values()) {\n      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);\n    }\n\n    return emojis;\n  }\n  /**\n   * Timestamp of the time the client was last `READY` at\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get readyTimestamp() {\n    return this.readyAt?.getTime() ?? null;\n  }\n  /**\n   * How long it has been since the client last entered the `READY` state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get uptime() {\n    return this.readyAt ? Date.now() - this.readyAt : null;\n  }\n  /**\n   * Logs the client in, establishing a WebSocket connection to Discord.\n   * @param {string} [token=this.token] Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n\n\n  async login() {\n    let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.token;\n    if (!token || typeof token !== 'string') throw new Error('TOKEN_INVALID');\n    this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n    this.emit(Events.DEBUG, `Provided token: ${token.split('.').map((val, i) => i > 1 ? val.replace(/./g, '*') : val).join('.')}`);\n\n    if (this.options.presence) {\n      this.options.ws.presence = this.presence._parse(this.options.presence);\n    }\n\n    this.emit(Events.DEBUG, 'Preparing to connect to the gateway...');\n\n    try {\n      await this.ws.connect();\n      return this.token;\n    } catch (error) {\n      this.destroy();\n      throw error;\n    }\n  }\n  /**\n   * Returns whether the client has logged in, indicative of being able to access\n   * properties such as `user` and `application`.\n   * @returns {boolean}\n   */\n\n\n  isReady() {\n    return this.ws.status === Status.READY;\n  }\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {void}\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    for (const fn of this._cleanups) fn();\n\n    this._cleanups.clear();\n\n    if (this.sweepMessageInterval) clearInterval(this.sweepMessageInterval);\n    this.sweepers.destroy();\n    this.ws.destroy();\n    this.token = null;\n  }\n  /**\n   * Options used when fetching an invite from Discord.\n   * @typedef {Object} ClientFetchInviteOptions\n   * @property {Snowflake} [guildScheduledEventId] The id of the guild scheduled event to include with\n   * the invite\n   */\n\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @param {ClientFetchInviteOptions} [options] Options for fetching the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * client.fetchInvite('https://discord.gg/djs')\n   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchInvite(invite, options) {\n    const code = DataResolver.resolveInviteCode(invite);\n    const data = await this.api.invites(code).get({\n      query: {\n        with_counts: true,\n        with_expiration: true,\n        guild_scheduled_event_id: options?.guildScheduledEventId\n      }\n    });\n    return new Invite(this, data);\n  }\n  /**\n   * Obtains a template from Discord.\n   * @param {GuildTemplateResolvable} template Template code or URL\n   * @returns {Promise<GuildTemplate>}\n   * @example\n   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n   *   .then(template => console.log(`Obtained template with code: ${template.code}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchGuildTemplate(template) {\n    const code = DataResolver.resolveGuildTemplateCode(template);\n    const data = await this.api.guilds.templates(code).get();\n    return new GuildTemplate(this, data);\n  }\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id The webhook's id\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * client.fetchWebhook('id', 'token')\n   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchWebhook(id, token) {\n    const data = await this.api.webhooks(id, token).get();\n    return new Webhook(this, {\n      token,\n      ...data\n    });\n  }\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * client.fetchVoiceRegions()\n   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchVoiceRegions() {\n    const apiRegions = await this.api.voice.regions.get();\n    const regions = new Collection();\n\n    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));\n\n    return regions;\n  }\n  /**\n   * Obtains a sticker from Discord.\n   * @param {Snowflake} id The sticker's id\n   * @returns {Promise<Sticker>}\n   * @example\n   * client.fetchSticker('id')\n   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchSticker(id) {\n    const data = await this.api.stickers(id).get();\n    return new Sticker(this, data);\n  }\n  /**\n   * Obtains the list of sticker packs available to Nitro subscribers from Discord.\n   * @returns {Promise<Collection<Snowflake, StickerPack>>}\n   * @example\n   * client.fetchPremiumStickerPacks()\n   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchPremiumStickerPacks() {\n    const data = await this.api('sticker-packs').get();\n    return new Collection(data.sticker_packs.map(p => [p.id, new StickerPack(this, p)]));\n  }\n  /**\n   * A last ditch cleanup function for garbage collection.\n   * @param {Function} options.cleanup The function called to GC\n   * @param {string} [options.message] The message to send after a successful GC\n   * @param {string} [options.name] The name of the item being GCed\n   * @private\n   */\n\n\n  _finalize(_ref) {\n    let {\n      cleanup,\n      message,\n      name\n    } = _ref;\n\n    try {\n      cleanup();\n\n      this._cleanups.delete(cleanup);\n\n      if (message) {\n        this.emit(Events.DEBUG, message);\n      }\n    } catch {\n      this.emit(Events.DEBUG, `Garbage collection failed on ${name ?? 'an unknown item'}.`);\n    }\n  }\n  /**\n   * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\n   * If the message has been edited, the time of the edit is used rather than the time of the original message.\n   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)\n   * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}\n   * @returns {number} Amount of messages that were removed from the caches,\n   * or -1 if the message cache lifetime is unlimited\n   * @example\n   * // Remove all messages older than 1800 seconds from the messages cache\n   * const amount = client.sweepMessages(1800);\n   * console.log(`Successfully removed ${amount} messages from the cache.`);\n   */\n\n\n  sweepMessages() {\n    let lifetime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.messageCacheLifetime;\n\n    if (typeof lifetime !== 'number' || isNaN(lifetime)) {\n      throw new TypeError('INVALID_TYPE', 'lifetime', 'number');\n    }\n\n    if (lifetime <= 0) {\n      this.emit(Events.DEBUG, \"Didn't sweep messages - lifetime is unlimited\");\n      return -1;\n    }\n\n    const messages = this.sweepers.sweepMessages(Sweepers.outdatedMessageSweepFilter(lifetime)());\n    this.emit(Events.DEBUG, `Swept ${messages} messages older than ${lifetime} seconds`);\n    return messages;\n  }\n  /**\n   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.\n   * @param {GuildResolvable} guild The guild to fetch the preview for\n   * @returns {Promise<GuildPreview>}\n   */\n\n\n  async fetchGuildPreview(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    const data = await this.api.guilds(id).preview.get();\n    return new GuildPreview(this, data);\n  }\n  /**\n   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.\n   * @param {GuildResolvable} guild The guild to fetch the widget data for\n   * @returns {Promise<Widget>}\n   */\n\n\n  async fetchGuildWidget(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    const data = await this.api.guilds(id, 'widget.json').get();\n    return new Widget(this, data);\n  }\n  /**\n   * Options for {@link Client#generateInvite}.\n   * @typedef {Object} InviteGenerationOptions\n   * @property {InviteScope[]} scopes Scopes that should be requested\n   * @property {PermissionResolvable} [permissions] Permissions to request\n   * @property {GuildResolvable} [guild] Guild to preselect\n   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection\n   */\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * @param {InviteGenerationOptions} [options={}] Options for the invite\n   * @returns {string}\n   * @example\n   * const link = client.generateInvite({\n   *   scopes: ['applications.commands'],\n   * });\n   * console.log(`Generated application invite link: ${link}`);\n   * @example\n   * const link = client.generateInvite({\n   *   permissions: [\n   *     Permissions.FLAGS.SEND_MESSAGES,\n   *     Permissions.FLAGS.MANAGE_GUILD,\n   *     Permissions.FLAGS.MENTION_EVERYONE,\n   *   ],\n   *   scopes: ['bot'],\n   * });\n   * console.log(`Generated bot invite link: ${link}`);\n   */\n\n\n  generateInvite() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    if (!this.application) throw new Error('CLIENT_NOT_READY', 'generate an invite link');\n    const query = new URLSearchParams({\n      client_id: this.application.id\n    });\n    const {\n      scopes\n    } = options;\n\n    if (typeof scopes === 'undefined') {\n      throw new TypeError('INVITE_MISSING_SCOPES');\n    }\n\n    if (!Array.isArray(scopes)) {\n      throw new TypeError('INVALID_TYPE', 'scopes', 'Array of Invite Scopes', true);\n    }\n\n    if (!scopes.some(scope => ['bot', 'applications.commands'].includes(scope))) {\n      throw new TypeError('INVITE_MISSING_SCOPES');\n    }\n\n    const invalidScope = scopes.find(scope => !InviteScopes.includes(scope));\n\n    if (invalidScope) {\n      throw new TypeError('INVALID_ELEMENT', 'Array', 'scopes', invalidScope);\n    }\n\n    query.set('scope', scopes.join(' '));\n\n    if (options.permissions) {\n      const permissions = Permissions.resolve(options.permissions);\n      if (permissions) query.set('permissions', permissions);\n    }\n\n    if (options.disableGuildSelect) {\n      query.set('disable_guild_select', true);\n    }\n\n    if (options.guild) {\n      const guildId = this.guilds.resolveId(options.guild);\n      if (!guildId) throw new TypeError('INVALID_TYPE', 'options.guild', 'GuildResolvable');\n      query.set('guild_id', guildId);\n    }\n\n    return `${this.options.http.api}${this.api.oauth2.authorize}?${query}`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      readyAt: false\n    });\n  }\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n\n\n  _eval(script) {\n    return eval(script);\n  }\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n\n\n  _validateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;\n\n    if (typeof options.intents === 'undefined') {\n      throw new TypeError('CLIENT_MISSING_INTENTS');\n    } else {\n      options.intents = Intents.resolve(options.intents);\n    }\n\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shardCount', 'a number greater than or equal to 1');\n    }\n\n    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shards', \"'auto', a number or array of numbers\");\n    }\n\n    if (options.shards && !options.shards.length) throw new RangeError('CLIENT_INVALID_PROVIDED_SHARDS');\n\n    if (typeof options.makeCache !== 'function') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'makeCache', 'a function');\n    }\n\n    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'The messageCacheLifetime', 'a number');\n    }\n\n    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'messageSweepInterval', 'a number');\n    }\n\n    if (typeof options.sweepers !== 'object' || options.sweepers === null) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'sweepers', 'an object');\n    }\n\n    if (typeof options.invalidRequestWarningInterval !== 'number' || isNaN(options.invalidRequestWarningInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'invalidRequestWarningInterval', 'a number');\n    }\n\n    if (!Array.isArray(options.partials)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'partials', 'an Array');\n    }\n\n    if (typeof options.waitGuildTimeout !== 'number' || isNaN(options.waitGuildTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'waitGuildTimeout', 'a number');\n    }\n\n    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restWsBridgeTimeout', 'a number');\n    }\n\n    if (typeof options.restRequestTimeout !== 'number' || isNaN(options.restRequestTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restRequestTimeout', 'a number');\n    }\n\n    if (typeof options.restGlobalRateLimit !== 'number' || isNaN(options.restGlobalRateLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restGlobalRateLimit', 'a number');\n    }\n\n    if (typeof options.restSweepInterval !== 'number' || isNaN(options.restSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restSweepInterval', 'a number');\n    }\n\n    if (typeof options.retryLimit !== 'number' || isNaN(options.retryLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'retryLimit', 'a number');\n    }\n\n    if (typeof options.failIfNotExists !== 'boolean') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'failIfNotExists', 'a boolean');\n    }\n\n    if (!Array.isArray(options.userAgentSuffix)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'userAgentSuffix', 'an array of strings');\n    }\n\n    if (typeof options.rejectOnRateLimit !== 'undefined' && !(typeof options.rejectOnRateLimit === 'function' || Array.isArray(options.rejectOnRateLimit))) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'rejectOnRateLimit', 'an array or a function');\n    }\n  }\n\n}\n\nmodule.exports = Client;\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * @external Collection\n * @see {@link https://discord.js.org/#/docs/collection/main/class/Collection}\n */","map":{"version":3,"names":["process","require","setInterval","Collection","BaseClient","ActionsManager","ClientVoiceManager","WebSocketManager","Error","TypeError","RangeError","BaseGuildEmojiManager","ChannelManager","GuildManager","UserManager","ShardClientUtil","ClientPresence","GuildPreview","GuildTemplate","Invite","Sticker","StickerPack","VoiceRegion","Webhook","Widget","Events","InviteScopes","Status","DataResolver","Intents","Options","Permissions","Sweepers","Client","constructor","options","data","workerData","env","defaults","createDefault","shards","JSON","parse","SHARDS","shardCount","Number","SHARD_COUNT","Array","isArray","length","typeofShards","from","_","i","Set","filter","item","isNaN","Infinity","_validateOptions","_cleanups","_finalizers","FinalizationRegistry","_finalize","bind","ws","actions","voice","shard","SHARDING_MANAGER","singleton","SHARDING_MANAGER_MODE","users","guilds","channels","sweepers","presence","Object","defineProperty","writable","token","DISCORD_TOKEN","user","application","readyAt","messageSweepInterval","emitWarning","sweepMessageInterval","sweepMessages","unref","emojis","guild","cache","values","available","emoji","set","id","readyTimestamp","getTime","uptime","Date","now","login","replace","emit","DEBUG","split","map","val","join","_parse","connect","error","destroy","isReady","status","READY","fn","clear","clearInterval","fetchInvite","invite","code","resolveInviteCode","api","invites","get","query","with_counts","with_expiration","guild_scheduled_event_id","guildScheduledEventId","fetchGuildTemplate","template","resolveGuildTemplateCode","templates","fetchWebhook","webhooks","fetchVoiceRegions","apiRegions","regions","region","fetchSticker","stickers","fetchPremiumStickerPacks","sticker_packs","p","cleanup","message","name","delete","lifetime","messageCacheLifetime","messages","outdatedMessageSweepFilter","fetchGuildPreview","resolveId","preview","fetchGuildWidget","generateInvite","URLSearchParams","client_id","scopes","some","scope","includes","invalidScope","find","permissions","resolve","disableGuildSelect","guildId","http","oauth2","authorize","toJSON","_eval","script","eval","intents","makeCache","invalidRequestWarningInterval","partials","waitGuildTimeout","restWsBridgeTimeout","restRequestTimeout","restGlobalRateLimit","restSweepInterval","retryLimit","failIfNotExists","userAgentSuffix","rejectOnRateLimit","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/client/Client.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst { setInterval } = require('node:timers');\nconst { Collection } = require('@discordjs/collection');\nconst BaseClient = require('./BaseClient');\nconst ActionsManager = require('./actions/ActionsManager');\nconst ClientVoiceManager = require('./voice/ClientVoiceManager');\nconst WebSocketManager = require('./websocket/WebSocketManager');\nconst { Error, TypeError, RangeError } = require('../errors');\nconst BaseGuildEmojiManager = require('../managers/BaseGuildEmojiManager');\nconst ChannelManager = require('../managers/ChannelManager');\nconst GuildManager = require('../managers/GuildManager');\nconst UserManager = require('../managers/UserManager');\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\nconst ClientPresence = require('../structures/ClientPresence');\nconst GuildPreview = require('../structures/GuildPreview');\nconst GuildTemplate = require('../structures/GuildTemplate');\nconst Invite = require('../structures/Invite');\nconst { Sticker } = require('../structures/Sticker');\nconst StickerPack = require('../structures/StickerPack');\nconst VoiceRegion = require('../structures/VoiceRegion');\nconst Webhook = require('../structures/Webhook');\nconst Widget = require('../structures/Widget');\nconst { Events, InviteScopes, Status } = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\nconst Intents = require('../util/Intents');\nconst Options = require('../util/Options');\nconst Permissions = require('../util/Permissions');\nconst Sweepers = require('../util/Sweepers');\n\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\nclass Client extends BaseClient {\n  /**\n   * @param {ClientOptions} options Options for the client\n   */\n  constructor(options) {\n    super(options);\n\n    const data = require('node:worker_threads').workerData ?? process.env;\n    const defaults = Options.createDefault();\n\n    if (this.options.shards === defaults.shards) {\n      if ('SHARDS' in data) {\n        this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n\n    if (this.options.shardCount === defaults.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(this.options.shards)) {\n        this.options.shardCount = this.options.shards.length;\n      }\n    }\n\n    const typeofShards = typeof this.options.shards;\n\n    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {\n      this.options.shards = Array.from({ length: this.options.shardCount }, (_, i) => i);\n    }\n\n    if (typeofShards === 'number') this.options.shards = [this.options.shards];\n\n    if (Array.isArray(this.options.shards)) {\n      this.options.shards = [\n        ...new Set(\n          this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)),\n        ),\n      ];\n    }\n\n    this._validateOptions();\n\n    /**\n     * Functions called when a cache is garbage collected or the Client is destroyed\n     * @type {Set<Function>}\n     * @private\n     */\n    this._cleanups = new Set();\n\n    /**\n     * The finalizers used to cleanup items.\n     * @type {FinalizationRegistry}\n     * @private\n     */\n    this._finalizers = new FinalizationRegistry(this._finalize.bind(this));\n\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n    this.ws = new WebSocketManager(this);\n\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n    this.actions = new ActionsManager(this);\n\n    /**\n     * The voice manager of the client\n     * @type {ClientVoiceManager}\n     */\n    this.voice = new ClientVoiceManager(this);\n\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n    this.shard = process.env.SHARDING_MANAGER\n      ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE)\n      : null;\n\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their ids\n     * @type {UserManager}\n     */\n    this.users = new UserManager(this);\n\n    /**\n     * All of the guilds the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n    this.guilds = new GuildManager(this);\n\n    /**\n     * All of the {@link Channel}s that the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n    this.channels = new ChannelManager(this);\n\n    /**\n     * The sweeping functions and their intervals used to periodically sweep caches\n     * @type {Sweepers}\n     */\n    this.sweepers = new Sweepers(this, this.options.sweepers);\n\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n    this.presence = new ClientPresence(this, this.options.presence);\n\n    Object.defineProperty(this, 'token', { writable: true });\n    if (!this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot.\n       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.DISCORD_TOKEN;\n    } else {\n      this.token = null;\n    }\n\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n    this.user = null;\n\n    /**\n     * The application of this bot\n     * @type {?ClientApplication}\n     */\n    this.application = null;\n\n    /**\n     * Time at which the client was last regarded as being in the `READY` state\n     * (each time the client disconnects and successfully reconnects, this will be overwritten)\n     * @type {?Date}\n     */\n    this.readyAt = null;\n\n    if (this.options.messageSweepInterval > 0) {\n      process.emitWarning(\n        'The message sweeping client options are deprecated, use the global sweepers instead.',\n        'DeprecationWarning',\n      );\n      this.sweepMessageInterval = setInterval(\n        this.sweepMessages.bind(this),\n        this.options.messageSweepInterval * 1_000,\n      ).unref();\n    }\n  }\n\n  /**\n   * All custom emojis that the client has access to, mapped by their ids\n   * @type {BaseGuildEmojiManager}\n   * @readonly\n   */\n  get emojis() {\n    const emojis = new BaseGuildEmojiManager(this);\n    for (const guild of this.guilds.cache.values()) {\n      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);\n    }\n    return emojis;\n  }\n\n  /**\n   * Timestamp of the time the client was last `READY` at\n   * @type {?number}\n   * @readonly\n   */\n  get readyTimestamp() {\n    return this.readyAt?.getTime() ?? null;\n  }\n\n  /**\n   * How long it has been since the client last entered the `READY` state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n  get uptime() {\n    return this.readyAt ? Date.now() - this.readyAt : null;\n  }\n\n  /**\n   * Logs the client in, establishing a WebSocket connection to Discord.\n   * @param {string} [token=this.token] Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n  async login(token = this.token) {\n    if (!token || typeof token !== 'string') throw new Error('TOKEN_INVALID');\n    this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n    this.emit(\n      Events.DEBUG,\n      `Provided token: ${token\n        .split('.')\n        .map((val, i) => (i > 1 ? val.replace(/./g, '*') : val))\n        .join('.')}`,\n    );\n\n    if (this.options.presence) {\n      this.options.ws.presence = this.presence._parse(this.options.presence);\n    }\n\n    this.emit(Events.DEBUG, 'Preparing to connect to the gateway...');\n\n    try {\n      await this.ws.connect();\n      return this.token;\n    } catch (error) {\n      this.destroy();\n      throw error;\n    }\n  }\n\n  /**\n   * Returns whether the client has logged in, indicative of being able to access\n   * properties such as `user` and `application`.\n   * @returns {boolean}\n   */\n  isReady() {\n    return this.ws.status === Status.READY;\n  }\n\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {void}\n   */\n  destroy() {\n    super.destroy();\n\n    for (const fn of this._cleanups) fn();\n    this._cleanups.clear();\n\n    if (this.sweepMessageInterval) clearInterval(this.sweepMessageInterval);\n\n    this.sweepers.destroy();\n    this.ws.destroy();\n    this.token = null;\n  }\n\n  /**\n   * Options used when fetching an invite from Discord.\n   * @typedef {Object} ClientFetchInviteOptions\n   * @property {Snowflake} [guildScheduledEventId] The id of the guild scheduled event to include with\n   * the invite\n   */\n\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @param {ClientFetchInviteOptions} [options] Options for fetching the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * client.fetchInvite('https://discord.gg/djs')\n   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n   *   .catch(console.error);\n   */\n  async fetchInvite(invite, options) {\n    const code = DataResolver.resolveInviteCode(invite);\n    const data = await this.api.invites(code).get({\n      query: { with_counts: true, with_expiration: true, guild_scheduled_event_id: options?.guildScheduledEventId },\n    });\n    return new Invite(this, data);\n  }\n\n  /**\n   * Obtains a template from Discord.\n   * @param {GuildTemplateResolvable} template Template code or URL\n   * @returns {Promise<GuildTemplate>}\n   * @example\n   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n   *   .then(template => console.log(`Obtained template with code: ${template.code}`))\n   *   .catch(console.error);\n   */\n  async fetchGuildTemplate(template) {\n    const code = DataResolver.resolveGuildTemplateCode(template);\n    const data = await this.api.guilds.templates(code).get();\n    return new GuildTemplate(this, data);\n  }\n\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id The webhook's id\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * client.fetchWebhook('id', 'token')\n   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n   *   .catch(console.error);\n   */\n  async fetchWebhook(id, token) {\n    const data = await this.api.webhooks(id, token).get();\n    return new Webhook(this, { token, ...data });\n  }\n\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * client.fetchVoiceRegions()\n   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchVoiceRegions() {\n    const apiRegions = await this.api.voice.regions.get();\n    const regions = new Collection();\n    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));\n    return regions;\n  }\n\n  /**\n   * Obtains a sticker from Discord.\n   * @param {Snowflake} id The sticker's id\n   * @returns {Promise<Sticker>}\n   * @example\n   * client.fetchSticker('id')\n   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))\n   *   .catch(console.error);\n   */\n  async fetchSticker(id) {\n    const data = await this.api.stickers(id).get();\n    return new Sticker(this, data);\n  }\n\n  /**\n   * Obtains the list of sticker packs available to Nitro subscribers from Discord.\n   * @returns {Promise<Collection<Snowflake, StickerPack>>}\n   * @example\n   * client.fetchPremiumStickerPacks()\n   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchPremiumStickerPacks() {\n    const data = await this.api('sticker-packs').get();\n    return new Collection(data.sticker_packs.map(p => [p.id, new StickerPack(this, p)]));\n  }\n  /**\n   * A last ditch cleanup function for garbage collection.\n   * @param {Function} options.cleanup The function called to GC\n   * @param {string} [options.message] The message to send after a successful GC\n   * @param {string} [options.name] The name of the item being GCed\n   * @private\n   */\n  _finalize({ cleanup, message, name }) {\n    try {\n      cleanup();\n      this._cleanups.delete(cleanup);\n      if (message) {\n        this.emit(Events.DEBUG, message);\n      }\n    } catch {\n      this.emit(Events.DEBUG, `Garbage collection failed on ${name ?? 'an unknown item'}.`);\n    }\n  }\n\n  /**\n   * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\n   * If the message has been edited, the time of the edit is used rather than the time of the original message.\n   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)\n   * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}\n   * @returns {number} Amount of messages that were removed from the caches,\n   * or -1 if the message cache lifetime is unlimited\n   * @example\n   * // Remove all messages older than 1800 seconds from the messages cache\n   * const amount = client.sweepMessages(1800);\n   * console.log(`Successfully removed ${amount} messages from the cache.`);\n   */\n  sweepMessages(lifetime = this.options.messageCacheLifetime) {\n    if (typeof lifetime !== 'number' || isNaN(lifetime)) {\n      throw new TypeError('INVALID_TYPE', 'lifetime', 'number');\n    }\n    if (lifetime <= 0) {\n      this.emit(Events.DEBUG, \"Didn't sweep messages - lifetime is unlimited\");\n      return -1;\n    }\n\n    const messages = this.sweepers.sweepMessages(Sweepers.outdatedMessageSweepFilter(lifetime)());\n    this.emit(Events.DEBUG, `Swept ${messages} messages older than ${lifetime} seconds`);\n    return messages;\n  }\n\n  /**\n   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.\n   * @param {GuildResolvable} guild The guild to fetch the preview for\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchGuildPreview(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    const data = await this.api.guilds(id).preview.get();\n    return new GuildPreview(this, data);\n  }\n\n  /**\n   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.\n   * @param {GuildResolvable} guild The guild to fetch the widget data for\n   * @returns {Promise<Widget>}\n   */\n  async fetchGuildWidget(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    const data = await this.api.guilds(id, 'widget.json').get();\n    return new Widget(this, data);\n  }\n\n  /**\n   * Options for {@link Client#generateInvite}.\n   * @typedef {Object} InviteGenerationOptions\n   * @property {InviteScope[]} scopes Scopes that should be requested\n   * @property {PermissionResolvable} [permissions] Permissions to request\n   * @property {GuildResolvable} [guild] Guild to preselect\n   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection\n   */\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * @param {InviteGenerationOptions} [options={}] Options for the invite\n   * @returns {string}\n   * @example\n   * const link = client.generateInvite({\n   *   scopes: ['applications.commands'],\n   * });\n   * console.log(`Generated application invite link: ${link}`);\n   * @example\n   * const link = client.generateInvite({\n   *   permissions: [\n   *     Permissions.FLAGS.SEND_MESSAGES,\n   *     Permissions.FLAGS.MANAGE_GUILD,\n   *     Permissions.FLAGS.MENTION_EVERYONE,\n   *   ],\n   *   scopes: ['bot'],\n   * });\n   * console.log(`Generated bot invite link: ${link}`);\n   */\n  generateInvite(options = {}) {\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    if (!this.application) throw new Error('CLIENT_NOT_READY', 'generate an invite link');\n\n    const query = new URLSearchParams({\n      client_id: this.application.id,\n    });\n\n    const { scopes } = options;\n    if (typeof scopes === 'undefined') {\n      throw new TypeError('INVITE_MISSING_SCOPES');\n    }\n    if (!Array.isArray(scopes)) {\n      throw new TypeError('INVALID_TYPE', 'scopes', 'Array of Invite Scopes', true);\n    }\n    if (!scopes.some(scope => ['bot', 'applications.commands'].includes(scope))) {\n      throw new TypeError('INVITE_MISSING_SCOPES');\n    }\n    const invalidScope = scopes.find(scope => !InviteScopes.includes(scope));\n    if (invalidScope) {\n      throw new TypeError('INVALID_ELEMENT', 'Array', 'scopes', invalidScope);\n    }\n    query.set('scope', scopes.join(' '));\n\n    if (options.permissions) {\n      const permissions = Permissions.resolve(options.permissions);\n      if (permissions) query.set('permissions', permissions);\n    }\n\n    if (options.disableGuildSelect) {\n      query.set('disable_guild_select', true);\n    }\n\n    if (options.guild) {\n      const guildId = this.guilds.resolveId(options.guild);\n      if (!guildId) throw new TypeError('INVALID_TYPE', 'options.guild', 'GuildResolvable');\n      query.set('guild_id', guildId);\n    }\n\n    return `${this.options.http.api}${this.api.oauth2.authorize}?${query}`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      readyAt: false,\n    });\n  }\n\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n  _eval(script) {\n    return eval(script);\n  }\n\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n  _validateOptions(options = this.options) {\n    if (typeof options.intents === 'undefined') {\n      throw new TypeError('CLIENT_MISSING_INTENTS');\n    } else {\n      options.intents = Intents.resolve(options.intents);\n    }\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shardCount', 'a number greater than or equal to 1');\n    }\n    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shards', \"'auto', a number or array of numbers\");\n    }\n    if (options.shards && !options.shards.length) throw new RangeError('CLIENT_INVALID_PROVIDED_SHARDS');\n    if (typeof options.makeCache !== 'function') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'makeCache', 'a function');\n    }\n    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'The messageCacheLifetime', 'a number');\n    }\n    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'messageSweepInterval', 'a number');\n    }\n    if (typeof options.sweepers !== 'object' || options.sweepers === null) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'sweepers', 'an object');\n    }\n    if (typeof options.invalidRequestWarningInterval !== 'number' || isNaN(options.invalidRequestWarningInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'invalidRequestWarningInterval', 'a number');\n    }\n    if (!Array.isArray(options.partials)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'partials', 'an Array');\n    }\n    if (typeof options.waitGuildTimeout !== 'number' || isNaN(options.waitGuildTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'waitGuildTimeout', 'a number');\n    }\n    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restWsBridgeTimeout', 'a number');\n    }\n    if (typeof options.restRequestTimeout !== 'number' || isNaN(options.restRequestTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restRequestTimeout', 'a number');\n    }\n    if (typeof options.restGlobalRateLimit !== 'number' || isNaN(options.restGlobalRateLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restGlobalRateLimit', 'a number');\n    }\n    if (typeof options.restSweepInterval !== 'number' || isNaN(options.restSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restSweepInterval', 'a number');\n    }\n    if (typeof options.retryLimit !== 'number' || isNaN(options.retryLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'retryLimit', 'a number');\n    }\n    if (typeof options.failIfNotExists !== 'boolean') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'failIfNotExists', 'a boolean');\n    }\n    if (!Array.isArray(options.userAgentSuffix)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'userAgentSuffix', 'an array of strings');\n    }\n    if (\n      typeof options.rejectOnRateLimit !== 'undefined' &&\n      !(typeof options.rejectOnRateLimit === 'function' || Array.isArray(options.rejectOnRateLimit))\n    ) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'rejectOnRateLimit', 'an array or a function');\n    }\n  }\n}\n\nmodule.exports = Client;\n\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * @external Collection\n * @see {@link https://discord.js.org/#/docs/collection/main/class/Collection}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}