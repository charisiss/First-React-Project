{"ast":null,"code":"var G = Object.defineProperty;\nvar ge = Object.getOwnPropertyDescriptor;\n\nvar Pe = (t, e, i) => e in t ? G(t, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: i\n}) : t[e] = i;\n\nvar q = (t, e) => {\n  for (var i in e) G(t, i, {\n    get: e[i],\n    enumerable: !0\n  });\n};\n\nvar m = (t, e, i, o) => {\n  for (var p = o > 1 ? void 0 : o ? ge(e, i) : e, A = t.length - 1, y; A >= 0; A--) (y = t[A]) && (p = (o ? y(e, i, p) : y(p)) || p);\n\n  return o && p && G(e, i, p), p;\n};\n\nvar n = (t, e, i) => (Pe(t, typeof e != \"symbol\" ? e + \"\" : e, i), i);\n\nvar le = {};\nq(le, {\n  authorNamePredicate: () => z,\n  colorPredicate: () => W,\n  descriptionPredicate: () => j,\n  embedFieldPredicate: () => pe,\n  embedFieldsArrayPredicate: () => w,\n  fieldInlinePredicate: () => B,\n  fieldLengthPredicate: () => me,\n  fieldNamePredicate: () => O,\n  fieldValuePredicate: () => N,\n  footerTextPredicate: () => Z,\n  timestampPredicate: () => K,\n  titlePredicate: () => Q,\n  urlPredicate: () => u,\n  validateFieldLength: () => E\n});\nimport { z as l } from \"zod\";\nvar O = l.string().min(1).max(256),\n    N = l.string().min(1).max(1024),\n    B = l.boolean().optional(),\n    pe = l.object({\n  name: O,\n  value: N,\n  inline: B\n}),\n    w = pe.array(),\n    me = l.number().lte(25);\n\nfunction E(t, e) {\n  me.parse(t.length + e);\n}\n\nvar z = O.nullable(),\n    u = l.string().url().nullish(),\n    W = l.number().gte(0).lte(16777215).nullable(),\n    j = l.string().min(1).max(4096).nullable(),\n    Z = l.string().min(1).max(2048).nullable(),\n    K = l.union([l.number(), l.date()]).nullable(),\n    Q = O.nullable();\nvar k = class {\n  constructor() {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    n(this, \"fields\");\n    n(this, \"title\");\n    n(this, \"description\");\n    n(this, \"url\");\n    n(this, \"color\");\n    n(this, \"timestamp\");\n    n(this, \"thumbnail\");\n    n(this, \"image\");\n    n(this, \"video\");\n    n(this, \"author\");\n    n(this, \"provider\");\n    n(this, \"footer\");\n    this.title = e.title, this.description = e.description, this.url = e.url, this.color = e.color, this.thumbnail = e.thumbnail, this.image = e.image, this.video = e.video, this.author = e.author, this.provider = e.provider, this.footer = e.footer, this.fields = e.fields ?? [], e.timestamp && (this.timestamp = new Date(e.timestamp).toISOString());\n  }\n\n  get length() {\n    return (this.title?.length ?? 0) + (this.description?.length ?? 0) + this.fields.reduce((e, i) => e + i.name.length + i.value.length, 0) + (this.footer?.text.length ?? 0) + (this.author?.name.length ?? 0);\n  }\n\n  addField(e) {\n    return this.addFields(e);\n  }\n\n  addFields() {\n    for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n      e[_key] = arguments[_key];\n    }\n\n    return w.parse(e), E(this.fields, e.length), this.fields.push(...k.normalizeFields(...e)), this;\n  }\n\n  spliceFields(e, i) {\n    for (var _len2 = arguments.length, o = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      o[_key2 - 2] = arguments[_key2];\n    }\n\n    return w.parse(o), E(this.fields, o.length - i), this.fields.splice(e, i, ...k.normalizeFields(...o)), this;\n  }\n\n  setAuthor(e) {\n    if (e === null) return this.author = void 0, this;\n    let {\n      name: i,\n      iconURL: o,\n      url: p\n    } = e;\n    return z.parse(i), u.parse(o), u.parse(p), this.author = {\n      name: i,\n      url: p,\n      icon_url: o\n    }, this;\n  }\n\n  setColor(e) {\n    return W.parse(e), this.color = e ?? void 0, this;\n  }\n\n  setDescription(e) {\n    return j.parse(e), this.description = e ?? void 0, this;\n  }\n\n  setFooter(e) {\n    if (e === null) return this.footer = void 0, this;\n    let {\n      text: i,\n      iconURL: o\n    } = e;\n    return Z.parse(i), u.parse(o), this.footer = {\n      text: i,\n      icon_url: o\n    }, this;\n  }\n\n  setImage(e) {\n    return u.parse(e), this.image = e ? {\n      url: e\n    } : void 0, this;\n  }\n\n  setThumbnail(e) {\n    return u.parse(e), this.thumbnail = e ? {\n      url: e\n    } : void 0, this;\n  }\n\n  setTimestamp() {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    return K.parse(e), this.timestamp = e ? new Date(e).toISOString() : void 0, this;\n  }\n\n  setTitle(e) {\n    return Q.parse(e), this.title = e ?? void 0, this;\n  }\n\n  setURL(e) {\n    return u.parse(e), this.url = e ?? void 0, this;\n  }\n\n  toJSON() {\n    return { ...this\n    };\n  }\n\n  static normalizeFields() {\n    for (var _len3 = arguments.length, e = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      e[_key3] = arguments[_key3];\n    }\n\n    return e.flat(1 / 0).map(i => (O.parse(i.name), N.parse(i.value), B.parse(i.inline), {\n      name: i.name,\n      value: i.value,\n      inline: i.inline ?? void 0\n    }));\n  }\n\n};\n\nfunction tt(t, e) {\n  return typeof e == \"undefined\" ? `\\`\\`\\`\n${t}\\`\\`\\`` : `\\`\\`\\`${t}\n${e}\\`\\`\\``;\n}\n\nfunction it(t) {\n  return `\\`${t}\\``;\n}\n\nfunction nt(t) {\n  return `_${t}_`;\n}\n\nfunction ot(t) {\n  return `**${t}**`;\n}\n\nfunction rt(t) {\n  return `__${t}__`;\n}\n\nfunction at(t) {\n  return `~~${t}~~`;\n}\n\nfunction st(t) {\n  return `> ${t}`;\n}\n\nfunction pt(t) {\n  return `>>> ${t}`;\n}\n\nfunction mt(t) {\n  return `<${t}>`;\n}\n\nfunction lt(t, e, i) {\n  return i ? `[${t}](${e} \"${i}\")` : `[${t}](${e})`;\n}\n\nfunction dt(t) {\n  return `||${t}||`;\n}\n\nfunction ct(t) {\n  return `<@${t}>`;\n}\n\nfunction ut(t) {\n  return `<@!${t}>`;\n}\n\nfunction ht(t) {\n  return `<#${t}>`;\n}\n\nfunction Ct(t) {\n  return `<@&${t}>`;\n}\n\nfunction ft(t) {\n  let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  return `<${e ? \"a\" : \"\"}:_:${t}>`;\n}\n\nfunction bt(t, e) {\n  return typeof t != \"number\" && (t = Math.floor((t?.getTime() ?? Date.now()) / 1e3)), typeof e == \"string\" ? `<t:${t}:${e}>` : `<t:${t}>`;\n}\n\nvar xt = {\n  ShortTime: \"t\",\n  LongTime: \"T\",\n  ShortDate: \"d\",\n  LongDate: \"D\",\n  ShortDateTime: \"f\",\n  LongDateTime: \"F\",\n  RelativeTime: \"R\"\n},\n    Te = (o => (o.Shrug = \"\\xAF\\\\_(\\u30C4)\\\\_/\\xAF\", o.Tableflip = \"(\\u256F\\xB0\\u25A1\\xB0\\uFF09\\u256F\\uFE35 \\u253B\\u2501\\u253B\", o.Unflip = \"\\u252C\\u2500\\u252C \\u30CE( \\u309C-\\u309C\\u30CE)\", o))(Te || {});\n\nvar ue = {};\nq(ue, {\n  assertReturnOfBuilder: () => C,\n  validateDefaultPermission: () => X,\n  validateDescription: () => V,\n  validateMaxChoicesLength: () => Y,\n  validateMaxOptionsLength: () => d,\n  validateName: () => L,\n  validateRequired: () => U,\n  validateRequiredParameters: () => h\n});\nimport H from \"@sindresorhus/is\";\nimport { z as _ } from \"zod\";\n\nfunction h(t, e, i) {\n  L(t), V(e), d(i);\n}\n\nvar Ie = _.string().min(1).max(32).regex(/^[\\P{Lu}\\p{N}_-]+$/u);\n\nfunction L(t) {\n  Ie.parse(t);\n}\n\nvar $e = _.string().min(1).max(100);\n\nfunction V(t) {\n  $e.parse(t);\n}\n\nvar de = _.boolean();\n\nfunction X(t) {\n  de.parse(t);\n}\n\nfunction U(t) {\n  de.parse(t);\n}\n\nvar ce = _.unknown().array().max(25);\n\nfunction d(t) {\n  ce.parse(t);\n}\n\nfunction Y(t) {\n  ce.parse(t);\n}\n\nfunction C(t, e) {\n  let i = e.name;\n  if (H.nullOrUndefined(t)) throw new TypeError(`Expected to receive a ${i} builder, got ${t === null ? \"null\" : \"undefined\"} instead.`);\n  if (H.primitive(t)) throw new TypeError(`Expected to receive a ${i} builder, got a primitive (${typeof t}) instead.`);\n\n  if (!(t instanceof e)) {\n    let o = t,\n        p = H.function_(t) ? t.name : o.constructor.name,\n        A = Reflect.get(o, Symbol.toStringTag),\n        y = A ? `${p} [${A}]` : p;\n    throw new TypeError(`Expected to receive a ${i} builder, got ${y} instead.`);\n  }\n}\n\nimport { mix as We } from \"ts-mixer\";\nimport { ApplicationCommandOptionType as Re } from \"discord-api-types/v9\";\nvar f = class {\n  constructor() {\n    n(this, \"name\");\n    n(this, \"description\");\n  }\n\n  setName(e) {\n    return L(e), Reflect.set(this, \"name\", e), this;\n  }\n\n  setDescription(e) {\n    return V(e), Reflect.set(this, \"description\", e), this;\n  }\n\n};\nvar s = class extends f {\n  constructor() {\n    super(...arguments);\n    n(this, \"required\", !1);\n  }\n\n  setRequired(e) {\n    return U(e), Reflect.set(this, \"required\", e), this;\n  }\n\n  runRequiredValidations() {\n    h(this.name, this.description, []), U(this.required);\n  }\n\n};\nvar ee = class extends s {\n  constructor() {\n    super(...arguments);\n    n(this, \"type\", Re.Boolean);\n  }\n\n  toJSON() {\n    return this.runRequiredValidations(), { ...this\n    };\n  }\n\n};\nimport { ApplicationCommandOptionType as Ne } from \"discord-api-types/v9\";\nimport { mix as Be } from \"ts-mixer\";\nimport { ChannelType as c } from \"discord-api-types/v9\";\nimport { z as he } from \"zod\";\nvar Me = [c.GuildText, c.GuildVoice, c.GuildCategory, c.GuildNews, c.GuildStore, c.GuildNewsThread, c.GuildPublicThread, c.GuildPrivateThread, c.GuildStageVoice],\n    ve = he.union(Me.map(t => he.literal(t))),\n    te = class {\n  constructor() {\n    n(this, \"channel_types\");\n  }\n\n  addChannelType(e) {\n    return this.channel_types === void 0 && Reflect.set(this, \"channel_types\", []), ve.parse(e), this.channel_types.push(e), this;\n  }\n\n  addChannelTypes(e) {\n    return e.forEach(i => this.addChannelType(i)), this;\n  }\n\n};\nvar g = class extends s {\n  constructor() {\n    super(...arguments);\n    n(this, \"type\", Ne.Channel);\n  }\n\n  toJSON() {\n    return this.runRequiredValidations(), { ...this\n    };\n  }\n\n};\ng = m([Be(te)], g);\nimport { ApplicationCommandOptionType as ke } from \"discord-api-types/v9\";\nimport { mix as _e } from \"ts-mixer\";\nimport { z as Le } from \"zod\";\nvar P = class {\n  constructor() {\n    n(this, \"maxValue\");\n    n(this, \"minValue\");\n  }\n\n};\nimport { ApplicationCommandOptionType as we } from \"discord-api-types/v9\";\nimport { z as T } from \"zod\";\nvar D = T.string().min(1).max(100),\n    Ce = T.number().gt(-1 / 0).lt(1 / 0),\n    fe = T.tuple([D, T.union([D, Ce])]).array(),\n    Ee = T.boolean(),\n    x = class {\n  constructor() {\n    n(this, \"choices\");\n    n(this, \"autocomplete\");\n    n(this, \"type\");\n  }\n\n  addChoice(e, i) {\n    if (this.autocomplete) throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    return this.choices === void 0 && Reflect.set(this, \"choices\", []), Y(this.choices), D.parse(e), this.type === we.String ? D.parse(i) : Ce.parse(i), this.choices.push({\n      name: e,\n      value: i\n    }), this;\n  }\n\n  addChoices(e) {\n    if (this.autocomplete) throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    fe.parse(e);\n\n    for (let [i, o] of e) this.addChoice(i, o);\n\n    return this;\n  }\n\n  setChoices(e) {\n    if (e.length > 0 && this.autocomplete) throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    fe.parse(e), Reflect.set(this, \"choices\", []);\n\n    for (let [i, o] of e) this.addChoice(i, o);\n\n    return this;\n  }\n\n  setAutocomplete(e) {\n    if (Ee.parse(e), e && Array.isArray(this.choices) && this.choices.length > 0) throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    return Reflect.set(this, \"autocomplete\", e), this;\n  }\n\n};\nvar be = Le.number().int().nonnegative(),\n    I = class extends s {\n  constructor() {\n    super(...arguments);\n    n(this, \"type\", ke.Integer);\n  }\n\n  setMaxValue(e) {\n    return be.parse(e), Reflect.set(this, \"maxValue\", e), this;\n  }\n\n  setMinValue(e) {\n    return be.parse(e), Reflect.set(this, \"minValue\", e), this;\n  }\n\n  toJSON() {\n    if (this.runRequiredValidations(), this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    return { ...this\n    };\n  }\n\n};\nI = m([_e(P, x)], I);\nimport { ApplicationCommandOptionType as Ve } from \"discord-api-types/v9\";\nvar ie = class extends s {\n  constructor() {\n    super(...arguments);\n    n(this, \"type\", Ve.Mentionable);\n  }\n\n  toJSON() {\n    return this.runRequiredValidations(), { ...this\n    };\n  }\n\n};\nimport { ApplicationCommandOptionType as Ue } from \"discord-api-types/v9\";\nimport { mix as De } from \"ts-mixer\";\nimport { z as Fe } from \"zod\";\nvar xe = Fe.number().nonnegative(),\n    $ = class extends s {\n  constructor() {\n    super(...arguments);\n    n(this, \"type\", Ue.Number);\n  }\n\n  setMaxValue(e) {\n    return xe.parse(e), Reflect.set(this, \"maxValue\", e), this;\n  }\n\n  setMinValue(e) {\n    return xe.parse(e), Reflect.set(this, \"minValue\", e), this;\n  }\n\n  toJSON() {\n    if (this.runRequiredValidations(), this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    return { ...this\n    };\n  }\n\n};\n$ = m([De(P, x)], $);\nimport { ApplicationCommandOptionType as Je } from \"discord-api-types/v9\";\nvar ne = class extends s {\n  constructor() {\n    super(...arguments);\n    n(this, \"type\", Je.Role);\n  }\n\n  toJSON() {\n    return this.runRequiredValidations(), { ...this\n    };\n  }\n\n};\nimport { ApplicationCommandOptionType as Ge } from \"discord-api-types/v9\";\nimport { mix as qe } from \"ts-mixer\";\nvar R = class extends s {\n  constructor() {\n    super(...arguments);\n    n(this, \"type\", Ge.String);\n  }\n\n  toJSON() {\n    if (this.runRequiredValidations(), this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    return { ...this\n    };\n  }\n\n};\nR = m([qe(x)], R);\nimport { ApplicationCommandOptionType as ze } from \"discord-api-types/v9\";\nvar oe = class extends s {\n  constructor() {\n    super(...arguments);\n    n(this, \"type\", ze.User);\n  }\n\n  toJSON() {\n    return this.runRequiredValidations(), { ...this\n    };\n  }\n\n};\nvar M = class {\n  constructor() {\n    n(this, \"options\");\n  }\n\n  addBooleanOption(e) {\n    return this._sharedAddOptionMethod(e, ee);\n  }\n\n  addUserOption(e) {\n    return this._sharedAddOptionMethod(e, oe);\n  }\n\n  addChannelOption(e) {\n    return this._sharedAddOptionMethod(e, g);\n  }\n\n  addRoleOption(e) {\n    return this._sharedAddOptionMethod(e, ne);\n  }\n\n  addMentionableOption(e) {\n    return this._sharedAddOptionMethod(e, ie);\n  }\n\n  addStringOption(e) {\n    return this._sharedAddOptionMethod(e, R);\n  }\n\n  addIntegerOption(e) {\n    return this._sharedAddOptionMethod(e, I);\n  }\n\n  addNumberOption(e) {\n    return this._sharedAddOptionMethod(e, $);\n  }\n\n  _sharedAddOptionMethod(e, i) {\n    let {\n      options: o\n    } = this;\n    d(o);\n    let p = typeof e == \"function\" ? e(new i()) : e;\n    return C(p, i), o.push(p), this;\n  }\n\n};\nimport { ApplicationCommandOptionType as Ae } from \"discord-api-types/v9\";\nimport { mix as Oe } from \"ts-mixer\";\nvar S = class {\n  constructor() {\n    n(this, \"name\");\n    n(this, \"description\");\n    n(this, \"options\", []);\n  }\n\n  addSubcommand(e) {\n    let {\n      options: i\n    } = this;\n    d(i);\n    let o = typeof e == \"function\" ? e(new b()) : e;\n    return C(o, b), i.push(o), this;\n  }\n\n  toJSON() {\n    return h(this.name, this.description, this.options), {\n      type: Ae.SubcommandGroup,\n      name: this.name,\n      description: this.description,\n      options: this.options.map(e => e.toJSON())\n    };\n  }\n\n};\nS = m([Oe(f)], S);\nvar b = class {\n  constructor() {\n    n(this, \"name\");\n    n(this, \"description\");\n    n(this, \"options\", []);\n  }\n\n  toJSON() {\n    return h(this.name, this.description, this.options), {\n      type: Ae.Subcommand,\n      name: this.name,\n      description: this.description,\n      options: this.options.map(e => e.toJSON())\n    };\n  }\n\n};\nb = m([Oe(f, M)], b);\nvar re = class {\n  constructor() {\n    n(this, \"name\");\n    n(this, \"description\");\n    n(this, \"options\", []);\n    n(this, \"defaultPermission\");\n  }\n\n  toJSON() {\n    return h(this.name, this.description, this.options), {\n      name: this.name,\n      description: this.description,\n      options: this.options.map(e => e.toJSON()),\n      default_permission: this.defaultPermission\n    };\n  }\n\n  setDefaultPermission(e) {\n    return X(e), Reflect.set(this, \"defaultPermission\", e), this;\n  }\n\n  addSubcommandGroup(e) {\n    let {\n      options: i\n    } = this;\n    d(i);\n    let o = typeof e == \"function\" ? e(new S()) : e;\n    return C(o, S), i.push(o), this;\n  }\n\n  addSubcommand(e) {\n    let {\n      options: i\n    } = this;\n    d(i);\n    let o = typeof e == \"function\" ? e(new b()) : e;\n    return C(o, b), i.push(o), this;\n  }\n\n};\nre = m([We(M, f)], re);\nvar ye = {};\nq(ye, {\n  validateDefaultPermission: () => se,\n  validateName: () => F,\n  validateRequiredParameters: () => ae,\n  validateType: () => J\n});\nimport { z as v } from \"zod\";\nimport { ApplicationCommandType as Se } from \"discord-api-types/v9\";\n\nfunction ae(t, e) {\n  F(t), J(e);\n}\n\nvar je = v.string().min(1).max(32).regex(/^( *[\\p{L}\\p{N}_-]+ *)+$/u);\n\nfunction F(t) {\n  je.parse(t);\n}\n\nvar Ze = v.union([v.literal(Se.User), v.literal(Se.Message)]);\n\nfunction J(t) {\n  Ze.parse(t);\n}\n\nvar Ke = v.boolean();\n\nfunction se(t) {\n  Ke.parse(t);\n}\n\nvar Qe = class {\n  constructor() {\n    n(this, \"name\");\n    n(this, \"type\");\n    n(this, \"defaultPermission\");\n  }\n\n  setName(e) {\n    return F(e), Reflect.set(this, \"name\", e), this;\n  }\n\n  setType(e) {\n    return J(e), Reflect.set(this, \"type\", e), this;\n  }\n\n  setDefaultPermission(e) {\n    return se(e), Reflect.set(this, \"defaultPermission\", e), this;\n  }\n\n  toJSON() {\n    return ae(this.name, this.type), {\n      name: this.name,\n      type: this.type,\n      default_permission: this.defaultPermission\n    };\n  }\n\n};\nexport { ye as ContextMenuCommandAssertions, Qe as ContextMenuCommandBuilder, k as Embed, le as EmbedAssertions, Te as Faces, ue as SlashCommandAssertions, ee as SlashCommandBooleanOption, re as SlashCommandBuilder, g as SlashCommandChannelOption, I as SlashCommandIntegerOption, ie as SlashCommandMentionableOption, $ as SlashCommandNumberOption, ne as SlashCommandRoleOption, R as SlashCommandStringOption, b as SlashCommandSubcommandBuilder, S as SlashCommandSubcommandGroupBuilder, oe as SlashCommandUserOption, xt as TimestampStyles, pt as blockQuote, ot as bold, ht as channelMention, tt as codeBlock, ft as formatEmoji, mt as hideLinkEmbed, lt as hyperlink, it as inlineCode, nt as italic, ut as memberNicknameMention, st as quote, Ct as roleMention, dt as spoiler, at as strikethrough, bt as time, rt as underscore, ct as userMention };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAA;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;AACA;AAEO,IAAMC,IAAqBC,EAAEC,MAAF,GAAWC,GAAX,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,GAAtB,CAA3B;AAAA,IAEMC,IAAsBJ,EAAEC,MAAF,GAAWC,GAAX,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,IAAtB,CAF5B;AAAA,IAIME,IAAuBL,EAAEM,OAAF,GAAYC,QAAZ,EAJ7B;AAAA,IAMMC,KAAsBR,EAAES,MAAF,CAAS;EAC3CC,MAAMX,CADqC;EAE3CY,OAAOP,CAFoC;EAG3CQ,QAAQP;AAHmC,CAAT,CAN5B;AAAA,IAYMQ,IAA4BL,GAAoBM,KAApB,EAZlC;AAAA,IAcMC,KAAuBf,EAAEgB,MAAF,GAAWC,GAAX,CAAe,EAAf,CAd7B;;AAgBA,WAA6BC,CAA7B,EAAsDC,CAAtD,EAAkF;EACxFJ,GAAqBK,KAArB,CAA2BF,EAAOG,MAAP,GAAgBF,CAA3C;AAGM;;AAAA,IAAMG,IAAsBvB,EAAmBwB,QAAnB,EAA5B;AAAA,IAEMC,IAAexB,EAAEC,MAAF,GAAWwB,GAAX,GAAiBC,OAAjB,EAFrB;AAAA,IAIMC,IAAiB3B,EAAEgB,MAAF,GAAWY,GAAX,CAAe,CAAf,EAAkBX,GAAlB,CAAsB,QAAtB,EAAgCM,QAAhC,EAJvB;AAAA,IAMMM,IAAuB7B,EAAEC,MAAF,GAAWC,GAAX,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,IAAtB,EAA4BoB,QAA5B,EAN7B;AAAA,IAQMO,IAAsB9B,EAAEC,MAAF,GAAWC,GAAX,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,IAAtB,EAA4BoB,QAA5B,EAR5B;AAAA,IAUMQ,IAAqB/B,EAAEgC,KAAF,CAAQ,CAAChC,EAAEgB,MAAF,EAAD,EAAahB,EAAEiC,IAAF,EAAb,CAAR,EAAgCV,QAAhC,EAV3B;AAAA,IAYMW,IAAiBnC,EAAmBwB,QAAnB,EAZvB;ACgBA,cAAgC;EA6D/BY,cAAiC;IAAA,IAArBhB,CAAqB,uEAAJ,EAAI;IAzDjCiB;IAKAA;IAKAA;IAKAA;IAKAA;IAKAA;IAKAA;IAKAA;IAKAA;IAKAA;IAKAA;IAKAA;IAGN,KAAKC,KAAL,GAAalB,EAAKkB,KAAlB,EACA,KAAKC,WAAL,GAAmBnB,EAAKmB,WADxB,EAEA,KAAKb,GAAL,GAAWN,EAAKM,GAFhB,EAGA,KAAKc,KAAL,GAAapB,EAAKoB,KAHlB,EAIA,KAAKC,SAAL,GAAiBrB,EAAKqB,SAJtB,EAKA,KAAKC,KAAL,GAAatB,EAAKsB,KALlB,EAMA,KAAKC,KAAL,GAAavB,EAAKuB,KANlB,EAOA,KAAKC,MAAL,GAAcxB,EAAKwB,MAPnB,EAQA,KAAKC,QAAL,GAAgBzB,EAAKyB,QARrB,EASA,KAAKC,MAAL,GAAc1B,EAAK0B,MATnB,EAUA,KAAKC,MAAL,GAAc3B,EAAK2B,MAAL,IAAe,EAV7B,EAYI3B,EAAK4B,SAAL,KAAgB,KAAKA,SAAL,GAAiB,IAAIC,IAAJ,CAAS7B,EAAK4B,SAAd,EAAyBE,WAAzB,EAAjC,CAZJ;EAY8D;;EAMpD,aAAiB;IAC3B,OACE,MAAKZ,KAAL,EAAYhB,MAAZ,IAAsB,CAAtB,KACA,KAAKiB,WAAL,EAAkBjB,MAAlB,IAA4B,CAD5B,IAED,KAAKyB,MAAL,CAAYI,MAAZ,CAAmB,CAAC/B,CAAD,EAAOgC,CAAP,KAAgBhC,IAAOgC,EAAKzC,IAAL,CAAUW,MAAjB,GAA0B8B,EAAKxC,KAAL,CAAWU,MAAxE,EAAgF,CAAhF,CAFC,IAGA,KAAKwB,MAAL,EAAaO,IAAb,CAAkB/B,MAAlB,IAA4B,CAH5B,KAIA,KAAKsB,MAAL,EAAajC,IAAb,CAAkBW,MAAlB,IAA4B,CAJ5B,CADF;EAcM;;EAAAgC,SAASlC,CAAT,EAAqC;IAC3C,OAAO,KAAKmC,SAAL,CAAenC,CAAf,CAAP;EAQM;;EAAAmC,YAA4C;IAAA,kCAA/BnC,CAA+B;MAA/BA,CAA+B;IAAA;;IAElD,SAA0BC,KAA1B,CAAgCD,CAAhC,GAGAoC,EAAoB,KAAKT,MAAzB,EAAiC3B,EAAOE,MAAxC,CAHA,EAKA,KAAKyB,MAAL,CAAYU,IAAZ,CAAiB,GAAGC,EAAMC,eAAN,CAAsB,GAAGvC,CAAzB,CAApB,CALA,EAMO,IANP;EAgBM;;EAAAwC,aAAaxC,CAAb,EAA4BgC,CAA5B,EAAmF;IAAA,mCAA/BS,CAA+B;MAA/BA,CAA+B;IAAA;;IAEzF,SAA0BxC,KAA1B,CAAgCwC,CAAhC,GAGAL,EAAoB,KAAKT,MAAzB,EAAiCc,EAAOvC,MAAP,GAAgB8B,CAAjD,CAHA,EAKA,KAAKL,MAAL,CAAYe,MAAZ,CAAmB1C,CAAnB,EAA0BgC,CAA1B,EAAuC,GAAGM,EAAMC,eAAN,CAAsB,GAAGE,CAAzB,CAA1C,CALA,EAMO,IANP;EAcM;;EAAAE,UAAU3C,CAAV,EAA+C;IACrD,IAAIA,MAAY,IAAhB,EACC,YAAKwB,MAAL,GAAc,MAAd,EACO,IADP;IAID,IAAM;MAAEjC,OAAF;MAAQqD,UAAR;MAAiBtC;IAAjB,IAAyBN,CAA/B;IAEA,SAAoBC,KAApB,CAA0B+B,CAA1B,GACA3B,EAAaJ,KAAb,CAAmBwC,CAAnB,CADA,EAEApC,EAAaJ,KAAb,CAAmB4C,CAAnB,CAFA,EAIA,KAAKrB,MAAL,GAAc;MAAEjC,OAAF;MAAQe,MAAR;MAAawC,UAAUL;IAAvB,CAJd,EAKO,IALP;EAaM;;EAAAM,SAAS/C,CAAT,EAAqC;IAE3C,SAAeC,KAAf,CAAqBD,CAArB,GAEA,KAAKoB,KAAL,GAAapB,KAAS,MAFtB,EAGO,IAHP;EAWM;;EAAAgD,eAAehD,CAAf,EAAiD;IAEvD,SAAqBC,KAArB,CAA2BD,CAA3B,GAEA,KAAKmB,WAAL,GAAmBnB,KAAe,MAFlC,EAGO,IAHP;EAWM;;EAAAiD,UAAUjD,CAAV,EAA+C;IACrD,IAAIA,MAAY,IAAhB,EACC,YAAK0B,MAAL,GAAc,MAAd,EACO,IADP;IAID,IAAM;MAAEO,OAAF;MAAQW;IAAR,IAAoB5C,CAA1B;IAEA,SAAoBC,KAApB,CAA0B+B,CAA1B,GACA3B,EAAaJ,KAAb,CAAmBwC,CAAnB,CADA,EAGA,KAAKf,MAAL,GAAc;MAAEO,OAAF;MAAQa,UAAUL;IAAlB,CAHd,EAIO,IAJP;EAYM;;EAAAS,SAASlD,CAAT,EAAmC;IAEzC,SAAaC,KAAb,CAAmBD,CAAnB,GAEA,KAAKsB,KAAL,GAAatB,IAAM;MAAEM;IAAF,CAAN,GAAgB,MAF7B,EAGO,IAHP;EAWM;;EAAA6C,aAAanD,CAAb,EAAuC;IAE7C,SAAaC,KAAb,CAAmBD,CAAnB,GAEA,KAAKqB,SAAL,GAAiBrB,IAAM;MAAEM;IAAF,CAAN,GAAgB,MAFjC,EAGO,IAHP;EAWM;;EAAA8C,eAAiE;IAAA,IAApDpD,CAAoD,uEAAlB6B,KAAKwB,GAAL,EAAkB;IAEvE,SAAmBpD,KAAnB,CAAyBD,CAAzB,GAEA,KAAK4B,SAAL,GAAiB5B,IAAY,IAAI6B,IAAJ,CAAS7B,CAAT,EAAoB8B,WAApB,EAAZ,GAAgD,MAFjE,EAGO,IAHP;EAWM;;EAAAwB,SAAStD,CAAT,EAAqC;IAE3C,SAAeC,KAAf,CAAqBD,CAArB,GAEA,KAAKkB,KAAL,GAAalB,KAAS,MAFtB,EAGO,IAHP;EAWM;;EAAAuD,OAAOvD,CAAP,EAAiC;IAEvC,SAAaC,KAAb,CAAmBD,CAAnB,GAEA,KAAKM,GAAL,GAAWN,KAAO,MAFlB,EAGO,IAHP;EASM;;EAAAwD,SAAmB;IACzB,OAAO,KAAK;IAAL,CAAP;EAAY;;EAQC,yBAA6D;IAAA,mCAA1CxD,CAA0C;MAA1CA,CAA0C;IAAA;;IAC1E,OAAOA,EAAOyD,IAAP,CAAY,KAAZ,EAAsBC,GAAtB,CAA0B1B,CAAC,KACjCpD,EAAmBqB,KAAnB,CAAyB+B,EAAMzC,IAA/B,GACAN,EAAoBgB,KAApB,CAA0B+B,EAAMxC,KAAhC,CADA,EAEAN,EAAqBe,KAArB,CAA2B+B,EAAMvC,MAAjC,CAFA,EAIO;MAAEF,MAAMyC,EAAMzC,IAAd;MAAoBC,OAAOwC,EAAMxC,KAAjC;MAAwCC,QAAQuC,EAAMvC,MAAN,IAAgB;IAAhE,CAL0B,CAA3B,CAAP;EAKwE;;AA3RnC,CAAhC;;ACtBA,YAAmBM,CAAnB,EAAqCC,CAArC,EAA+D;EACrE,OAAO,OAAOA,CAAP,IAAmB,WAAnB,GAAiC;AAAA,EAAWD,SAA5C,GAA+D,SAASA;AAAA,EAAaC,SAA5F;AAQM;;AAAA,YAAsCD,CAAtC,EAA8D;EACpE,OAAO,KAAKA,KAAZ;AAQM;;AAAA,YAAkCA,CAAlC,EAAwD;EAC9D,OAAO,IAAIA,IAAX;AAQM;;AAAA,YAAgCA,CAAhC,EAAwD;EAC9D,OAAO,KAAKA,KAAZ;AAQM;;AAAA,YAAsCA,CAAtC,EAA8D;EACpE,OAAO,KAAKA,KAAZ;AAQM;;AAAA,YAAyCA,CAAzC,EAAiE;EACvE,OAAO,KAAKA,KAAZ;AAQM;;AAAA,YAAiCA,CAAjC,EAAuD;EAC7D,OAAO,KAAKA,GAAZ;AAQM;;AAAA,YAAsCA,CAAtC,EAA8D;EACpE,OAAO,OAAOA,GAAd;AAgBM;;AAAA,YAAuBA,CAAvB,EAA0C;EAEhD,OAAO,IAAIA,IAAX;AA4CM;;AAAA,YAAmBA,CAAnB,EAAoCC,CAApC,EAAuDgC,CAAvD,EAAuE;EAE7E,OAAOA,IAAQ,IAAIjC,MAAYC,MAAQgC,KAAhC,GAA4C,IAAIjC,MAAYC,IAAnE;AAQM;;AAAA,YAAmCD,CAAnC,EAA2D;EACjE,OAAO,KAAKA,KAAZ;AAQM;;AAAA,YAA0CA,CAA1C,EAAgE;EACtE,OAAO,KAAKA,IAAZ;AAQM;;AAAA,YAAoDA,CAApD,EAA6E;EACnF,OAAO,MAAMA,IAAb;AAQM;;AAAA,YAA6CA,CAA7C,EAAsE;EAC5E,OAAO,KAAKA,IAAZ;AAQM;;AAAA,YAA0CA,CAA1C,EAAiE;EACvE,OAAO,MAAMA,IAAb;AAwBM;;AAAA,YAA0CA,CAA1C,EAAoG;EAAA,IAA9CC,CAA8C,uEAAnC,EAAmC;EAC1G,OAAO,IAAIA,IAAW,GAAX,GAAiB,QAAQD,IAApC;AAgCM;;AAAA,YAAcA,CAAd,EAA6CC,CAA7C,EAAoF;EAC1F,OAAI,OAAOD,CAAP,IAAyB,QAAzB,KACHA,IAAgB4D,KAAKC,KAAL,CAAY,IAAeC,OAAf,MAA4BhC,KAAKwB,GAAL,EAA5B,IAA0C,GAAtD,CADb,GAIG,OAAOrD,CAAP,IAAiB,QAAjB,GAA4B,MAAMD,KAAiBC,IAAnD,GAA8D,MAAMD,IAJ3E;AAUM;;AAAA,IAAM+D,KAAkB;EAI9BC,WAAW,GAJmB;EAS9BC,UAAU,GAToB;EAc9BC,WAAW,GAdmB;EAmB9BC,UAAU,GAnBoB;EAwB9BC,eAAe,GAxBe;EA6B9BC,cAAc,GA7BgB;EAkC9BC,cAAc;AAlCgB,CAAxB;AAAA,IA6CKC,KAAL,CAAK7B,MAIXA,UAAQ,yBAAR,EAKAA,cAAY,4DALZ,EAUAA,WAAS,iDAVT,EAJWA,EAAL,EAAK6B,QAAL,CA7CA;;AClQP;AAAAzG;EAAA0G;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;AAAA;AAEA;;AAKO,WACN/E,CADM,EAENC,CAFM,EAGNgC,CAHM,EAIL;EAED+C,EAAahF,CAAb,GAGAiF,EAAoBhF,CAApB,CAHA,EAMAiF,EAAyBjD,CAAzB,CANA;AASD;;AAAA,IAAMkD,KAAgBC,EACpBrG,MADoB,GAEpBC,GAFoB,CAEhB,CAFgB,EAGpBC,GAHoB,CAGhB,EAHgB,EAIpBoG,KAJoB,CAId,qBAJc,CAAtB;;AAMO,WAAsBrF,CAAtB,EAA6D;EACnEmF,GAAcjF,KAAd,CAAoBF,CAApB;AAGD;;AAAA,IAAMsF,KAAuBF,EAAErG,MAAF,GAAWC,GAAX,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,GAAtB,CAA7B;;AAEO,WAA6Be,CAA7B,EAAkF;EACxFsF,GAAqBpF,KAArB,CAA2BF,CAA3B;AAGD;;AAAA,IAAMuF,KAAmBH,EAAEhG,OAAF,EAAzB;;AAEO,WAAmCY,CAAnC,EAA6E;EACnFuF,GAAiBrF,KAAjB,CAAuBF,CAAvB;AAGM;;AAAA,WAA0BA,CAA1B,EAA0E;EAChFuF,GAAiBrF,KAAjB,CAAuBF,CAAvB;AAGD;;AAAA,IAAMwF,KAA0BJ,EAAEK,OAAF,GAAY7F,KAAZ,GAAoBX,GAApB,CAAwB,EAAxB,CAAhC;;AAEO,WAAkCe,CAAlC,EAAyG;EAC/GwF,GAAwBtF,KAAxB,CAA8BF,CAA9B;AAGM;;AAAA,WAAkCA,CAAlC,EAAgF;EACtFwF,GAAwBtF,KAAxB,CAA8BF,CAA9B;AAGM;;AAAA,WAELA,CAFK,EAEWC,CAFX,EAEgE;EACtE,IAAMgC,IAAehC,EAAmBT,IAAxC;EAEA,IAAIkG,EAAGC,eAAH,CAAmB3F,CAAnB,CAAJ,EACC,MAAM,IAAI4F,SAAJ,CACL,yBAAyB3D,kBAA6BjC,MAAU,IAAV,GAAiB,MAAjB,GAA0B,sBAD3E,CAAN;EAKD,IAAI0F,EAAGG,SAAH,CAAa7F,CAAb,CAAJ,EACC,MAAM,IAAI4F,SAAJ,CAAc,yBAAyB3D,+BAA0C,OAAOjC,aAAxF,CAAN;;EAGD,IAAI,EAAEA,aAAiBC,CAAnB,CAAJ,EAA4C;IAC3C,IAAMyC,IAAS1C,CAAf;IAAA,IAEM8C,IAAkB4C,EAAGI,SAAH,CAAa9F,CAAb,IAAsBA,EAAMR,IAA5B,GAAmCkD,EAAOzB,WAAP,CAAmBzB,IAF9E;IAAA,IAGMuG,IAAYC,QAAQC,GAAR,CAAYvD,CAAZ,EAAoBwD,OAAOC,WAA3B,CAHlB;IAAA,IAKMC,IAAiBL,IAAY,GAAGjD,MAAoBiD,IAAnC,GAAkDjD,CALzE;IAOA,MAAM,IAAI8C,SAAJ,CAAc,yBAAyB3D,kBAA6BmE,YAApE,CAAN;EAA0E;AChF5E;;AAAA;ACDA;ACEO,cAA+B;EAA/BnF,cAFP;IAGiBC;IACAA;EAOT;;EAAAmF,QAAQpG,CAAR,EAAsB;IAE5B,SAAaA,CAAb,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,MAAlB,EAA0BrG,CAA1B,CAFA,EAIO,IAJP;EAYM;;EAAAgD,eAAehD,CAAf,EAAoC;IAE1C,SAAoBA,CAApB,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,aAAlB,EAAiCrG,CAAjC,CAFA,EAIO,IAJP;EAIO;;AA7B6B,CAA/B;ACEA,sBAAoDsG,CAApD,CAA6E;EAA7EtF,cAJP;IAIO;IAGUC,oBAAW,EAAX;EAOT;;EAAAsF,YAAYvG,CAAZ,EAA+B;IAErC,SAAiBA,CAAjB,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,UAAlB,EAA8BrG,CAA9B,CAFA,EAIO,IAJP;EASS;;EAAAwG,yBAAyB;IAClCC,EAA2B,KAAKlH,IAAhC,EAAsC,KAAK4B,WAA3C,EAAwD,EAAxD,GAGAuF,EAAiB,KAAKC,QAAtB,CAHA;EAGsB;;AAzB4D,CAA7E;AFDA,uBAAwCC,CAAxC,CAAqE;EAArE5F,cAHP;IAGO;IACUC,gBAAO4F,GAA6BC,OAApC;EAET;;EAAAtD,SAA6C;IACnD,YAAKgD,sBAAL,IAEO,KAAK;IAAL,CAFP;EAEY;;AAN8D,CAArE;AGHP;AACA;ACDA;AACA;AAGA,IAAMO,KAAsB,CAC3BC,EAAYC,SADe,EAE3BD,EAAYE,UAFe,EAG3BF,EAAYG,aAHe,EAI3BH,EAAYI,SAJe,EAK3BJ,EAAYK,UALe,EAM3BL,EAAYM,eANe,EAO3BN,EAAYO,iBAPe,EAQ3BP,EAAYQ,kBARe,EAS3BR,EAAYS,eATe,CAA5B;AAAA,IAcMC,KAAuBC,GAAE9G,KAAF,CAC5BkG,GAAoBrD,GAApB,CAAwB3D,CAAC,IAAS4H,GAAEC,OAAF,CAAU7H,CAAV,CAAlC,CAD4B,CAd7B;AAAA,IAsBO8H,WAAgD;EAAhD7G,cA1BP;IA2BiBC;EAOT;;EAAA6G,eAAe9H,CAAf,EAAyE;IAC/E,OAAI,KAAK+H,aAAL,KAAuB,MAAvB,IACHhC,QAAQM,GAAR,CAAY,IAAZ,EAAkB,eAAlB,EAAmC,EAAnC,CADG,EAIJqB,GAAqBzH,KAArB,CAA2BD,CAA3B,CAJI,EAKJ,KAAK+H,aAAL,CAAoB1F,IAApB,CAAyBrC,CAAzB,CALI,EAOG,IAPP;EAeM;;EAAAgI,gBAAgBhI,CAAhB,EAA6E;IACnF,SAAaiI,OAAb,CAAqBjG,CAAC,IAAgB,KAAK8F,cAAL,CAAoB9F,CAApB,CAAtC,GACO,IADP;EACO;;AA1B8C,CAtBvD;ADEO,sBAAwC4E,CAAxC,CAAqE;EAArE5F,cANP;IAMO;IACmBC,gBAAOiH,GAA6BC,OAApC;EAElB;;EAAA3E,SAA6C;IACnD,YAAKgD,sBAAL,IAEO,KAAK;IAAL,CAFP;EAEY;;AAN8D,CAArE;AAAA4B,OADNC,GAAIR,EAAJ,CACM;AENP;AACA;AACA;ACFO,cAA+D;EAA/D7G,cAAP;IACoBC;IACAA;EAAA;;AAFkD,CAA/D;ACAP;AACA;AAGA,IAAMqH,IAAkBC,EAAEzJ,MAAF,GAAWC,GAAX,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,GAAtB,CAAxB;AAAA,IACMwJ,KAAkBD,EAAE1I,MAAF,GAAW4I,EAAX,CAAc,MAAd,EAAyBC,EAAzB,CAA4B,KAA5B,CADxB;AAAA,IAEMC,KAAmBJ,EAAEK,KAAF,CAAQ,CAACN,CAAD,EAAkBC,EAAE1H,KAAF,CAAQ,CAACyH,CAAD,EAAkBE,EAAlB,CAAR,CAAlB,CAAR,EAAwE7I,KAAxE,EAFzB;AAAA,IAGMkJ,KAAmBN,EAAEpJ,OAAF,EAHzB;AAAA,IAKO2J,UAAyF;EAAzF9H,cATP;IAUiBC;IACAA;IAGAA;EAQT;;EAAA8H,UAAU/I,CAAV,EAAwBgC,CAAxB,EAAiE;IACvE,IAAI,KAAKgH,YAAT,EACC,MAAM,IAAIC,UAAJ,CAAe,gEAAf,CAAN;IAGD,OAAI,KAAKC,OAAL,KAAiB,MAAjB,IACHnD,QAAQM,GAAR,CAAY,IAAZ,EAAkB,SAAlB,EAA6B,EAA7B,CADG,EAIJ8C,EAAyB,KAAKD,OAA9B,CAJI,EAOJZ,EAAgBrI,KAAhB,CAAsBD,CAAtB,CAPI,EAUJ,KAASoJ,IAAT,KAAkBC,GAA6BC,MAA/C,GACChB,EAAgBrI,KAAhB,CAAsB+B,CAAtB,CADD,GAGCwG,GAAgBvI,KAAhB,CAAsB+B,CAAtB,CAbG,EAgBJ,KAAKkH,OAAL,CAAc7G,IAAd,CAAmB;MAAE9C,OAAF;MAAQC;IAAR,CAAnB,CAhBI,EAkBG,IAlBP;EA0BM;;EAAA+J,WAAWvJ,CAAX,EAA+E;IACrF,IAAI,KAAKgJ,YAAT,EACC,MAAM,IAAIC,UAAJ,CAAe,gEAAf,CAAN;IAGDN,GAAiB1I,KAAjB,CAAuBD,CAAvB;;IAEA,SAAW,CAACgC,CAAD,EAAQS,CAAR,CAAX,IAA6BzC,CAA7B,EAAsC,KAAK+I,SAAL,CAAe/G,CAAf,EAAsBS,CAAtB;;IACtC,OAAO,IAAP;EAGM;;EAAA+G,WACNxJ,CADM,EAI0B;IAChC,IAAIA,EAAQE,MAAR,GAAiB,CAAjB,IAAsB,KAAK8I,YAA/B,EACC,MAAM,IAAIC,UAAJ,CAAe,gEAAf,CAAN;IAGDN,GAAiB1I,KAAjB,CAAuBD,CAAvB,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,SAAlB,EAA6B,EAA7B,CAFA;;IAGA,SAAW,CAACrE,CAAD,EAAQS,CAAR,CAAX,IAA6BzC,CAA7B,EAAsC,KAAK+I,SAAL,CAAe/G,CAAf,EAAsBS,CAAtB;;IAEtC,OAAO,IAAP;EAOM;;EAAAgH,gBACNzJ,CADM,EAIgG;IAItG,IAFA6I,GAAiB5I,KAAjB,CAAuBD,CAAvB,GAEIA,KAAgB0J,MAAMC,OAAN,CAAc,KAAKT,OAAnB,CAAhB,IAA+C,KAAKA,OAAL,CAAahJ,MAAb,GAAsB,CAAzE,EACC,MAAM,IAAI+I,UAAJ,CAAe,gEAAf,CAAN;IAGD,eAAQ5C,GAAR,CAAY,IAAZ,EAAkB,cAAlB,EAAkCrG,CAAlC,GAEO,IAFP;EAEO;;AA1FuF,CALhG;AFGA,IAAM4J,KAAkBC,GAAEhK,MAAF,GAAWiK,GAAX,GAAiBC,WAAjB,EAAxB;AAAA,IAGOC,kBACEpD,CADF,CAGP;EAHO5F,cAVP;IAUO;IAIUC,gBAAOgJ,GAA6BC,OAApC;EAET;;EAAAC,YAAYnK,CAAZ,EAA+B;IACrC,UAAgBC,KAAhB,CAAsBD,CAAtB,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,UAAlB,EAA8BrG,CAA9B,CAFA,EAIO,IAJP;EAOM;;EAAAoK,YAAYpK,CAAZ,EAA+B;IACrC,UAAgBC,KAAhB,CAAsBD,CAAtB,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,UAAlB,EAA8BrG,CAA9B,CAFA,EAIO,IAJP;EAOM;;EAAAwD,SAA6C;IAGnD,IAFA,KAAKgD,sBAAL,IAEI,KAAKwC,YAAL,IAAqBU,MAAMC,OAAN,CAAc,KAAKT,OAAnB,CAArB,IAAoD,KAAKA,OAAL,CAAahJ,MAAb,GAAsB,CAA9E,EACC,MAAM,IAAI+I,UAAJ,CAAe,gEAAf,CAAN;IAGD,OAAO,KAAK;IAAL,CAAP;EAAY;;AA1Bd,CANA;AAGOe,OADNK,GAAIC,CAAJ,EAAqDxB,CAArD,CACM;AGVP;AAGO,uBAA4ClC,CAA5C,CAAyE;EAAzE5F,cAHP;IAGO;IACUC,gBAAOsJ,GAA6BC,WAApC;EAET;;EAAAhH,SAAiD;IACvD,YAAKgD,sBAAL,IAEO,KAAK;IAAL,CAFP;EAEY;;AANkE,CAAzE;ACHP;AACA;AACA;AAKA,IAAMiE,KAAkBC,GAAE7K,MAAF,GAAWkK,WAAX,EAAxB;AAAA,IAGOY,kBACE/D,CADF,CAGP;EAHO5F,cAVP;IAUO;IAIUC,gBAAO2J,GAA6BC,MAApC;EAET;;EAAAV,YAAYnK,CAAZ,EAA+B;IACrC,UAAgBC,KAAhB,CAAsBD,CAAtB,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,UAAlB,EAA8BrG,CAA9B,CAFA,EAIO,IAJP;EAOM;;EAAAoK,YAAYpK,CAAZ,EAA+B;IACrC,UAAgBC,KAAhB,CAAsBD,CAAtB,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,UAAlB,EAA8BrG,CAA9B,CAFA,EAIO,IAJP;EAOM;;EAAAwD,SAA4C;IAGlD,IAFA,KAAKgD,sBAAL,IAEI,KAAKwC,YAAL,IAAqBU,MAAMC,OAAN,CAAc,KAAKT,OAAnB,CAArB,IAAoD,KAAKA,OAAL,CAAahJ,MAAb,GAAsB,CAA9E,EACC,MAAM,IAAI+I,UAAJ,CAAe,gEAAf,CAAN;IAGD,OAAO,KAAK;IAAL,CAAP;EAAY;;AA1Bd,CANA;AAGO0B,OADNG,GAAIR,CAAJ,EAAqDxB,CAArD,CACM;ACVP;AAGO,uBAAqClC,CAArC,CAAkE;EAAlE5F,cAHP;IAGO;IACmBC,gBAAO8J,GAA6BC,IAApC;EAElB;;EAAAxH,SAA0C;IAChD,YAAKgD,sBAAL,IAEO,KAAK;IAAL,CAFP;EAEY;;AAN2D,CAAlE;ACHP;AACA;AAKO,sBAAuCI,CAAvC,CAAoE;EAApE5F,cANP;IAMO;IACUC,gBAAOgK,GAA6B3B,MAApC;EAET;;EAAA9F,SAA4C;IAGlD,IAFA,KAAKgD,sBAAL,IAEI,KAAKwC,YAAL,IAAqBU,MAAMC,OAAN,CAAc,KAAKT,OAAnB,CAArB,IAAoD,KAAKA,OAAL,CAAahJ,MAAb,GAAsB,CAA9E,EACC,MAAM,IAAI+I,UAAJ,CAAe,gEAAf,CAAN;IAGD,OAAO,KAAK;IAAL,CAAP;EAAY;;AAV6D,CAApE;AAAAiC,OADNC,GAAIrC,CAAJ,CACM;ACNP;AAGO,uBAAqClC,CAArC,CAAkE;EAAlE5F,cAHP;IAGO;IACUC,gBAAOmK,GAA6BC,IAApC;EAET;;EAAA7H,SAA0C;IAChD,YAAKgD,sBAAL,IAEO,KAAK;IAAL,CAFP;EAEY;;AAN2D,CAAlE;ACSA,cAAsE;EAAtExF,cAZP;IAaiBC;EAOT;;EAAAqK,iBACNtL,CADM,EAEL;IACD,OAAO,KAAKuL,sBAAL,CAA4BvL,CAA5B,EAAmCwL,EAAnC,CAAP;EAQM;;EAAAC,cAAczL,CAAd,EAA6G;IACnH,OAAO,KAAKuL,sBAAL,CAA4BvL,CAA5B,EAAmC0L,EAAnC,CAAP;EAQM;;EAAAC,iBACN3L,CADM,EAEL;IACD,OAAO,KAAKuL,sBAAL,CAA4BvL,CAA5B,EAAmCoI,CAAnC,CAAP;EAQM;;EAAAwD,cAAc5L,CAAd,EAA6G;IACnH,OAAO,KAAKuL,sBAAL,CAA4BvL,CAA5B,EAAmC6L,EAAnC,CAAP;EAQM;;EAAAC,qBACN9L,CADM,EAEL;IACD,OAAO,KAAKuL,sBAAL,CAA4BvL,CAA5B,EAAmC+L,EAAnC,CAAP;EAQM;;EAAAC,gBACNhM,CADM,EAWL;IACD,OAAO,KAAKuL,sBAAL,CAA4BvL,CAA5B,EAAmCkL,CAAnC,CAAP;EAQM;;EAAAe,iBACNjM,CADM,EAWL;IACD,OAAO,KAAKuL,sBAAL,CAA4BvL,CAA5B,EAAmCgK,CAAnC,CAAP;EAQM;;EAAAkC,gBACNlM,CADM,EAWL;IACD,OAAO,KAAKuL,sBAAL,CAA4BvL,CAA5B,EAAmC2K,CAAnC,CAAP;EAGO;;EAAAY,uBACPvL,CADO,EAMPgC,CANO,EAOkG;IACzG,IAAM;MAAEmK;IAAF,IAAc,IAApB;IAGAlH,EAAyBxC,CAAzB;IAGA,IAAMI,IAAS,OAAO7C,CAAP,IAAiB,UAAjB,GAA8BA,EAAM,IAAIgC,CAAJ,EAAN,CAA9B,GAAsDhC,CAArE;IAEA,SAAsB6C,CAAtB,EAA8Bb,CAA9B,GAGAS,EAAQJ,IAAR,CAAaQ,CAAb,CAHA,EAKO,IALP;EAKO;;AAvIoE,CAAtE;ACZP;AAKA;AAaO,cAAmF;EAAnF7B,cAlBP;IAsBiBC;IAKAA;IAKAA,mBAA2C,EAA3C;EAOT;;EAAAmL,cACNpM,CADM,EAIL;IACD,IAAM;MAAEmM;IAAF,IAAc,IAApB;IAGAlH,EAAyBjD,CAAzB;IAGA,IAAMS,IAAS,OAAOzC,CAAP,IAAiB,UAAjB,GAA8BA,EAAM,IAAIqM,CAAJ,EAAN,CAA9B,GAA2ErM,CAA1F;IAEA,SAAsByC,CAAtB,EAA8B4J,CAA9B,GAGArK,EAAQK,IAAR,CAAaI,CAAb,CAHA,EAKO,IALP;EAQM;;EAAAe,SAAqD;IAC3D,SAA2B,KAAKjE,IAAhC,EAAsC,KAAK4B,WAA3C,EAAwD,KAAKgL,OAA7D,GAEO;MACN/C,MAAMkD,GAA6BC,eAD7B;MAENhN,MAAM,KAAKA,IAFL;MAGN4B,aAAa,KAAKA,WAHZ;MAINgL,SAAS,KAAKA,OAAL,CAAazI,GAAb,CAAiB1D,CAAC,IAAWA,EAAOwD,MAAP,EAA7B;IAJH,CAFP;EAM8C;;AAjD0C,CAAnF;AAAAgJ,OADNC,GAAInG,CAAJ,CACM;AA8DA,cAA8E;EAA9EtF,cAhFP;IAoFiBC;IAKAA;IAKAA,mBAA0C,EAA1C;EAET;;EAAAuC,SAAgD;IACtD,SAA2B,KAAKjE,IAAhC,EAAsC,KAAK4B,WAA3C,EAAwD,KAAKgL,OAA7D,GAEO;MACN/C,MAAMkD,GAA6BI,UAD7B;MAENnN,MAAM,KAAKA,IAFL;MAGN4B,aAAa,KAAKA,WAHZ;MAINgL,SAAS,KAAKA,OAAL,CAAazI,GAAb,CAAiB1D,CAAC,IAAWA,EAAOwD,MAAP,EAA7B;IAJH,CAFP;EAM8C;;AAvBqC,CAA9E;AAAA6I,OADNI,GAAInG,CAAJ,EAA8BqG,CAA9B,CACM;AfnEA,eAA0B;EAA1B3L,cAbP;IAiBiBC;IAKAA;IAKAA,mBAA4C,EAA5C;IAOAA;EAOT;;EAAAuC,SAAiD;IACvD,SAA2B,KAAKjE,IAAhC,EAAsC,KAAK4B,WAA3C,EAAwD,KAAKgL,OAA7D,GAEO;MACN5M,MAAM,KAAKA,IADL;MAEN4B,aAAa,KAAKA,WAFZ;MAGNgL,SAAS,KAAKA,OAAL,CAAazI,GAAb,CAAiB1D,CAAC,IAAWA,EAAOwD,MAAP,EAA7B,CAHH;MAINoJ,oBAAoB,KAAKC;IAJnB,CAFP;EAmBM;;EAAAC,qBAAqB9M,CAArB,EAAqC;IAE3C,SAA0BA,CAA1B,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,mBAAlB,EAAuCrG,CAAvC,CAFA,EAIO,IAJP;EAYM;;EAAA+M,mBACN/M,CADM,EAI+B;IACrC,IAAM;MAAEmM;IAAF,IAAc,IAApB;IAGAlH,EAAyBjD,CAAzB;IAGA,IAAMS,IAAS,OAAOzC,CAAP,IAAiB,UAAjB,GAA8BA,EAAM,IAAIwM,CAAJ,EAAN,CAA9B,GAAgFxM,CAA/F;IAEA,SAAsByC,CAAtB,EAA8B+J,CAA9B,GAGAxK,EAAQK,IAAR,CAAaI,CAAb,CAHA,EAKO,IALP;EAaM;;EAAA2J,cACNpM,CADM,EAI+B;IACrC,IAAM;MAAEmM;IAAF,IAAc,IAApB;IAGAlH,EAAyBjD,CAAzB;IAGA,IAAMS,IAAS,OAAOzC,CAAP,IAAiB,UAAjB,GAA8BA,EAAM,IAAIqM,CAAJ,EAAN,CAA9B,GAA2ErM,CAA1F;IAEA,SAAsByC,CAAtB,EAA8B4J,CAA9B,GAGArK,EAAQK,IAAR,CAAaI,CAAb,CAHA,EAKO,IALP;EAKO;;AA1GwB,CAA1B;AAAAuK,QADNC,GAAIN,CAAJ,EAA+BrG,CAA/B,CACM;AgBbP;AAAAzI;EAAA2G;EAAAI;EAAAE;EAAAoI;AAAA;AAAA;AACA;;AAGO,YAAoCnN,CAApC,EAAkDC,CAAlD,EAAgE;EAEtEmN,EAAapN,CAAb,GAGAqN,EAAapN,CAAb,CAHA;AAMD;;AAAA,IAAMqN,KAAgBC,EACpBxO,MADoB,GAEpBC,GAFoB,CAEhB,CAFgB,EAGpBC,GAHoB,CAGhB,EAHgB,EAIpBoG,KAJoB,CAId,2BAJc,CAAtB;;AAMO,WAAsBrF,CAAtB,EAA6D;EACnEsN,GAAcpN,KAAd,CAAoBF,CAApB;AAGD;;AAAA,IAAMwN,KAAgBD,EAAEzM,KAAF,CAAQ,CAACyM,EAAE1F,OAAF,CAAU4F,GAAuBnC,IAAjC,CAAD,EAAyCiC,EAAE1F,OAAF,CAAU4F,GAAuBC,OAAjC,CAAzC,CAAR,CAAtB;;AAEO,WAAsB1N,CAAtB,EAA6E;EACnFwN,GAActN,KAAd,CAAoBF,CAApB;AAGD;;AAAA,IAAM2N,KAAmBJ,EAAEnO,OAAF,EAAzB;;AAEO,YAAmCY,CAAnC,EAA6E;EACnF2N,GAAiBzN,KAAjB,CAAuBF,CAAvB;AC5BM;;AAAA,eAAgC;EAAhCiB,cAHP;IAOiBC;IAKAA;IAOAA;EAOT;;EAAAmF,QAAQpG,CAAR,EAAsB;IAE5B,SAAaA,CAAb,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,MAAlB,EAA0BrG,CAA1B,CAFA,EAIO,IAJP;EAYM;;EAAA2N,QAAQ3N,CAAR,EAAsC;IAE5C,SAAaA,CAAb,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,MAAlB,EAA0BrG,CAA1B,CAFA,EAIO,IAJP;EAgBM;;EAAA8M,qBAAqB9M,CAArB,EAAqC;IAE3C,UAA0BA,CAA1B,GAEA+F,QAAQM,GAAR,CAAY,IAAZ,EAAkB,mBAAlB,EAAuCrG,CAAvC,CAFA,EAIO,IAJP;EAYM;;EAAAwD,SAAiD;IACvD,UAA2B,KAAKjE,IAAhC,EAAsC,KAAK6J,IAA3C,GACO;MACN7J,MAAM,KAAKA,IADL;MAEN6J,MAAM,KAAKA,IAFL;MAGNwD,oBAAoB,KAAKC;IAHnB,CADP;EAI0B;;AA1EW,CAAhC;AA0EqB","names":["q","authorNamePredicate","colorPredicate","descriptionPredicate","embedFieldPredicate","embedFieldsArrayPredicate","fieldInlinePredicate","fieldLengthPredicate","fieldNamePredicate","fieldValuePredicate","footerTextPredicate","timestampPredicate","titlePredicate","urlPredicate","validateFieldLength","O","l","string","min","max","N","B","boolean","optional","pe","object","name","value","inline","w","array","me","number","lte","t","e","parse","length","z","nullable","u","url","nullish","W","gte","j","Z","K","union","date","Q","constructor","n","title","description","color","thumbnail","image","video","author","provider","footer","fields","timestamp","Date","toISOString","reduce","i","text","addField","addFields","E","push","k","normalizeFields","spliceFields","o","splice","setAuthor","iconURL","p","icon_url","setColor","setDescription","setFooter","setImage","setThumbnail","setTimestamp","now","setTitle","setURL","toJSON","flat","map","Math","floor","getTime","xt","ShortTime","LongTime","ShortDate","LongDate","ShortDateTime","LongDateTime","RelativeTime","Te","assertReturnOfBuilder","validateDefaultPermission","validateDescription","validateMaxChoicesLength","validateMaxOptionsLength","validateName","validateRequired","validateRequiredParameters","L","V","d","Ie","_","regex","$e","de","ce","unknown","H","nullOrUndefined","TypeError","primitive","function_","A","Reflect","get","Symbol","toStringTag","y","setName","set","f","setRequired","runRequiredValidations","h","U","required","s","Re","Boolean","Me","c","GuildText","GuildVoice","GuildCategory","GuildNews","GuildStore","GuildNewsThread","GuildPublicThread","GuildPrivateThread","GuildStageVoice","ve","he","literal","te","addChannelType","channel_types","addChannelTypes","forEach","Ne","Channel","g","Be","D","T","Ce","gt","lt","fe","tuple","Ee","x","addChoice","autocomplete","RangeError","choices","Y","type","we","String","addChoices","setChoices","setAutocomplete","Array","isArray","be","Le","int","nonnegative","I","ke","Integer","setMaxValue","setMinValue","_e","P","Ve","Mentionable","xe","Fe","$","Ue","Number","De","Je","Role","Ge","R","qe","ze","User","addBooleanOption","_sharedAddOptionMethod","ee","addUserOption","oe","addChannelOption","addRoleOption","ne","addMentionableOption","ie","addStringOption","addIntegerOption","addNumberOption","options","addSubcommand","b","Ae","SubcommandGroup","S","Oe","Subcommand","M","default_permission","defaultPermission","setDefaultPermission","addSubcommandGroup","re","We","validateType","F","J","je","v","Ze","Se","Message","Ke","setType"],"sources":["../src/messages/embed/Assertions.ts","../src/messages/embed/Embed.ts","../src/messages/formatters.ts","../src/interactions/slashCommands/Assertions.ts","../src/interactions/slashCommands/SlashCommandBuilder.ts","../src/interactions/slashCommands/options/boolean.ts","../src/interactions/slashCommands/mixins/NameAndDescription.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionBase.ts","../src/interactions/slashCommands/options/channel.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts","../src/interactions/slashCommands/options/integer.ts","../src/interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.ts","../src/interactions/slashCommands/options/mentionable.ts","../src/interactions/slashCommands/options/number.ts","../src/interactions/slashCommands/options/role.ts","../src/interactions/slashCommands/options/string.ts","../src/interactions/slashCommands/options/user.ts","../src/interactions/slashCommands/mixins/SharedSlashCommandOptions.ts","../src/interactions/slashCommands/SlashCommandSubcommands.ts","../src/interactions/contextMenuCommands/Assertions.ts","../src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts"],"sourcesContent":["import type { APIEmbedField } from 'discord-api-types/v9';\nimport { z } from 'zod';\n\nexport const fieldNamePredicate = z.string().min(1).max(256);\n\nexport const fieldValuePredicate = z.string().min(1).max(1024);\n\nexport const fieldInlinePredicate = z.boolean().optional();\n\nexport const embedFieldPredicate = z.object({\n\tname: fieldNamePredicate,\n\tvalue: fieldValuePredicate,\n\tinline: fieldInlinePredicate,\n});\n\nexport const embedFieldsArrayPredicate = embedFieldPredicate.array();\n\nexport const fieldLengthPredicate = z.number().lte(25);\n\nexport function validateFieldLength(fields: APIEmbedField[], amountAdding: number): void {\n\tfieldLengthPredicate.parse(fields.length + amountAdding);\n}\n\nexport const authorNamePredicate = fieldNamePredicate.nullable();\n\nexport const urlPredicate = z.string().url().nullish();\n\nexport const colorPredicate = z.number().gte(0).lte(0xffffff).nullable();\n\nexport const descriptionPredicate = z.string().min(1).max(4096).nullable();\n\nexport const footerTextPredicate = z.string().min(1).max(2048).nullable();\n\nexport const timestampPredicate = z.union([z.number(), z.date()]).nullable();\n\nexport const titlePredicate = fieldNamePredicate.nullable();\n","import type {\n\tAPIEmbed,\n\tAPIEmbedAuthor,\n\tAPIEmbedField,\n\tAPIEmbedFooter,\n\tAPIEmbedImage,\n\tAPIEmbedProvider,\n\tAPIEmbedThumbnail,\n\tAPIEmbedVideo,\n} from 'discord-api-types/v9';\nimport {\n\tauthorNamePredicate,\n\tcolorPredicate,\n\tdescriptionPredicate,\n\tembedFieldsArrayPredicate,\n\tfieldInlinePredicate,\n\tfieldNamePredicate,\n\tfieldValuePredicate,\n\tfooterTextPredicate,\n\ttimestampPredicate,\n\ttitlePredicate,\n\turlPredicate,\n\tvalidateFieldLength,\n} from './Assertions';\n\nexport interface AuthorOptions {\n\tname: string;\n\turl?: string;\n\ticonURL?: string;\n}\n\nexport interface FooterOptions {\n\ttext: string;\n\ticonURL?: string;\n}\n\n/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\nexport class Embed implements APIEmbed {\n\t/**\n\t * An array of fields of this embed\n\t */\n\tpublic fields: APIEmbedField[];\n\n\t/**\n\t * The embed title\n\t */\n\tpublic title?: string;\n\n\t/**\n\t * The embed description\n\t */\n\tpublic description?: string;\n\n\t/**\n\t * The embed url\n\t */\n\tpublic url?: string;\n\n\t/**\n\t * The embed color\n\t */\n\tpublic color?: number;\n\n\t/**\n\t * The timestamp of the embed in the ISO format\n\t */\n\tpublic timestamp?: string;\n\n\t/**\n\t * The embed thumbnail data\n\t */\n\tpublic thumbnail?: APIEmbedThumbnail;\n\n\t/**\n\t * The embed image data\n\t */\n\tpublic image?: APIEmbedImage;\n\n\t/**\n\t * Received video data\n\t */\n\tpublic video?: APIEmbedVideo;\n\n\t/**\n\t * The embed author data\n\t */\n\tpublic author?: APIEmbedAuthor;\n\n\t/**\n\t * Received data about the embed provider\n\t */\n\tpublic provider?: APIEmbedProvider;\n\n\t/**\n\t * The embed footer data\n\t */\n\tpublic footer?: APIEmbedFooter;\n\n\tpublic constructor(data: APIEmbed = {}) {\n\t\tthis.title = data.title;\n\t\tthis.description = data.description;\n\t\tthis.url = data.url;\n\t\tthis.color = data.color;\n\t\tthis.thumbnail = data.thumbnail;\n\t\tthis.image = data.image;\n\t\tthis.video = data.video;\n\t\tthis.author = data.author;\n\t\tthis.provider = data.provider;\n\t\tthis.footer = data.footer;\n\t\tthis.fields = data.fields ?? [];\n\n\t\tif (data.timestamp) this.timestamp = new Date(data.timestamp).toISOString();\n\t}\n\n\t/**\n\t * The accumulated length for the embed title, description, fields, footer text, and author name\n\t */\n\tpublic get length(): number {\n\t\treturn (\n\t\t\t(this.title?.length ?? 0) +\n\t\t\t(this.description?.length ?? 0) +\n\t\t\tthis.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) +\n\t\t\t(this.footer?.text.length ?? 0) +\n\t\t\t(this.author?.name.length ?? 0)\n\t\t);\n\t}\n\n\t/**\n\t * Adds a field to the embed (max 25)\n\t *\n\t * @param field The field to add.\n\t */\n\tpublic addField(field: APIEmbedField): this {\n\t\treturn this.addFields(field);\n\t}\n\n\t/**\n\t * Adds fields to the embed (max 25)\n\t *\n\t * @param fields The fields to add\n\t */\n\tpublic addFields(...fields: APIEmbedField[]): this {\n\t\t// Data assertions\n\t\tembedFieldsArrayPredicate.parse(fields);\n\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(this.fields, fields.length);\n\n\t\tthis.fields.push(...Embed.normalizeFields(...fields));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts fields in the embed (max 25)\n\t *\n\t * @param index The index to start at\n\t * @param deleteCount The number of fields to remove\n\t * @param fields The replacing field objects\n\t */\n\tpublic spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this {\n\t\t// Data assertions\n\t\tembedFieldsArrayPredicate.parse(fields);\n\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(this.fields, fields.length - deleteCount);\n\n\t\tthis.fields.splice(index, deleteCount, ...Embed.normalizeFields(...fields));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the author of this embed\n\t *\n\t * @param options The options for the author\n\t */\n\tpublic setAuthor(options: AuthorOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.author = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\tconst { name, iconURL, url } = options;\n\t\t// Data assertions\n\t\tauthorNamePredicate.parse(name);\n\t\turlPredicate.parse(iconURL);\n\t\turlPredicate.parse(url);\n\n\t\tthis.author = { name, url, icon_url: iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the color of this embed\n\t *\n\t * @param color The color of the embed\n\t */\n\tpublic setColor(color: number | null): this {\n\t\t// Data assertions\n\t\tcolorPredicate.parse(color);\n\n\t\tthis.color = color ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this embed\n\t *\n\t * @param description The description\n\t */\n\tpublic setDescription(description: string | null): this {\n\t\t// Data assertions\n\t\tdescriptionPredicate.parse(description);\n\n\t\tthis.description = description ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the footer of this embed\n\t *\n\t * @param options The options for the footer\n\t */\n\tpublic setFooter(options: FooterOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.footer = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\tconst { text, iconURL } = options;\n\t\t// Data assertions\n\t\tfooterTextPredicate.parse(text);\n\t\turlPredicate.parse(iconURL);\n\n\t\tthis.footer = { text, icon_url: iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the image of this embed\n\t *\n\t * @param url The URL of the image\n\t */\n\tpublic setImage(url: string | null): this {\n\t\t// Data assertions\n\t\turlPredicate.parse(url);\n\n\t\tthis.image = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the thumbnail of this embed\n\t *\n\t * @param url The URL of the thumbnail\n\t */\n\tpublic setThumbnail(url: string | null): this {\n\t\t// Data assertions\n\t\turlPredicate.parse(url);\n\n\t\tthis.thumbnail = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the timestamp of this embed\n\t *\n\t * @param timestamp The timestamp or date\n\t */\n\tpublic setTimestamp(timestamp: number | Date | null = Date.now()): this {\n\t\t// Data assertions\n\t\ttimestampPredicate.parse(timestamp);\n\n\t\tthis.timestamp = timestamp ? new Date(timestamp).toISOString() : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the title of this embed\n\t *\n\t * @param title The title\n\t */\n\tpublic setTitle(title: string | null): this {\n\t\t// Data assertions\n\t\ttitlePredicate.parse(title);\n\n\t\tthis.title = title ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL of this embed\n\t *\n\t * @param url The URL\n\t */\n\tpublic setURL(url: string | null): this {\n\t\t// Data assertions\n\t\turlPredicate.parse(url);\n\n\t\tthis.url = url ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transforms the embed to a plain object\n\t */\n\tpublic toJSON(): APIEmbed {\n\t\treturn { ...this };\n\t}\n\n\t/**\n\t * Normalizes field input and resolves strings\n\t *\n\t * @param fields Fields to normalize\n\t */\n\tpublic static normalizeFields(...fields: APIEmbedField[]): APIEmbedField[] {\n\t\treturn fields.flat(Infinity).map((field) => {\n\t\t\tfieldNamePredicate.parse(field.name);\n\t\t\tfieldValuePredicate.parse(field.value);\n\t\t\tfieldInlinePredicate.parse(field.inline);\n\n\t\t\treturn { name: field.name, value: field.value, inline: field.inline ?? undefined };\n\t\t});\n\t}\n}\n","import type { Snowflake } from 'discord-api-types/globals';\nimport type { URL } from 'url';\n\n/**\n * Wraps the content inside a codeblock with no language\n *\n * @param content The content to wrap\n */\nexport function codeBlock<C extends string>(content: C): `\\`\\`\\`\\n${C}\\`\\`\\``;\n\n/**\n * Wraps the content inside a codeblock with the specified language\n *\n * @param language The language for the codeblock\n * @param content The content to wrap\n */\nexport function codeBlock<L extends string, C extends string>(language: L, content: C): `\\`\\`\\`${L}\\n${C}\\`\\`\\``;\nexport function codeBlock(language: string, content?: string): string {\n\treturn typeof content === 'undefined' ? `\\`\\`\\`\\n${language}\\`\\`\\`` : `\\`\\`\\`${language}\\n${content}\\`\\`\\``;\n}\n\n/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code\n *\n * @param content The content to wrap\n */\nexport function inlineCode<C extends string>(content: C): `\\`${C}\\`` {\n\treturn `\\`${content}\\``;\n}\n\n/**\n * Formats the content into italic text\n *\n * @param content The content to wrap\n */\nexport function italic<C extends string>(content: C): `_${C}_` {\n\treturn `_${content}_`;\n}\n\n/**\n * Formats the content into bold text\n *\n * @param content The content to wrap\n */\nexport function bold<C extends string>(content: C): `**${C}**` {\n\treturn `**${content}**`;\n}\n\n/**\n * Formats the content into underscored text\n *\n * @param content The content to wrap\n */\nexport function underscore<C extends string>(content: C): `__${C}__` {\n\treturn `__${content}__`;\n}\n\n/**\n * Formats the content into strike-through text\n *\n * @param content The content to wrap\n */\nexport function strikethrough<C extends string>(content: C): `~~${C}~~` {\n\treturn `~~${content}~~`;\n}\n\n/**\n * Formats the content into a quote. This needs to be at the start of the line for Discord to format it\n *\n * @param content The content to wrap\n */\nexport function quote<C extends string>(content: C): `> ${C}` {\n\treturn `> ${content}`;\n}\n\n/**\n * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it\n *\n * @param content The content to wrap\n */\nexport function blockQuote<C extends string>(content: C): `>>> ${C}` {\n\treturn `>>> ${content}`;\n}\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding\n *\n * @param url The URL to wrap\n */\nexport function hideLinkEmbed<C extends string>(url: C): `<${C}>`;\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding\n *\n * @param url The URL to wrap\n */\nexport function hideLinkEmbed(url: URL): `<${string}>`;\nexport function hideLinkEmbed(url: string | URL) {\n\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\treturn `<${url}>`;\n}\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content The content to display\n * @param url The URL the content links to\n */\nexport function hyperlink<C extends string>(content: C, url: URL): `[${C}](${string})`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content The content to display\n * @param url The URL the content links to\n */\nexport function hyperlink<C extends string, U extends string>(content: C, url: U): `[${C}](${U})`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content The content to display\n * @param url The URL the content links to\n * @param title The title shown when hovering on the masked link\n */\nexport function hyperlink<C extends string, T extends string>(\n\tcontent: C,\n\turl: URL,\n\ttitle: T,\n): `[${C}](${string} \"${T}\")`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content The content to display\n * @param url The URL the content links to\n * @param title The title shown when hovering on the masked link\n */\nexport function hyperlink<C extends string, U extends string, T extends string>(\n\tcontent: C,\n\turl: U,\n\ttitle: T,\n): `[${C}](${U} \"${T}\")`;\nexport function hyperlink(content: string, url: string | URL, title?: string) {\n\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\treturn title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n\n/**\n * Wraps the content inside spoiler (hidden text)\n *\n * @param content The content to wrap\n */\nexport function spoiler<C extends string>(content: C): `||${C}||` {\n\treturn `||${content}||`;\n}\n\n/**\n * Formats a user ID into a user mention\n *\n * @param userId The user ID to format\n */\nexport function userMention<C extends Snowflake>(userId: C): `<@${C}>` {\n\treturn `<@${userId}>`;\n}\n\n/**\n * Formats a user ID into a member-nickname mention\n *\n * @param memberId The user ID to format\n */\nexport function memberNicknameMention<C extends Snowflake>(memberId: C): `<@!${C}>` {\n\treturn `<@!${memberId}>`;\n}\n\n/**\n * Formats a channel ID into a channel mention\n *\n * @param channelId The channel ID to format\n */\nexport function channelMention<C extends Snowflake>(channelId: C): `<#${C}>` {\n\treturn `<#${channelId}>`;\n}\n\n/**\n * Formats a role ID into a role mention\n *\n * @param roleId The role ID to format\n */\nexport function roleMention<C extends Snowflake>(roleId: C): `<@&${C}>` {\n\treturn `<@&${roleId}>`;\n}\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId The emoji ID to format\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: false): `<:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId The emoji ID to format\n * @param animated Whether the emoji is animated or not. Defaults to `false`\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: true): `<a:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId The emoji ID to format\n * @param animated Whether the emoji is animated or not. Defaults to `false`\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated = false): `<a:_:${C}>` | `<:_:${C}>` {\n\treturn `<${animated ? 'a' : ''}:_:${emojiId}>`;\n}\n\n/**\n * Formats a date into a short date-time string\n *\n * @param date The date to format, defaults to the current time\n */\nexport function time(date?: Date): `<t:${bigint}>`;\n\n/**\n * Formats a date given a format style\n *\n * @param date The date to format\n * @param style The style to use\n */\nexport function time<S extends TimestampStylesString>(date: Date, style: S): `<t:${bigint}:${S}>`;\n\n/**\n * Formats the given timestamp into a short date-time string\n *\n * @param seconds The time to format, represents an UNIX timestamp in seconds\n */\nexport function time<C extends number>(seconds: C): `<t:${C}>`;\n\n/**\n * Formats the given timestamp into a short date-time string\n *\n * @param seconds The time to format, represents an UNIX timestamp in seconds\n * @param style The style to use\n */\nexport function time<C extends number, S extends TimestampStylesString>(seconds: C, style: S): `<t:${C}:${S}>`;\nexport function time(timeOrSeconds?: number | Date, style?: TimestampStylesString): string {\n\tif (typeof timeOrSeconds !== 'number') {\n\t\ttimeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1000);\n\t}\n\n\treturn typeof style === 'string' ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n\n/**\n * The [message formatting timestamp styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord\n */\nexport const TimestampStyles = {\n\t/**\n\t * Short time format, consisting of hours and minutes, e.g. 16:20\n\t */\n\tShortTime: 't',\n\n\t/**\n\t * Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30\n\t */\n\tLongTime: 'T',\n\n\t/**\n\t * Short date format, consisting of day, month, and year, e.g. 20/04/2021\n\t */\n\tShortDate: 'd',\n\n\t/**\n\t * Long date format, consisting of day, month, and year, e.g. 20 April 2021\n\t */\n\tLongDate: 'D',\n\n\t/**\n\t * Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20\n\t */\n\tShortDateTime: 'f',\n\n\t/**\n\t * Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20\n\t */\n\tLongDateTime: 'F',\n\n\t/**\n\t * Relative time format, consisting of a relative duration format, e.g. 2 months ago\n\t */\n\tRelativeTime: 'R',\n} as const;\n\n/**\n * The possible values, see {@link TimestampStyles} for more information\n */\nexport type TimestampStylesString = typeof TimestampStyles[keyof typeof TimestampStyles];\n\n/**\n * An enum with all the available faces from Discord's native slash commands\n */\nexport enum Faces {\n\t/**\n\t * ¯\\\\_(ツ)\\\\_/¯\n\t */\n\tShrug = '¯\\\\_(ツ)\\\\_/¯',\n\n\t/**\n\t * (╯°□°）╯︵ ┻━┻\n\t */\n\tTableflip = '(╯°□°）╯︵ ┻━┻',\n\n\t/**\n\t * ┬─┬ ノ( ゜-゜ノ)\n\t */\n\tUnflip = '┬─┬ ノ( ゜-゜ノ)',\n}\n","import is from '@sindresorhus/is';\nimport type { APIApplicationCommandOptionChoice } from 'discord-api-types/v9';\nimport { z } from 'zod';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder';\nimport type { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands';\n\nexport function validateRequiredParameters(\n\tname: string,\n\tdescription: string,\n\toptions: ToAPIApplicationCommandOptions[],\n) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert description conditions\n\tvalidateDescription(description);\n\n\t// Assert options conditions\n\tvalidateMaxOptionsLength(options);\n}\n\nconst namePredicate = z\n\t.string()\n\t.min(1)\n\t.max(32)\n\t.regex(/^[\\P{Lu}\\p{N}_-]+$/u);\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nconst descriptionPredicate = z.string().min(1).max(100);\n\nexport function validateDescription(description: unknown): asserts description is string {\n\tdescriptionPredicate.parse(description);\n}\n\nconst booleanPredicate = z.boolean();\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateRequired(required: unknown): asserts required is boolean {\n\tbooleanPredicate.parse(required);\n}\n\nconst maxArrayLengthPredicate = z.unknown().array().max(25);\n\nexport function validateMaxOptionsLength(options: unknown): asserts options is ToAPIApplicationCommandOptions[] {\n\tmaxArrayLengthPredicate.parse(options);\n}\n\nexport function validateMaxChoicesLength(choices: APIApplicationCommandOptionChoice[]) {\n\tmaxArrayLengthPredicate.parse(choices);\n}\n\nexport function assertReturnOfBuilder<\n\tT extends ApplicationCommandOptionBase | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder,\n>(input: unknown, ExpectedInstanceOf: new () => T): asserts input is T {\n\tconst instanceName = ExpectedInstanceOf.name;\n\n\tif (is.nullOrUndefined(input)) {\n\t\tthrow new TypeError(\n\t\t\t`Expected to receive a ${instanceName} builder, got ${input === null ? 'null' : 'undefined'} instead.`,\n\t\t);\n\t}\n\n\tif (is.primitive(input)) {\n\t\tthrow new TypeError(`Expected to receive a ${instanceName} builder, got a primitive (${typeof input}) instead.`);\n\t}\n\n\tif (!(input instanceof ExpectedInstanceOf)) {\n\t\tconst casted = input as Record<PropertyKey, unknown>;\n\n\t\tconst constructorName = is.function_(input) ? input.name : casted.constructor.name;\n\t\tconst stringTag = Reflect.get(casted, Symbol.toStringTag) as string | undefined;\n\n\t\tconst fullResultName = stringTag ? `${constructorName} [${stringTag}]` : constructorName;\n\n\t\tthrow new TypeError(`Expected to receive a ${instanceName} builder, got ${fullResultName} instead.`);\n\t}\n}\n","import type { APIApplicationCommandOption, RESTPostAPIApplicationCommandsJSONBody } from 'discord-api-types/v9';\nimport { mix } from 'ts-mixer';\nimport {\n\tassertReturnOfBuilder,\n\tvalidateDefaultPermission,\n\tvalidateMaxOptionsLength,\n\tvalidateRequiredParameters,\n} from './Assertions';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription';\nimport { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands';\n\n@mix(SharedSlashCommandOptions, SharedNameAndDescription)\nexport class SlashCommandBuilder {\n\t/**\n\t * The name of this slash command\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this slash command\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The options of this slash command\n\t */\n\tpublic readonly options: ToAPIApplicationCommandOptions[] = [];\n\n\t/**\n\t * Whether the command is enabled by default when the app is added to a guild\n\t *\n\t * @default true\n\t */\n\tpublic readonly defaultPermission: boolean | undefined = undefined;\n\n\t/**\n\t * Returns the final data that should be sent to Discord.\n\t *\n\t * **Note:** Calling this function will validate required properties based on their conditions.\n\t */\n\tpublic toJSON(): RESTPostAPIApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t\tdefault_permission: this.defaultPermission,\n\t\t};\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * **Note**: If set to `false`, you will have to later `PUT` the permissions for this command.\n\t *\n\t * @param value Whether or not to enable this command by default\n\t *\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'defaultPermission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand group to this command\n\t *\n\t * @param input A function that returns a subcommand group builder, or an already built builder\n\t */\n\tpublic addSubcommandGroup(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandGroupBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandGroupBuilder) => SlashCommandSubcommandGroupBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandGroupBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand to this command\n\t *\n\t * @param input A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n\nexport interface SlashCommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions {}\n\nexport interface SlashCommandSubcommandsOnlyBuilder\n\textends SharedNameAndDescription,\n\t\tPick<SlashCommandBuilder, 'toJSON' | 'addSubcommand' | 'addSubcommandGroup'> {}\n\nexport interface SlashCommandOptionsOnlyBuilder\n\textends SharedNameAndDescription,\n\t\tSharedSlashCommandOptions,\n\t\tPick<SlashCommandBuilder, 'toJSON'> {}\n\nexport interface ToAPIApplicationCommandOptions {\n\ttoJSON(): APIApplicationCommandOption;\n}\n","import { APIApplicationCommandBooleanOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandBooleanOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.Boolean as const;\n\n\tpublic toJSON(): APIApplicationCommandBooleanOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { validateDescription, validateName } from '../Assertions';\n\nexport class SharedNameAndDescription {\n\tpublic readonly name!: string;\n\tpublic readonly description!: string;\n\n\t/**\n\t * Sets the name\n\t *\n\t * @param name The name\n\t */\n\tpublic setName(name: string) {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description\n\t *\n\t * @param description The description\n\t */\n\tpublic setDescription(description: string) {\n\t\t// Assert the description matches the conditions\n\t\tvalidateDescription(description);\n\n\t\tReflect.set(this, 'description', description);\n\n\t\treturn this;\n\t}\n}\n","import type { APIApplicationCommandBasicOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { validateRequiredParameters, validateRequired } from '../Assertions';\nimport { SharedNameAndDescription } from './NameAndDescription';\n\nexport abstract class ApplicationCommandOptionBase extends SharedNameAndDescription {\n\tpublic abstract readonly type: ApplicationCommandOptionType;\n\n\tpublic readonly required = false;\n\n\t/**\n\t * Marks the option as required\n\t *\n\t * @param required If this option should be required\n\t */\n\tpublic setRequired(required: boolean) {\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(required);\n\n\t\tReflect.set(this, 'required', required);\n\n\t\treturn this;\n\t}\n\n\tpublic abstract toJSON(): APIApplicationCommandBasicOption;\n\n\tprotected runRequiredValidations() {\n\t\tvalidateRequiredParameters(this.name, this.description, []);\n\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(this.required);\n\t}\n}\n","import { APIApplicationCommandChannelOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\nimport { ApplicationCommandOptionChannelTypesMixin } from '../mixins/ApplicationCommandOptionChannelTypesMixin';\n\n@mix(ApplicationCommandOptionChannelTypesMixin)\nexport class SlashCommandChannelOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Channel as const;\n\n\tpublic toJSON(): APIApplicationCommandChannelOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandChannelOption extends ApplicationCommandOptionChannelTypesMixin {}\n","import { ChannelType } from 'discord-api-types/v9';\nimport { z, ZodLiteral } from 'zod';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildNews,\n\tChannelType.GuildStore,\n\tChannelType.GuildNewsThread,\n\tChannelType.GuildPublicThread,\n\tChannelType.GuildPrivateThread,\n\tChannelType.GuildStageVoice,\n] as const;\n\nexport type ApplicationCommandOptionAllowedChannelTypes = typeof allowedChannelTypes[number];\n\nconst channelTypePredicate = z.union(\n\tallowedChannelTypes.map((type) => z.literal(type)) as [\n\t\tZodLiteral<ChannelType>,\n\t\tZodLiteral<ChannelType>,\n\t\t...ZodLiteral<ChannelType>[]\n\t],\n);\n\nexport class ApplicationCommandOptionChannelTypesMixin {\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds a channel type to this option\n\t *\n\t * @param channelType The type of channel to allow\n\t */\n\tpublic addChannelType(channelType: ApplicationCommandOptionAllowedChannelTypes) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tchannelTypePredicate.parse(channelType);\n\t\tthis.channel_types!.push(channelType);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds channel types to this option\n\t *\n\t * @param channelTypes The channel types to add\n\t */\n\tpublic addChannelTypes(channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tchannelTypes.forEach((channelType) => this.addChannelType(channelType));\n\t\treturn this;\n\t}\n}\n","import { APIApplicationCommandIntegerOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { mix } from 'ts-mixer';\nimport { z } from 'zod';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin';\n\nconst numberValidator = z.number().int().nonnegative();\n\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandIntegerOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\tpublic readonly type = ApplicationCommandOptionType.Integer as const;\n\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'maxValue', max);\n\n\t\treturn this;\n\t}\n\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'minValue', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandIntegerOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandIntegerOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","export abstract class ApplicationCommandNumericOptionMinMaxValueMixin {\n\tprotected readonly maxValue?: number;\n\tprotected readonly minValue?: number;\n\n\t/**\n\t * Sets the maximum number value of this option\n\t * @param max The maximum value this option can be\n\t */\n\tpublic abstract setMaxValue(max: number): this;\n\n\t/**\n\t * Sets the minimum number value of this option\n\t * @param min The minimum value this option can be\n\t */\n\tpublic abstract setMinValue(min: number): this;\n}\n","import { APIApplicationCommandOptionChoice, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { z } from 'zod';\nimport { validateMaxChoicesLength } from '../Assertions';\n\nconst stringPredicate = z.string().min(1).max(100);\nconst numberPredicate = z.number().gt(-Infinity).lt(Infinity);\nconst choicesPredicate = z.tuple([stringPredicate, z.union([stringPredicate, numberPredicate])]).array();\nconst booleanPredicate = z.boolean();\n\nexport class ApplicationCommandOptionWithChoicesAndAutocompleteMixin<T extends string | number> {\n\tpublic readonly choices?: APIApplicationCommandOptionChoice<T>[];\n\tpublic readonly autocomplete?: boolean;\n\n\t// Since this is present and this is a mixin, this is needed\n\tpublic readonly type!: ApplicationCommandOptionType;\n\n\t/**\n\t * Adds a choice for this option\n\t *\n\t * @param name The name of the choice\n\t * @param value The value of the choice\n\t */\n\tpublic addChoice(name: string, value: T): Omit<this, 'setAutocomplete'> {\n\t\tif (this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tif (this.choices === undefined) {\n\t\t\tReflect.set(this, 'choices', []);\n\t\t}\n\n\t\tvalidateMaxChoicesLength(this.choices!);\n\n\t\t// Validate name\n\t\tstringPredicate.parse(name);\n\n\t\t// Validate the value\n\t\tif (this.type === ApplicationCommandOptionType.String) {\n\t\t\tstringPredicate.parse(value);\n\t\t} else {\n\t\t\tnumberPredicate.parse(value);\n\t\t}\n\n\t\tthis.choices!.push({ name, value });\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple choices for this option\n\t *\n\t * @param choices The choices to add\n\t */\n\tpublic addChoices(choices: [name: string, value: T][]): Omit<this, 'setAutocomplete'> {\n\t\tif (this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tfor (const [label, value] of choices) this.addChoice(label, value);\n\t\treturn this;\n\t}\n\n\tpublic setChoices<Input extends [name: string, value: T][]>(\n\t\tchoices: Input,\n\t): Input extends []\n\t\t? this & Pick<ApplicationCommandOptionWithChoicesAndAutocompleteMixin<T>, 'setAutocomplete'>\n\t\t: Omit<this, 'setAutocomplete'> {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tReflect.set(this, 'choices', []);\n\t\tfor (const [label, value] of choices) this.addChoice(label, value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Marks the option as autocompletable\n\t * @param autocomplete If this option should be autocompletable\n\t */\n\tpublic setAutocomplete<U extends boolean>(\n\t\tautocomplete: U,\n\t): U extends true\n\t\t? Omit<this, 'addChoice' | 'addChoices'>\n\t\t: this & Pick<ApplicationCommandOptionWithChoicesAndAutocompleteMixin<T>, 'addChoice' | 'addChoices'> {\n\t\t// Assert that you actually passed a boolean\n\t\tbooleanPredicate.parse(autocomplete);\n\n\t\tif (autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tReflect.set(this, 'autocomplete', autocomplete);\n\n\t\treturn this;\n\t}\n}\n","import { APIApplicationCommandMentionableOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandMentionableOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.Mentionable as const;\n\n\tpublic toJSON(): APIApplicationCommandMentionableOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { APIApplicationCommandNumberOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { mix } from 'ts-mixer';\nimport { z } from 'zod';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin';\n\nconst numberValidator = z.number().nonnegative();\n\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandNumberOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\tpublic readonly type = ApplicationCommandOptionType.Number as const;\n\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'maxValue', max);\n\n\t\treturn this;\n\t}\n\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'minValue', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandNumberOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandNumberOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","import { APIApplicationCommandRoleOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandRoleOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Role as const;\n\n\tpublic toJSON(): APIApplicationCommandRoleOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { APIApplicationCommandStringOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin';\n\n@mix(ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandStringOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.String as const;\n\n\tpublic toJSON(): APIApplicationCommandStringOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandStringOption extends ApplicationCommandOptionWithChoicesAndAutocompleteMixin<string> {}\n","import { APIApplicationCommandUserOption, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandUserOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.User as const;\n\n\tpublic toJSON(): APIApplicationCommandUserOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { assertReturnOfBuilder, validateMaxOptionsLength } from '../Assertions';\nimport type { ApplicationCommandOptionBase } from './ApplicationCommandOptionBase';\nimport { SlashCommandBooleanOption } from '../options/boolean';\nimport { SlashCommandChannelOption } from '../options/channel';\nimport { SlashCommandIntegerOption } from '../options/integer';\nimport { SlashCommandMentionableOption } from '../options/mentionable';\nimport { SlashCommandNumberOption } from '../options/number';\nimport { SlashCommandRoleOption } from '../options/role';\nimport { SlashCommandStringOption } from '../options/string';\nimport { SlashCommandUserOption } from '../options/user';\nimport type { ToAPIApplicationCommandOptions } from '../SlashCommandBuilder';\n\nexport class SharedSlashCommandOptions<ShouldOmitSubcommandFunctions = true> {\n\tpublic readonly options!: ToAPIApplicationCommandOptions[];\n\n\t/**\n\t * Adds a boolean option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addBooleanOption(\n\t\tinput: SlashCommandBooleanOption | ((builder: SlashCommandBooleanOption) => SlashCommandBooleanOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n\t}\n\n\t/**\n\t * Adds a user option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addUserOption(input: SlashCommandUserOption | ((builder: SlashCommandUserOption) => SlashCommandUserOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandUserOption);\n\t}\n\n\t/**\n\t * Adds a channel option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addChannelOption(\n\t\tinput: SlashCommandChannelOption | ((builder: SlashCommandChannelOption) => SlashCommandChannelOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n\t}\n\n\t/**\n\t * Adds a role option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addRoleOption(input: SlashCommandRoleOption | ((builder: SlashCommandRoleOption) => SlashCommandRoleOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n\t}\n\n\t/**\n\t * Adds a mentionable option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addMentionableOption(\n\t\tinput: SlashCommandMentionableOption | ((builder: SlashCommandMentionableOption) => SlashCommandMentionableOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n\t}\n\n\t/**\n\t * Adds a string option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addStringOption(\n\t\tinput:\n\t\t\t| SlashCommandStringOption\n\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t| Omit<SlashCommandStringOption, 'addChoice' | 'addChoices'>\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandStringOption,\n\t\t\t  ) =>\n\t\t\t\t\t| SlashCommandStringOption\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'addChoice' | 'addChoices'>),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandStringOption);\n\t}\n\n\t/**\n\t * Adds an integer option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addIntegerOption(\n\t\tinput:\n\t\t\t| SlashCommandIntegerOption\n\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t| Omit<SlashCommandIntegerOption, 'addChoice' | 'addChoices'>\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandIntegerOption,\n\t\t\t  ) =>\n\t\t\t\t\t| SlashCommandIntegerOption\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'addChoice' | 'addChoices'>),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n\t}\n\n\t/**\n\t * Adds a number option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addNumberOption(\n\t\tinput:\n\t\t\t| SlashCommandNumberOption\n\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t| Omit<SlashCommandNumberOption, 'addChoice' | 'addChoices'>\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandNumberOption,\n\t\t\t  ) =>\n\t\t\t\t\t| SlashCommandNumberOption\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'addChoice' | 'addChoices'>),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandNumberOption);\n\t}\n\n\tprivate _sharedAddOptionMethod<T extends ApplicationCommandOptionBase>(\n\t\tinput:\n\t\t\t| T\n\t\t\t| Omit<T, 'setAutocomplete'>\n\t\t\t| Omit<T, 'addChoice' | 'addChoices'>\n\t\t\t| ((builder: T) => T | Omit<T, 'setAutocomplete'> | Omit<T, 'addChoice' | 'addChoices'>),\n\t\tInstance: new () => T,\n\t): ShouldOmitSubcommandFunctions extends true ? Omit<this, 'addSubcommand' | 'addSubcommandGroup'> : this {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new Instance()) : input;\n\n\t\tassertReturnOfBuilder(result, Instance);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n","import {\n\tAPIApplicationCommandSubcommandGroupOption,\n\tAPIApplicationCommandSubcommandOption,\n\tApplicationCommandOptionType,\n} from 'discord-api-types/v9';\nimport { mix } from 'ts-mixer';\nimport { assertReturnOfBuilder, validateMaxOptionsLength, validateRequiredParameters } from './Assertions';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder';\n\n/**\n * Represents a folder for subcommands\n *\n * For more information, go to https://discord.com/developers/docs/interactions/slash-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription)\nexport class SlashCommandSubcommandGroupBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand group\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand group\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The subcommands part of this subcommand group\n\t */\n\tpublic readonly options: SlashCommandSubcommandBuilder[] = [];\n\n\t/**\n\t * Adds a new subcommand to this group\n\t *\n\t * @param input A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t) {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandSubcommandGroupOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.SubcommandGroup,\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandGroupBuilder extends SharedNameAndDescription {}\n\n/**\n * Represents a subcommand\n *\n * For more information, go to https://discord.com/developers/docs/interactions/slash-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription, SharedSlashCommandOptions)\nexport class SlashCommandSubcommandBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The options of this subcommand\n\t */\n\tpublic readonly options: ApplicationCommandOptionBase[] = [];\n\n\tpublic toJSON(): APIApplicationCommandSubcommandOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.Subcommand,\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions<false> {}\n","import { z } from 'zod';\nimport { ApplicationCommandType } from 'discord-api-types/v9';\nimport type { ContextMenuCommandType } from './ContextMenuCommandBuilder';\n\nexport function validateRequiredParameters(name: string, type: number) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert type is valid\n\tvalidateType(type);\n}\n\nconst namePredicate = z\n\t.string()\n\t.min(1)\n\t.max(32)\n\t.regex(/^( *[\\p{L}\\p{N}_-]+ *)+$/u);\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nconst typePredicate = z.union([z.literal(ApplicationCommandType.User), z.literal(ApplicationCommandType.Message)]);\n\nexport function validateType(type: unknown): asserts type is ContextMenuCommandType {\n\ttypePredicate.parse(type);\n}\n\nconst booleanPredicate = z.boolean();\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n","import { validateRequiredParameters, validateName, validateType, validateDefaultPermission } from './Assertions';\nimport type { ApplicationCommandType, RESTPostAPIApplicationCommandsJSONBody } from 'discord-api-types/v9';\n\nexport class ContextMenuCommandBuilder {\n\t/**\n\t * The name of this context menu command\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The type of this context menu command\n\t */\n\tpublic readonly type: ContextMenuCommandType = undefined!;\n\n\t/**\n\t * Whether the command is enabled by default when the app is added to a guild\n\t *\n\t * @default true\n\t */\n\tpublic readonly defaultPermission: boolean | undefined = undefined;\n\n\t/**\n\t * Sets the name\n\t *\n\t * @param name The name\n\t */\n\tpublic setName(name: string) {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the type\n\t *\n\t * @param type The type\n\t */\n\tpublic setType(type: ContextMenuCommandType) {\n\t\t// Assert the type is valid\n\t\tvalidateType(type);\n\n\t\tReflect.set(this, 'type', type);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * **Note**: If set to `false`, you will have to later `PUT` the permissions for this command.\n\t *\n\t * @param value Whether or not to enable this command by default\n\t *\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'defaultPermission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the final data that should be sent to Discord.\n\t *\n\t * **Note:** Calling this function will validate required properties based on their conditions.\n\t */\n\tpublic toJSON(): RESTPostAPIApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.type);\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\ttype: this.type,\n\t\t\tdefault_permission: this.defaultPermission,\n\t\t};\n\t}\n}\n\nexport type ContextMenuCommandType = ApplicationCommandType.User | ApplicationCommandType.Message;\n"]},"metadata":{},"sourceType":"module"}