{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst Base = require('./Base');\n\nconst WidgetMember = require('./WidgetMember');\n/**\n * Represents a Widget.\n */\n\n\nclass Widget extends Base {\n  constructor(client, data) {\n    super(client);\n\n    this._patch(data);\n  }\n  /**\n   * Represents a channel in a Widget\n   * @typedef {Object} WidgetChannel\n   * @property {Snowflake} id Id of the channel\n   * @property {string} name Name of the channel\n   * @property {number} position Position of the channel\n   */\n\n\n  _patch(data) {\n    /**\n     * The id of the guild.\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the guild.\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('instant_invite' in data) {\n      /**\n       * The invite of the guild.\n       * @type {?string}\n       */\n      this.instantInvite = data.instant_invite;\n    }\n    /**\n     * The list of channels in the guild.\n     * @type {Collection<Snowflake, WidgetChannel>}\n     */\n\n\n    this.channels = new Collection();\n\n    for (const channel of data.channels) {\n      this.channels.set(channel.id, channel);\n    }\n    /**\n     * The list of members in the guild.\n     * These strings are just arbitrary numbers, they aren't Snowflakes.\n     * @type {Collection<string, WidgetMember>}\n     */\n\n\n    this.members = new Collection();\n\n    for (const member of data.members) {\n      this.members.set(member.id, new WidgetMember(this.client, member));\n    }\n\n    if ('presence_count' in data) {\n      /**\n       * The number of members online.\n       * @type {number}\n       */\n      this.presenceCount = data.presence_count;\n    }\n  }\n  /**\n   * Update the Widget.\n   * @returns {Promise<Widget>}\n   */\n\n\n  async fetch() {\n    const data = await this.client.api.guilds(this.id, 'widget.json').get();\n\n    this._patch(data);\n\n    return this;\n  }\n\n}\n\nmodule.exports = Widget;","map":{"version":3,"names":["Collection","require","Base","WidgetMember","Widget","constructor","client","data","_patch","id","name","instantInvite","instant_invite","channels","channel","set","members","member","presenceCount","presence_count","fetch","api","guilds","get","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/Widget.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\nconst WidgetMember = require('./WidgetMember');\n\n/**\n * Represents a Widget.\n */\nclass Widget extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  /**\n   * Represents a channel in a Widget\n   * @typedef {Object} WidgetChannel\n   * @property {Snowflake} id Id of the channel\n   * @property {string} name Name of the channel\n   * @property {number} position Position of the channel\n   */\n\n  _patch(data) {\n    /**\n     * The id of the guild.\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the guild.\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('instant_invite' in data) {\n      /**\n       * The invite of the guild.\n       * @type {?string}\n       */\n      this.instantInvite = data.instant_invite;\n    }\n\n    /**\n     * The list of channels in the guild.\n     * @type {Collection<Snowflake, WidgetChannel>}\n     */\n    this.channels = new Collection();\n    for (const channel of data.channels) {\n      this.channels.set(channel.id, channel);\n    }\n\n    /**\n     * The list of members in the guild.\n     * These strings are just arbitrary numbers, they aren't Snowflakes.\n     * @type {Collection<string, WidgetMember>}\n     */\n    this.members = new Collection();\n    for (const member of data.members) {\n      this.members.set(member.id, new WidgetMember(this.client, member));\n    }\n\n    if ('presence_count' in data) {\n      /**\n       * The number of members online.\n       * @type {number}\n       */\n      this.presenceCount = data.presence_count;\n    }\n  }\n\n  /**\n   * Update the Widget.\n   * @returns {Promise<Widget>}\n   */\n  async fetch() {\n    const data = await this.client.api.guilds(this.id, 'widget.json').get();\n    this._patch(data);\n    return this;\n  }\n}\n\nmodule.exports = Widget;\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B;AAEA;AACA;AACA;;;AACA,MAAMG,MAAN,SAAqBF,IAArB,CAA0B;EACxBG,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAN;;IACA,KAAKE,MAAL,CAAYD,IAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EAEEC,MAAM,CAACD,IAAD,EAAO;IACX;AACJ;AACA;AACA;IACI,KAAKE,EAAL,GAAUF,IAAI,CAACE,EAAf;;IAEA,IAAI,UAAUF,IAAd,EAAoB;MAClB;AACN;AACA;AACA;MACM,KAAKG,IAAL,GAAYH,IAAI,CAACG,IAAjB;IACD;;IAED,IAAI,oBAAoBH,IAAxB,EAA8B;MAC5B;AACN;AACA;AACA;MACM,KAAKI,aAAL,GAAqBJ,IAAI,CAACK,cAA1B;IACD;IAED;AACJ;AACA;AACA;;;IACI,KAAKC,QAAL,GAAgB,IAAIb,UAAJ,EAAhB;;IACA,KAAK,MAAMc,OAAX,IAAsBP,IAAI,CAACM,QAA3B,EAAqC;MACnC,KAAKA,QAAL,CAAcE,GAAd,CAAkBD,OAAO,CAACL,EAA1B,EAA8BK,OAA9B;IACD;IAED;AACJ;AACA;AACA;AACA;;;IACI,KAAKE,OAAL,GAAe,IAAIhB,UAAJ,EAAf;;IACA,KAAK,MAAMiB,MAAX,IAAqBV,IAAI,CAACS,OAA1B,EAAmC;MACjC,KAAKA,OAAL,CAAaD,GAAb,CAAiBE,MAAM,CAACR,EAAxB,EAA4B,IAAIN,YAAJ,CAAiB,KAAKG,MAAtB,EAA8BW,MAA9B,CAA5B;IACD;;IAED,IAAI,oBAAoBV,IAAxB,EAA8B;MAC5B;AACN;AACA;AACA;MACM,KAAKW,aAAL,GAAqBX,IAAI,CAACY,cAA1B;IACD;EACF;EAED;AACF;AACA;AACA;;;EACa,MAALC,KAAK,GAAG;IACZ,MAAMb,IAAI,GAAG,MAAM,KAAKD,MAAL,CAAYe,GAAZ,CAAgBC,MAAhB,CAAuB,KAAKb,EAA5B,EAAgC,aAAhC,EAA+Cc,GAA/C,EAAnB;;IACA,KAAKf,MAAL,CAAYD,IAAZ;;IACA,OAAO,IAAP;EACD;;AAzEuB;;AA4E1BiB,MAAM,CAACC,OAAP,GAAiBrB,MAAjB"},"metadata":{},"sourceType":"script"}