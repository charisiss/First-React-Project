{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst Collector = require('./interfaces/Collector');\n\nconst {\n  Events\n} = require('../util/Constants');\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n * {@link Client#event:messageDeleteBulk messageDeleteBulk}),\n * channel ({@link Client#event:channelDelete channelDelete}),\n * thread ({@link Client#event:threadDelete threadDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * @extends {Collector}\n */\n\n\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(message.client, options);\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n\n    this.message = message;\n    /**\n     * The users that have reacted to this message\n     * @type {Collection}\n     */\n\n    this.users = new Collection();\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n\n    this.total = 0;\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n\n    const bulkDeleteListener = messages => {\n      if (messages.has(this.message.id)) this.stop('messageDelete');\n    };\n\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n    this.client.on(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n    this.client.on(Events.MESSAGE_BULK_DELETE, bulkDeleteListener);\n    this.client.on(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n    this.client.on(Events.THREAD_DELETE, this._handleThreadDeletion);\n    this.client.on(Events.GUILD_DELETE, this._handleGuildDeletion);\n    this.once('end', () => {\n      this.client.removeListener(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n      this.client.removeListener(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n      this.client.removeListener(Events.MESSAGE_BULK_DELETE, bulkDeleteListener);\n      this.client.removeListener(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n      this.client.removeListener(Events.THREAD_DELETE, this._handleThreadDeletion);\n      this.client.removeListener(Events.GUILD_DELETE, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n    this.on('collect', (reaction, user) => {\n      /**\n       * Emitted whenever a reaction is newly created on a message. Will emit only when a new reaction is\n       * added to the message, as opposed to {@link Collector#collect} which will\n       * be emitted even when a reaction has already been added to the message.\n       * @event ReactionCollector#create\n       * @param {MessageReaction} reaction The reaction that was added\n       * @param {User} user The user that added the reaction\n       */\n      if (reaction.count === 1) {\n        this.emit('create', reaction, user);\n      }\n\n      this.total++;\n      this.users.set(user.id, user);\n    });\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @param {User} user The user that added the reaction\n   * @returns {?(Snowflake|string)}\n   * @private\n   */\n\n\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    return ReactionCollector.key(reaction);\n  }\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?(Snowflake|string)}\n   */\n\n\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n  /**\n   * Empties this reaction collector.\n   */\n\n\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return null;\n  }\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n\n\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n\n\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channelId || channel.threads?.cache.has(this.message.channelId)) {\n      this.stop('channelDelete');\n    }\n  }\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n\n\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.message.channelId) {\n      this.stop('threadDelete');\n    }\n  }\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n\n\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.message.guild?.id) {\n      this.stop('guildDelete');\n    }\n  }\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n\n\n  static key(reaction) {\n    return reaction.emoji.id ?? reaction.emoji.name;\n  }\n\n}\n\nmodule.exports = ReactionCollector;","map":{"version":3,"names":["Collection","require","Collector","Events","ReactionCollector","constructor","message","options","client","users","total","empty","bind","_handleChannelDeletion","_handleThreadDeletion","_handleGuildDeletion","_handleMessageDeletion","bulkDeleteListener","messages","has","id","stop","incrementMaxListeners","on","MESSAGE_REACTION_ADD","handleCollect","MESSAGE_REACTION_REMOVE","handleDispose","MESSAGE_REACTION_REMOVE_ALL","MESSAGE_DELETE","MESSAGE_BULK_DELETE","CHANNEL_DELETE","THREAD_DELETE","GUILD_DELETE","once","removeListener","decrementMaxListeners","reaction","user","count","emit","set","collected","some","r","cache","delete","collect","key","dispose","clear","checkEnd","endReason","max","maxEmojis","size","maxUsers","channel","channelId","threads","thread","guild","emoji","name","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/ReactionCollector.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Collector = require('./interfaces/Collector');\nconst { Events } = require('../util/Constants');\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n * {@link Client#event:messageDeleteBulk messageDeleteBulk}),\n * channel ({@link Client#event:channelDelete channelDelete}),\n * thread ({@link Client#event:threadDelete threadDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, options = {}) {\n    super(message.client, options);\n\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users that have reacted to this message\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n\n    const bulkDeleteListener = messages => {\n      if (messages.has(this.message.id)) this.stop('messageDelete');\n    };\n\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n    this.client.on(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n    this.client.on(Events.MESSAGE_BULK_DELETE, bulkDeleteListener);\n    this.client.on(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n    this.client.on(Events.THREAD_DELETE, this._handleThreadDeletion);\n    this.client.on(Events.GUILD_DELETE, this._handleGuildDeletion);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n      this.client.removeListener(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n      this.client.removeListener(Events.MESSAGE_BULK_DELETE, bulkDeleteListener);\n      this.client.removeListener(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n      this.client.removeListener(Events.THREAD_DELETE, this._handleThreadDeletion);\n      this.client.removeListener(Events.GUILD_DELETE, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n\n    this.on('collect', (reaction, user) => {\n      /**\n       * Emitted whenever a reaction is newly created on a message. Will emit only when a new reaction is\n       * added to the message, as opposed to {@link Collector#collect} which will\n       * be emitted even when a reaction has already been added to the message.\n       * @event ReactionCollector#create\n       * @param {MessageReaction} reaction The reaction that was added\n       * @param {User} user The user that added the reaction\n       */\n      if (reaction.count === 1) {\n        this.emit('create', reaction, user);\n      }\n      this.total++;\n      this.users.set(user.id, user);\n    });\n\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @param {User} user The user that added the reaction\n   * @returns {?(Snowflake|string)}\n   * @private\n   */\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    return ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?(Snowflake|string)}\n   */\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Empties this reaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return null;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channelId || channel.threads?.cache.has(this.message.channelId)) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.message.channelId) {\n      this.stop('threadDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.message.guild?.id) {\n      this.stop('guildDelete');\n    }\n  }\n\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n  static key(reaction) {\n    return reaction.emoji.id ?? reaction.emoji.name;\n  }\n}\n\nmodule.exports = ReactionCollector;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}