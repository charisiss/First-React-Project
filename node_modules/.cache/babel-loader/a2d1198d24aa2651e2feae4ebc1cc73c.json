{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst Base = require('./Base');\n\nlet CategoryChannel;\nlet DMChannel;\nlet NewsChannel;\nlet StageChannel;\nlet StoreChannel;\nlet TextChannel;\nlet ThreadChannel;\nlet VoiceChannel;\n\nconst {\n  ChannelTypes,\n  ThreadChannelTypes,\n  VoiceBasedChannelTypes\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * @type {WeakSet<Channel>}\n * @private\n * @internal\n */\n\n\nconst deletedChannels = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\n\nclass Channel extends Base {\n  constructor(client, data) {\n    let immediatePatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    super(client);\n    const type = ChannelTypes[data?.type];\n    /**\n     * The type of the channel\n     * @type {ChannelType}\n     */\n\n    this.type = type ?? 'UNKNOWN';\n    if (data && immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The channel's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * Whether or not the structure has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n\n\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Channel#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    return deletedChannels.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Channel#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    if (value) deletedChannels.add(this);else deletedChannels.delete(this);\n  }\n  /**\n   * Whether this Channel is a partial\n   * <info>This is always false outside of DM channels.</info>\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return false;\n  }\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n\n\n  toString() {\n    return `<#${this.id}>`;\n  }\n  /**\n   * Deletes this channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  async delete() {\n    await this.client.api.channels(this.id).delete();\n    return this;\n  }\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<Channel>}\n   */\n\n\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.client.channels.fetch(this.id, {\n      force\n    });\n  }\n  /**\n   * Indicates whether this channel is {@link TextBasedChannels text-based}.\n   * @returns {boolean}\n   */\n\n\n  isText() {\n    return 'messages' in this;\n  }\n  /**\n   * Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.\n   * @returns {boolean}\n   */\n\n\n  isVoice() {\n    return VoiceBasedChannelTypes.includes(this.type);\n  }\n  /**\n   * Indicates whether this channel is a {@link ThreadChannel}.\n   * @returns {boolean}\n   */\n\n\n  isThread() {\n    return ThreadChannelTypes.includes(this.type);\n  }\n\n  static create(client, data, guild) {\n    let {\n      allowUnknownGuild,\n      fromInteraction\n    } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    CategoryChannel ??= require('./CategoryChannel');\n    DMChannel ??= require('./DMChannel');\n    NewsChannel ??= require('./NewsChannel');\n    StageChannel ??= require('./StageChannel');\n    StoreChannel ??= require('./StoreChannel');\n    TextChannel ??= require('./TextChannel');\n    ThreadChannel ??= require('./ThreadChannel');\n    VoiceChannel ??= require('./VoiceChannel');\n    let channel;\n\n    if (!data.guild_id && !guild) {\n      if (data.recipients && data.type !== ChannelTypes.GROUP_DM || data.type === ChannelTypes.DM) {\n        channel = new DMChannel(client, data);\n      } else if (data.type === ChannelTypes.GROUP_DM) {\n        const PartialGroupDMChannel = require('./PartialGroupDMChannel');\n\n        channel = new PartialGroupDMChannel(client, data);\n      }\n    } else {\n      guild ??= client.guilds.cache.get(data.guild_id);\n\n      if (guild || allowUnknownGuild) {\n        switch (data.type) {\n          case ChannelTypes.GUILD_TEXT:\n            {\n              channel = new TextChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_VOICE:\n            {\n              channel = new VoiceChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_CATEGORY:\n            {\n              channel = new CategoryChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_NEWS:\n            {\n              channel = new NewsChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_STORE:\n            {\n              channel = new StoreChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_STAGE_VOICE:\n            {\n              channel = new StageChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_NEWS_THREAD:\n          case ChannelTypes.GUILD_PUBLIC_THREAD:\n          case ChannelTypes.GUILD_PRIVATE_THREAD:\n            {\n              channel = new ThreadChannel(guild, data, client, fromInteraction);\n              if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);\n              break;\n            }\n        }\n\n        if (channel && !allowUnknownGuild) guild.channels?.cache.set(channel.id, channel);\n      }\n    }\n\n    return channel;\n  }\n\n  toJSON() {\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return super.toJSON({\n      createdTimestamp: true\n    }, ...props);\n  }\n\n}\n\nexports.Channel = Channel;\nexports.deletedChannels = deletedChannels;\n/**\n * @external APIChannel\n * @see {@link https://discord.com/developers/docs/resources/channel#channel-object}\n */","map":{"version":3,"names":["process","require","Base","CategoryChannel","DMChannel","NewsChannel","StageChannel","StoreChannel","TextChannel","ThreadChannel","VoiceChannel","ChannelTypes","ThreadChannelTypes","VoiceBasedChannelTypes","SnowflakeUtil","deletedChannels","WeakSet","deprecationEmittedForDeleted","Channel","constructor","client","data","immediatePatch","type","_patch","id","createdTimestamp","timestampFrom","createdAt","Date","deleted","emitWarning","has","value","add","delete","partial","toString","api","channels","fetch","force","isText","isVoice","includes","isThread","create","guild","allowUnknownGuild","fromInteraction","channel","guild_id","recipients","GROUP_DM","DM","PartialGroupDMChannel","guilds","cache","get","GUILD_TEXT","GUILD_VOICE","GUILD_CATEGORY","GUILD_NEWS","GUILD_STORE","GUILD_STAGE_VOICE","GUILD_NEWS_THREAD","GUILD_PUBLIC_THREAD","GUILD_PRIVATE_THREAD","parent","threads","set","toJSON","props","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/Channel.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst Base = require('./Base');\nlet CategoryChannel;\nlet DMChannel;\nlet NewsChannel;\nlet StageChannel;\nlet StoreChannel;\nlet TextChannel;\nlet ThreadChannel;\nlet VoiceChannel;\nconst { ChannelTypes, ThreadChannelTypes, VoiceBasedChannelTypes } = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * @type {WeakSet<Channel>}\n * @private\n * @internal\n */\nconst deletedChannels = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\nclass Channel extends Base {\n  constructor(client, data, immediatePatch = true) {\n    super(client);\n\n    const type = ChannelTypes[data?.type];\n    /**\n     * The type of the channel\n     * @type {ChannelType}\n     */\n    this.type = type ?? 'UNKNOWN';\n\n    if (data && immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The channel's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether or not the structure has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Channel#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    return deletedChannels.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Channel#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    if (value) deletedChannels.add(this);\n    else deletedChannels.delete(this);\n  }\n\n  /**\n   * Whether this Channel is a partial\n   * <info>This is always false outside of DM channels.</info>\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return false;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return `<#${this.id}>`;\n  }\n\n  /**\n   * Deletes this channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.api.channels(this.id).delete();\n    return this;\n  }\n\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<Channel>}\n   */\n  fetch(force = true) {\n    return this.client.channels.fetch(this.id, { force });\n  }\n\n  /**\n   * Indicates whether this channel is {@link TextBasedChannels text-based}.\n   * @returns {boolean}\n   */\n  isText() {\n    return 'messages' in this;\n  }\n\n  /**\n   * Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.\n   * @returns {boolean}\n   */\n  isVoice() {\n    return VoiceBasedChannelTypes.includes(this.type);\n  }\n\n  /**\n   * Indicates whether this channel is a {@link ThreadChannel}.\n   * @returns {boolean}\n   */\n  isThread() {\n    return ThreadChannelTypes.includes(this.type);\n  }\n\n  static create(client, data, guild, { allowUnknownGuild, fromInteraction } = {}) {\n    CategoryChannel ??= require('./CategoryChannel');\n    DMChannel ??= require('./DMChannel');\n    NewsChannel ??= require('./NewsChannel');\n    StageChannel ??= require('./StageChannel');\n    StoreChannel ??= require('./StoreChannel');\n    TextChannel ??= require('./TextChannel');\n    ThreadChannel ??= require('./ThreadChannel');\n    VoiceChannel ??= require('./VoiceChannel');\n\n    let channel;\n    if (!data.guild_id && !guild) {\n      if ((data.recipients && data.type !== ChannelTypes.GROUP_DM) || data.type === ChannelTypes.DM) {\n        channel = new DMChannel(client, data);\n      } else if (data.type === ChannelTypes.GROUP_DM) {\n        const PartialGroupDMChannel = require('./PartialGroupDMChannel');\n        channel = new PartialGroupDMChannel(client, data);\n      }\n    } else {\n      guild ??= client.guilds.cache.get(data.guild_id);\n\n      if (guild || allowUnknownGuild) {\n        switch (data.type) {\n          case ChannelTypes.GUILD_TEXT: {\n            channel = new TextChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_VOICE: {\n            channel = new VoiceChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_CATEGORY: {\n            channel = new CategoryChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_NEWS: {\n            channel = new NewsChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_STORE: {\n            channel = new StoreChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_STAGE_VOICE: {\n            channel = new StageChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_NEWS_THREAD:\n          case ChannelTypes.GUILD_PUBLIC_THREAD:\n          case ChannelTypes.GUILD_PRIVATE_THREAD: {\n            channel = new ThreadChannel(guild, data, client, fromInteraction);\n            if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);\n            break;\n          }\n        }\n        if (channel && !allowUnknownGuild) guild.channels?.cache.set(channel.id, channel);\n      }\n    }\n    return channel;\n  }\n\n  toJSON(...props) {\n    return super.toJSON({ createdTimestamp: true }, ...props);\n  }\n}\n\nexports.Channel = Channel;\nexports.deletedChannels = deletedChannels;\n\n/**\n * @external APIChannel\n * @see {@link https://discord.com/developers/docs/resources/channel#channel-object}\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIE,eAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,aAAJ;AACA,IAAIC,YAAJ;;AACA,MAAM;EAAEC,YAAF;EAAgBC,kBAAhB;EAAoCC;AAApC,IAA+DZ,OAAO,CAAC,mBAAD,CAA5E;;AACA,MAAMa,aAAa,GAAGb,OAAO,CAAC,uBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMc,eAAe,GAAG,IAAIC,OAAJ,EAAxB;AACA,IAAIC,4BAA4B,GAAG,KAAnC;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBhB,IAAtB,CAA2B;EACzBiB,WAAW,CAACC,MAAD,EAASC,IAAT,EAAsC;IAAA,IAAvBC,cAAuB,uEAAN,IAAM;IAC/C,MAAMF,MAAN;IAEA,MAAMG,IAAI,GAAGZ,YAAY,CAACU,IAAI,EAAEE,IAAP,CAAzB;IACA;AACJ;AACA;AACA;;IACI,KAAKA,IAAL,GAAYA,IAAI,IAAI,SAApB;IAEA,IAAIF,IAAI,IAAIC,cAAZ,EAA4B,KAAKE,MAAL,CAAYH,IAAZ;EAC7B;;EAEDG,MAAM,CAACH,IAAD,EAAO;IACX;AACJ;AACA;AACA;IACI,KAAKI,EAAL,GAAUJ,IAAI,CAACI,EAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,IAAhBC,gBAAgB,GAAG;IACrB,OAAOZ,aAAa,CAACa,aAAd,CAA4B,KAAKF,EAAjC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,IAATG,SAAS,GAAG;IACd,OAAO,IAAIC,IAAJ,CAAS,KAAKH,gBAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAPI,OAAO,GAAG;IACZ,IAAI,CAACb,4BAAL,EAAmC;MACjCA,4BAA4B,GAAG,IAA/B;MACAjB,OAAO,CAAC+B,WAAR,CACE,yFADF,EAEE,oBAFF;IAID;;IAED,OAAOhB,eAAe,CAACiB,GAAhB,CAAoB,IAApB,CAAP;EACD;;EAEU,IAAPF,OAAO,CAACG,KAAD,EAAQ;IACjB,IAAI,CAAChB,4BAAL,EAAmC;MACjCA,4BAA4B,GAAG,IAA/B;MACAjB,OAAO,CAAC+B,WAAR,CACE,yFADF,EAEE,oBAFF;IAID;;IAED,IAAIE,KAAJ,EAAWlB,eAAe,CAACmB,GAAhB,CAAoB,IAApB,EAAX,KACKnB,eAAe,CAACoB,MAAhB,CAAuB,IAAvB;EACN;EAED;AACF;AACA;AACA;AACA;AACA;;;EACa,IAAPC,OAAO,GAAG;IACZ,OAAO,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,QAAQ,GAAG;IACT,OAAQ,KAAI,KAAKZ,EAAG,GAApB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACc,MAANU,MAAM,GAAG;IACb,MAAM,KAAKf,MAAL,CAAYkB,GAAZ,CAAgBC,QAAhB,CAAyB,KAAKd,EAA9B,EAAkCU,MAAlC,EAAN;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEK,KAAK,GAAe;IAAA,IAAdC,KAAc,uEAAN,IAAM;IAClB,OAAO,KAAKrB,MAAL,CAAYmB,QAAZ,CAAqBC,KAArB,CAA2B,KAAKf,EAAhC,EAAoC;MAAEgB;IAAF,CAApC,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEC,MAAM,GAAG;IACP,OAAO,cAAc,IAArB;EACD;EAED;AACF;AACA;AACA;;;EACEC,OAAO,GAAG;IACR,OAAO9B,sBAAsB,CAAC+B,QAAvB,CAAgC,KAAKrB,IAArC,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEsB,QAAQ,GAAG;IACT,OAAOjC,kBAAkB,CAACgC,QAAnB,CAA4B,KAAKrB,IAAjC,CAAP;EACD;;EAEY,OAANuB,MAAM,CAAC1B,MAAD,EAASC,IAAT,EAAe0B,KAAf,EAAmE;IAAA,IAA7C;MAAEC,iBAAF;MAAqBC;IAArB,CAA6C,uEAAJ,EAAI;IAC9E9C,eAAe,KAAKF,OAAO,CAAC,mBAAD,CAA3B;IACAG,SAAS,KAAKH,OAAO,CAAC,aAAD,CAArB;IACAI,WAAW,KAAKJ,OAAO,CAAC,eAAD,CAAvB;IACAK,YAAY,KAAKL,OAAO,CAAC,gBAAD,CAAxB;IACAM,YAAY,KAAKN,OAAO,CAAC,gBAAD,CAAxB;IACAO,WAAW,KAAKP,OAAO,CAAC,eAAD,CAAvB;IACAQ,aAAa,KAAKR,OAAO,CAAC,iBAAD,CAAzB;IACAS,YAAY,KAAKT,OAAO,CAAC,gBAAD,CAAxB;IAEA,IAAIiD,OAAJ;;IACA,IAAI,CAAC7B,IAAI,CAAC8B,QAAN,IAAkB,CAACJ,KAAvB,EAA8B;MAC5B,IAAK1B,IAAI,CAAC+B,UAAL,IAAmB/B,IAAI,CAACE,IAAL,KAAcZ,YAAY,CAAC0C,QAA/C,IAA4DhC,IAAI,CAACE,IAAL,KAAcZ,YAAY,CAAC2C,EAA3F,EAA+F;QAC7FJ,OAAO,GAAG,IAAI9C,SAAJ,CAAcgB,MAAd,EAAsBC,IAAtB,CAAV;MACD,CAFD,MAEO,IAAIA,IAAI,CAACE,IAAL,KAAcZ,YAAY,CAAC0C,QAA/B,EAAyC;QAC9C,MAAME,qBAAqB,GAAGtD,OAAO,CAAC,yBAAD,CAArC;;QACAiD,OAAO,GAAG,IAAIK,qBAAJ,CAA0BnC,MAA1B,EAAkCC,IAAlC,CAAV;MACD;IACF,CAPD,MAOO;MACL0B,KAAK,KAAK3B,MAAM,CAACoC,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBrC,IAAI,CAAC8B,QAA7B,CAAV;;MAEA,IAAIJ,KAAK,IAAIC,iBAAb,EAAgC;QAC9B,QAAQ3B,IAAI,CAACE,IAAb;UACE,KAAKZ,YAAY,CAACgD,UAAlB;YAA8B;cAC5BT,OAAO,GAAG,IAAI1C,WAAJ,CAAgBuC,KAAhB,EAAuB1B,IAAvB,EAA6BD,MAA7B,CAAV;cACA;YACD;;UACD,KAAKT,YAAY,CAACiD,WAAlB;YAA+B;cAC7BV,OAAO,GAAG,IAAIxC,YAAJ,CAAiBqC,KAAjB,EAAwB1B,IAAxB,EAA8BD,MAA9B,CAAV;cACA;YACD;;UACD,KAAKT,YAAY,CAACkD,cAAlB;YAAkC;cAChCX,OAAO,GAAG,IAAI/C,eAAJ,CAAoB4C,KAApB,EAA2B1B,IAA3B,EAAiCD,MAAjC,CAAV;cACA;YACD;;UACD,KAAKT,YAAY,CAACmD,UAAlB;YAA8B;cAC5BZ,OAAO,GAAG,IAAI7C,WAAJ,CAAgB0C,KAAhB,EAAuB1B,IAAvB,EAA6BD,MAA7B,CAAV;cACA;YACD;;UACD,KAAKT,YAAY,CAACoD,WAAlB;YAA+B;cAC7Bb,OAAO,GAAG,IAAI3C,YAAJ,CAAiBwC,KAAjB,EAAwB1B,IAAxB,EAA8BD,MAA9B,CAAV;cACA;YACD;;UACD,KAAKT,YAAY,CAACqD,iBAAlB;YAAqC;cACnCd,OAAO,GAAG,IAAI5C,YAAJ,CAAiByC,KAAjB,EAAwB1B,IAAxB,EAA8BD,MAA9B,CAAV;cACA;YACD;;UACD,KAAKT,YAAY,CAACsD,iBAAlB;UACA,KAAKtD,YAAY,CAACuD,mBAAlB;UACA,KAAKvD,YAAY,CAACwD,oBAAlB;YAAwC;cACtCjB,OAAO,GAAG,IAAIzC,aAAJ,CAAkBsC,KAAlB,EAAyB1B,IAAzB,EAA+BD,MAA/B,EAAuC6B,eAAvC,CAAV;cACA,IAAI,CAACD,iBAAL,EAAwBE,OAAO,CAACkB,MAAR,EAAgBC,OAAhB,CAAwBZ,KAAxB,CAA8Ba,GAA9B,CAAkCpB,OAAO,CAACzB,EAA1C,EAA8CyB,OAA9C;cACxB;YACD;QA/BH;;QAiCA,IAAIA,OAAO,IAAI,CAACF,iBAAhB,EAAmCD,KAAK,CAACR,QAAN,EAAgBkB,KAAhB,CAAsBa,GAAtB,CAA0BpB,OAAO,CAACzB,EAAlC,EAAsCyB,OAAtC;MACpC;IACF;;IACD,OAAOA,OAAP;EACD;;EAEDqB,MAAM,GAAW;IAAA,kCAAPC,KAAO;MAAPA,KAAO;IAAA;;IACf,OAAO,MAAMD,MAAN,CAAa;MAAE7C,gBAAgB,EAAE;IAApB,CAAb,EAAyC,GAAG8C,KAA5C,CAAP;EACD;;AAzMwB;;AA4M3BC,OAAO,CAACvD,OAAR,GAAkBA,OAAlB;AACAuD,OAAO,CAAC1D,eAAR,GAA0BA,eAA1B;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}