{"ast":null,"code":"'use strict';\n\nconst BaseCommandInteraction = require('./BaseCommandInteraction');\n\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\n/**\n * Represents a command interaction.\n * @extends {BaseCommandInteraction}\n */\n\n\nclass CommandInteraction extends BaseCommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The options passed to the command.\n     * @type {CommandInteractionOptionResolver}\n     */\n\n    this.options = new CommandInteractionOptionResolver(this.client, data.data.options?.map(option => this.transformOption(option, data.data.resolved)) ?? [], this.transformResolved(data.data.resolved ?? {}));\n  }\n  /**\n   * Returns a string representation of the command interaction.\n   * This can then be copied by a user and executed again in a new command while keeping the option order.\n   * @returns {string}\n   */\n\n\n  toString() {\n    const properties = [this.commandName, this.options._group, this.options._subcommand, ...this.options._hoistedOptions.map(o => `${o.name}:${o.value}`)];\n    return `/${properties.filter(Boolean).join(' ')}`;\n  }\n\n}\n\nmodule.exports = CommandInteraction;","map":{"version":3,"names":["BaseCommandInteraction","require","CommandInteractionOptionResolver","CommandInteraction","constructor","client","data","options","map","option","transformOption","resolved","transformResolved","toString","properties","commandName","_group","_subcommand","_hoistedOptions","o","name","value","filter","Boolean","join","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/CommandInteraction.js"],"sourcesContent":["'use strict';\n\nconst BaseCommandInteraction = require('./BaseCommandInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\n\n/**\n * Represents a command interaction.\n * @extends {BaseCommandInteraction}\n */\nclass CommandInteraction extends BaseCommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The options passed to the command.\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(\n      this.client,\n      data.data.options?.map(option => this.transformOption(option, data.data.resolved)) ?? [],\n      this.transformResolved(data.data.resolved ?? {}),\n    );\n  }\n\n  /**\n   * Returns a string representation of the command interaction.\n   * This can then be copied by a user and executed again in a new command while keeping the option order.\n   * @returns {string}\n   */\n  toString() {\n    const properties = [\n      this.commandName,\n      this.options._group,\n      this.options._subcommand,\n      ...this.options._hoistedOptions.map(o => `${o.name}:${o.value}`),\n    ];\n    return `/${properties.filter(Boolean).join(' ')}`;\n  }\n}\n\nmodule.exports = CommandInteraction;\n"],"mappings":"AAAA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,0BAAD,CAAtC;;AACA,MAAMC,gCAAgC,GAAGD,OAAO,CAAC,oCAAD,CAAhD;AAEA;AACA;AACA;AACA;;;AACA,MAAME,kBAAN,SAAiCH,sBAAjC,CAAwD;EACtDI,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAN,EAAcC,IAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAIL,gCAAJ,CACb,KAAKG,MADQ,EAEbC,IAAI,CAACA,IAAL,CAAUC,OAAV,EAAmBC,GAAnB,CAAuBC,MAAM,IAAI,KAAKC,eAAL,CAAqBD,MAArB,EAA6BH,IAAI,CAACA,IAAL,CAAUK,QAAvC,CAAjC,KAAsF,EAFzE,EAGb,KAAKC,iBAAL,CAAuBN,IAAI,CAACA,IAAL,CAAUK,QAAV,IAAsB,EAA7C,CAHa,CAAf;EAKD;EAED;AACF;AACA;AACA;AACA;;;EACEE,QAAQ,GAAG;IACT,MAAMC,UAAU,GAAG,CACjB,KAAKC,WADY,EAEjB,KAAKR,OAAL,CAAaS,MAFI,EAGjB,KAAKT,OAAL,CAAaU,WAHI,EAIjB,GAAG,KAAKV,OAAL,CAAaW,eAAb,CAA6BV,GAA7B,CAAiCW,CAAC,IAAK,GAAEA,CAAC,CAACC,IAAK,IAAGD,CAAC,CAACE,KAAM,EAA3D,CAJc,CAAnB;IAMA,OAAQ,IAAGP,UAAU,CAACQ,MAAX,CAAkBC,OAAlB,EAA2BC,IAA3B,CAAgC,GAAhC,CAAqC,EAAhD;EACD;;AA5BqD;;AA+BxDC,MAAM,CAACC,OAAP,GAAiBvB,kBAAjB"},"metadata":{},"sourceType":"script"}