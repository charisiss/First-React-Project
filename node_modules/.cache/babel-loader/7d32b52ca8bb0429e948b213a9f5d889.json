{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\n\nconst {\n  Error\n} = require('../errors');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\nconst UserFlags = require('../util/UserFlags');\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\n\n\nclass User extends Base {\n  constructor(client, data) {\n    super(client);\n    /**\n     * The user's id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    this.bot = null;\n    this.system = null;\n    this.flags = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('username' in data) {\n      /**\n       * The username of the user\n       * @type {?string}\n       */\n      this.username = data.username;\n    } else {\n      this.username ??= null;\n    }\n\n    if ('bot' in data) {\n      /**\n       * Whether or not the user is a bot\n       * @type {?boolean}\n       */\n      this.bot = Boolean(data.bot);\n    } else if (!this.partial && typeof this.bot !== 'boolean') {\n      this.bot = false;\n    }\n\n    if ('discriminator' in data) {\n      /**\n       * A discriminator based on username for the user\n       * @type {?string}\n       */\n      this.discriminator = data.discriminator;\n    } else {\n      this.discriminator ??= null;\n    }\n\n    if ('avatar' in data) {\n      /**\n       * The user avatar's hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else {\n      this.avatar ??= null;\n    }\n\n    if ('banner' in data) {\n      /**\n       * The user banner's hash\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    } else if (this.banner !== null) {\n      this.banner ??= undefined;\n    }\n\n    if ('accent_color' in data) {\n      /**\n       * The base 10 accent color of the user's banner\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?number}\n       */\n      this.accentColor = data.accent_color;\n    } else if (this.accentColor !== null) {\n      this.accentColor ??= undefined;\n    }\n\n    if ('system' in data) {\n      /**\n       * Whether the user is an Official Discord System user (part of the urgent message system)\n       * @type {?boolean}\n       */\n      this.system = Boolean(data.system);\n    } else if (!this.partial && typeof this.system !== 'boolean') {\n      this.system = false;\n    }\n\n    if ('public_flags' in data) {\n      /**\n       * The flags for this user\n       * @type {?UserFlags}\n       */\n      this.flags = new UserFlags(data.public_flags);\n    }\n  }\n  /**\n   * Whether this User is a partial\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return typeof this.username !== 'string';\n  }\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n  /**\n   * The time the user was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * A link to the user's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  avatarURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.avatar) return null;\n    return this.client.rest.cdn.Avatar(this.id, this.avatar, format, size, dynamic);\n  }\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n\n\n  get defaultAvatarURL() {\n    return this.client.rest.cdn.DefaultAvatar(this.discriminator % 5);\n  }\n  /**\n   * A link to the user's avatar if they have one.\n   * Otherwise a link to their default avatar will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n\n\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.defaultAvatarURL;\n  }\n  /**\n   * The hexadecimal version of the user accent color, with a leading hash\n   * <info>The user must be force fetched for this property to be present</info>\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get hexAccentColor() {\n    if (typeof this.accentColor !== 'number') return this.accentColor;\n    return `#${this.accentColor.toString(16).padStart(6, '0')}`;\n  }\n  /**\n   * A link to the user's banner.\n   * <info>This method will throw an error if called before the user is force fetched.\n   * See {@link User#banner} for more info</info>\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  bannerURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof this.banner === 'undefined') throw new Error('USER_BANNER_NOT_FETCHED');\n    if (!this.banner) return null;\n    return this.client.rest.cdn.Banner(this.id, this.banner, format, size, dynamic);\n  }\n  /**\n   * The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get tag() {\n    return typeof this.username === 'string' ? `${this.username}#${this.discriminator}` : null;\n  }\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n\n\n  get dmChannel() {\n    return this.client.users.dmChannel(this.id);\n  }\n  /**\n   * Creates a DM channel between the client and the user.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n\n\n  createDM() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this.client.users.createDM(this.id, force);\n  }\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n\n\n  deleteDM() {\n    return this.client.users.deleteDM(this.id);\n  }\n  /**\n   * Checks if the user is equal to another.\n   * It compares id, username, discriminator, avatar, banner, accent color, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(user) {\n    return user && this.id === user.id && this.username === user.username && this.discriminator === user.discriminator && this.avatar === user.avatar && this.flags?.bitfield === user.flags?.bitfield && this.banner === user.banner && this.accentColor === user.accentColor;\n  }\n  /**\n   * Compares the user with an API user object\n   * @param {APIUser} user The API user object to compare\n   * @returns {boolean}\n   * @private\n   */\n\n\n  _equals(user) {\n    return user && this.id === user.id && this.username === user.username && this.discriminator === user.discriminator && this.avatar === user.avatar && this.flags?.bitfield === user.public_flags && ('banner' in user ? this.banner === user.banner : true) && ('accent_color' in user ? this.accentColor === user.accent_color : true);\n  }\n  /**\n   * Fetches this user's flags.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<UserFlags>}\n   */\n\n\n  fetchFlags() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this.client.users.fetchFlags(this.id, {\n      force\n    });\n  }\n  /**\n   * Fetches this user.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<User>}\n   */\n\n\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.client.users.fetch(this.id, {\n      force\n    });\n  }\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${user}!`);\n   */\n\n\n  toString() {\n    return `<@${this.id}>`;\n  }\n\n  toJSON() {\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    const json = super.toJSON({\n      createdTimestamp: true,\n      defaultAvatarURL: true,\n      hexAccentColor: true,\n      tag: true\n    }, ...props);\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    json.bannerURL = this.banner ? this.bannerURL() : this.banner;\n    return json;\n  } // These are here only for documentation purposes - they are implemented by TextBasedChannel\n\n  /* eslint-disable no-empty-function */\n\n\n  send() {}\n\n}\n\nTextBasedChannel.applyToClass(User);\nmodule.exports = User;\n/**\n * @external APIUser\n * @see {@link https://discord.com/developers/docs/resources/user#user-object}\n */","map":{"version":3,"names":["Base","require","TextBasedChannel","Error","SnowflakeUtil","UserFlags","User","constructor","client","data","id","bot","system","flags","_patch","username","Boolean","partial","discriminator","avatar","banner","undefined","accentColor","accent_color","public_flags","createdTimestamp","timestampFrom","createdAt","Date","avatarURL","format","size","dynamic","rest","cdn","Avatar","defaultAvatarURL","DefaultAvatar","displayAvatarURL","options","hexAccentColor","toString","padStart","bannerURL","Banner","tag","dmChannel","users","createDM","force","deleteDM","equals","user","bitfield","_equals","fetchFlags","fetch","toJSON","props","json","send","applyToClass","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/User.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst { Error } = require('../errors');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\nconst UserFlags = require('../util/UserFlags');\n\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass User extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The user's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    this.bot = null;\n\n    this.system = null;\n\n    this.flags = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('username' in data) {\n      /**\n       * The username of the user\n       * @type {?string}\n       */\n      this.username = data.username;\n    } else {\n      this.username ??= null;\n    }\n\n    if ('bot' in data) {\n      /**\n       * Whether or not the user is a bot\n       * @type {?boolean}\n       */\n      this.bot = Boolean(data.bot);\n    } else if (!this.partial && typeof this.bot !== 'boolean') {\n      this.bot = false;\n    }\n\n    if ('discriminator' in data) {\n      /**\n       * A discriminator based on username for the user\n       * @type {?string}\n       */\n      this.discriminator = data.discriminator;\n    } else {\n      this.discriminator ??= null;\n    }\n\n    if ('avatar' in data) {\n      /**\n       * The user avatar's hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else {\n      this.avatar ??= null;\n    }\n\n    if ('banner' in data) {\n      /**\n       * The user banner's hash\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    } else if (this.banner !== null) {\n      this.banner ??= undefined;\n    }\n\n    if ('accent_color' in data) {\n      /**\n       * The base 10 accent color of the user's banner\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?number}\n       */\n      this.accentColor = data.accent_color;\n    } else if (this.accentColor !== null) {\n      this.accentColor ??= undefined;\n    }\n\n    if ('system' in data) {\n      /**\n       * Whether the user is an Official Discord System user (part of the urgent message system)\n       * @type {?boolean}\n       */\n      this.system = Boolean(data.system);\n    } else if (!this.partial && typeof this.system !== 'boolean') {\n      this.system = false;\n    }\n\n    if ('public_flags' in data) {\n      /**\n       * The flags for this user\n       * @type {?UserFlags}\n       */\n      this.flags = new UserFlags(data.public_flags);\n    }\n  }\n\n  /**\n   * Whether this User is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.username !== 'string';\n  }\n\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the user was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the user's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  avatarURL({ format, size, dynamic } = {}) {\n    if (!this.avatar) return null;\n    return this.client.rest.cdn.Avatar(this.id, this.avatar, format, size, dynamic);\n  }\n\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n  get defaultAvatarURL() {\n    return this.client.rest.cdn.DefaultAvatar(this.discriminator % 5);\n  }\n\n  /**\n   * A link to the user's avatar if they have one.\n   * Otherwise a link to their default avatar will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.defaultAvatarURL;\n  }\n\n  /**\n   * The hexadecimal version of the user accent color, with a leading hash\n   * <info>The user must be force fetched for this property to be present</info>\n   * @type {?string}\n   * @readonly\n   */\n  get hexAccentColor() {\n    if (typeof this.accentColor !== 'number') return this.accentColor;\n    return `#${this.accentColor.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * A link to the user's banner.\n   * <info>This method will throw an error if called before the user is force fetched.\n   * See {@link User#banner} for more info</info>\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  bannerURL({ format, size, dynamic } = {}) {\n    if (typeof this.banner === 'undefined') throw new Error('USER_BANNER_NOT_FETCHED');\n    if (!this.banner) return null;\n    return this.client.rest.cdn.Banner(this.id, this.banner, format, size, dynamic);\n  }\n\n  /**\n   * The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user\n   * @type {?string}\n   * @readonly\n   */\n  get tag() {\n    return typeof this.username === 'string' ? `${this.username}#${this.discriminator}` : null;\n  }\n\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.users.dmChannel(this.id);\n  }\n\n  /**\n   * Creates a DM channel between the client and the user.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  createDM(force = false) {\n    return this.client.users.createDM(this.id, force);\n  }\n\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.client.users.deleteDM(this.id);\n  }\n\n  /**\n   * Checks if the user is equal to another.\n   * It compares id, username, discriminator, avatar, banner, accent color, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n  equals(user) {\n    return (\n      user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.avatar === user.avatar &&\n      this.flags?.bitfield === user.flags?.bitfield &&\n      this.banner === user.banner &&\n      this.accentColor === user.accentColor\n    );\n  }\n\n  /**\n   * Compares the user with an API user object\n   * @param {APIUser} user The API user object to compare\n   * @returns {boolean}\n   * @private\n   */\n  _equals(user) {\n    return (\n      user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.avatar === user.avatar &&\n      this.flags?.bitfield === user.public_flags &&\n      ('banner' in user ? this.banner === user.banner : true) &&\n      ('accent_color' in user ? this.accentColor === user.accent_color : true)\n    );\n  }\n\n  /**\n   * Fetches this user's flags.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<UserFlags>}\n   */\n  fetchFlags(force = false) {\n    return this.client.users.fetchFlags(this.id, { force });\n  }\n\n  /**\n   * Fetches this user.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<User>}\n   */\n  fetch(force = true) {\n    return this.client.users.fetch(this.id, { force });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${user}!`);\n   */\n  toString() {\n    return `<@${this.id}>`;\n  }\n\n  toJSON(...props) {\n    const json = super.toJSON(\n      {\n        createdTimestamp: true,\n        defaultAvatarURL: true,\n        hexAccentColor: true,\n        tag: true,\n      },\n      ...props,\n    );\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    json.bannerURL = this.banner ? this.bannerURL() : this.banner;\n    return json;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n}\n\nTextBasedChannel.applyToClass(User);\n\nmodule.exports = User;\n\n/**\n * @external APIUser\n * @see {@link https://discord.com/developers/docs/resources/user#user-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}