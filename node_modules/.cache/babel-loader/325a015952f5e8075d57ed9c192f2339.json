{"ast":null,"code":"'use strict';\n\nconst Util = require('../util/Util');\n/**\n * Represents an attachment in a message.\n */\n\n\nclass MessageAttachment {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @param {APIAttachment} [data] Extra data\n   */\n  constructor(attachment) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let data = arguments.length > 2 ? arguments[2] : undefined;\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n\n    this.name = name;\n    if (data) this._patch(data);\n  }\n  /**\n   * Sets the description of this attachment.\n   * @param {string} description The description of the file\n   * @returns {MessageAttachment} This attachment\n   */\n\n\n  setDescription(description) {\n    this.description = description;\n    return this;\n  }\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @returns {MessageAttachment} This attachment\n   */\n\n\n  setFile(attachment) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.attachment = attachment;\n    this.name = name;\n    return this;\n  }\n  /**\n   * Sets the name of this attachment.\n   * @param {string} name The name of the file\n   * @returns {MessageAttachment} This attachment\n   */\n\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n  /**\n   * Sets whether this attachment is a spoiler\n   * @param {boolean} [spoiler=true] Whether the attachment should be marked as a spoiler\n   * @returns {MessageAttachment} This attachment\n   */\n\n\n  setSpoiler() {\n    let spoiler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (spoiler === this.spoiler) return this;\n\n    if (!spoiler) {\n      while (this.spoiler) {\n        this.name = this.name.slice('SPOILER_'.length);\n      }\n\n      return this;\n    }\n\n    this.name = `SPOILER_${this.name}`;\n    return this;\n  }\n\n  _patch(data) {\n    /**\n     * The attachment's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('size' in data) {\n      /**\n       * The size of this attachment in bytes\n       * @type {number}\n       */\n      this.size = data.size;\n    }\n\n    if ('url' in data) {\n      /**\n       * The URL to this attachment\n       * @type {string}\n       */\n      this.url = data.url;\n    }\n\n    if ('proxy_url' in data) {\n      /**\n       * The Proxy URL to this attachment\n       * @type {string}\n       */\n      this.proxyURL = data.proxy_url;\n    }\n\n    if ('height' in data) {\n      /**\n       * The height of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.height = data.height;\n    } else {\n      this.height ??= null;\n    }\n\n    if ('width' in data) {\n      /**\n       * The width of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.width = data.width;\n    } else {\n      this.width ??= null;\n    }\n\n    if ('content_type' in data) {\n      /**\n       * This media type of this attachment\n       * @type {?string}\n       */\n      this.contentType = data.content_type;\n    } else {\n      this.contentType ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description (alt text) of this attachment\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n    /**\n     * Whether this attachment is ephemeral\n     * @type {boolean}\n     */\n\n\n    this.ephemeral = data.ephemeral ?? false;\n  }\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get spoiler() {\n    return Util.basename(this.url ?? this.name).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n}\n\nmodule.exports = MessageAttachment;\n/**\n * @external APIAttachment\n * @see {@link https://discord.com/developers/docs/resources/channel#attachment-object}\n */","map":{"version":3,"names":["Util","require","MessageAttachment","constructor","attachment","name","data","_patch","setDescription","description","setFile","setName","setSpoiler","spoiler","slice","length","id","size","url","proxyURL","proxy_url","height","width","contentType","content_type","ephemeral","basename","startsWith","toJSON","flatten","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/MessageAttachment.js"],"sourcesContent":["'use strict';\n\nconst Util = require('../util/Util');\n\n/**\n * Represents an attachment in a message.\n */\nclass MessageAttachment {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @param {APIAttachment} [data] Extra data\n   */\n  constructor(attachment, name = null, data) {\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n    this.name = name;\n    if (data) this._patch(data);\n  }\n\n  /**\n   * Sets the description of this attachment.\n   * @param {string} description The description of the file\n   * @returns {MessageAttachment} This attachment\n   */\n  setDescription(description) {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @returns {MessageAttachment} This attachment\n   */\n  setFile(attachment, name = null) {\n    this.attachment = attachment;\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the name of this attachment.\n   * @param {string} name The name of the file\n   * @returns {MessageAttachment} This attachment\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets whether this attachment is a spoiler\n   * @param {boolean} [spoiler=true] Whether the attachment should be marked as a spoiler\n   * @returns {MessageAttachment} This attachment\n   */\n  setSpoiler(spoiler = true) {\n    if (spoiler === this.spoiler) return this;\n\n    if (!spoiler) {\n      while (this.spoiler) {\n        this.name = this.name.slice('SPOILER_'.length);\n      }\n      return this;\n    }\n    this.name = `SPOILER_${this.name}`;\n    return this;\n  }\n\n  _patch(data) {\n    /**\n     * The attachment's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('size' in data) {\n      /**\n       * The size of this attachment in bytes\n       * @type {number}\n       */\n      this.size = data.size;\n    }\n\n    if ('url' in data) {\n      /**\n       * The URL to this attachment\n       * @type {string}\n       */\n      this.url = data.url;\n    }\n\n    if ('proxy_url' in data) {\n      /**\n       * The Proxy URL to this attachment\n       * @type {string}\n       */\n      this.proxyURL = data.proxy_url;\n    }\n\n    if ('height' in data) {\n      /**\n       * The height of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.height = data.height;\n    } else {\n      this.height ??= null;\n    }\n\n    if ('width' in data) {\n      /**\n       * The width of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.width = data.width;\n    } else {\n      this.width ??= null;\n    }\n\n    if ('content_type' in data) {\n      /**\n       * This media type of this attachment\n       * @type {?string}\n       */\n      this.contentType = data.content_type;\n    } else {\n      this.contentType ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description (alt text) of this attachment\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    /**\n     * Whether this attachment is ephemeral\n     * @type {boolean}\n     */\n    this.ephemeral = data.ephemeral ?? false;\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return Util.basename(this.url ?? this.name).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\nmodule.exports = MessageAttachment;\n\n/**\n * @external APIAttachment\n * @see {@link https://discord.com/developers/docs/resources/channel#attachment-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}