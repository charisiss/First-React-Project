{"ast":null,"code":"'use strict';\n\nconst GuildChannel = require('./GuildChannel');\n/**\n * Represents a guild category channel on Discord.\n * @extends {GuildChannel}\n */\n\n\nclass CategoryChannel extends GuildChannel {\n  /**\n   * Channels that are a part of this category\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @readonly\n   */\n  get children() {\n    return this.guild.channels.cache.filter(c => c.parentId === this.id);\n  }\n  /**\n   * Sets the category parent of this channel.\n   * <warn>It is not currently possible to set the parent of a CategoryChannel.</warn>\n   * @method setParent\n   * @memberof CategoryChannel\n   * @instance\n   * @param {?CategoryChannelResolvable} channel The channel to set as parent\n   * @param {SetParentOptions} [options={}] The options for setting the parent\n   * @returns {Promise<GuildChannel>}\n   */\n\n  /**\n   * Options for creating a channel using {@link CategoryChannel#createChannel}.\n   * @typedef {Object} CategoryCreateChannelOptions\n   * @property {ChannelType|number} [type='GUILD_TEXT'] The type of the new channel.\n   * @property {string} [topic] The topic for the new channel\n   * @property {boolean} [nsfw] Whether the new channel is NSFW\n   * @property {number} [bitrate] Bitrate of the new channel in bits (only voice)\n   * @property {number} [userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @property {number} [position] Position of the new channel\n   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the new channel in seconds\n   * @property {string} [rtcRegion] The specific region of the new channel.\n   * @property {string} [reason] Reason for creating the new channel\n   */\n\n  /**\n   * Creates a new channel within this category.\n   * <info>You cannot create a channel of type `GUILD_CATEGORY` inside a CategoryChannel.</info>\n   * @param {string} name The name of the new channel\n   * @param {CategoryCreateChannelOptions} options Options for creating the new channel\n   * @returns {Promise<GuildChannel>}\n   */\n\n\n  createChannel(name, options) {\n    return this.guild.channels.create(name, { ...options,\n      parent: this.id\n    });\n  }\n\n}\n\nmodule.exports = CategoryChannel;","map":{"version":3,"names":["GuildChannel","require","CategoryChannel","children","guild","channels","cache","filter","c","parentId","id","createChannel","name","options","create","parent","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/CategoryChannel.js"],"sourcesContent":["'use strict';\n\nconst GuildChannel = require('./GuildChannel');\n\n/**\n * Represents a guild category channel on Discord.\n * @extends {GuildChannel}\n */\nclass CategoryChannel extends GuildChannel {\n  /**\n   * Channels that are a part of this category\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @readonly\n   */\n  get children() {\n    return this.guild.channels.cache.filter(c => c.parentId === this.id);\n  }\n\n  /**\n   * Sets the category parent of this channel.\n   * <warn>It is not currently possible to set the parent of a CategoryChannel.</warn>\n   * @method setParent\n   * @memberof CategoryChannel\n   * @instance\n   * @param {?CategoryChannelResolvable} channel The channel to set as parent\n   * @param {SetParentOptions} [options={}] The options for setting the parent\n   * @returns {Promise<GuildChannel>}\n   */\n\n  /**\n   * Options for creating a channel using {@link CategoryChannel#createChannel}.\n   * @typedef {Object} CategoryCreateChannelOptions\n   * @property {ChannelType|number} [type='GUILD_TEXT'] The type of the new channel.\n   * @property {string} [topic] The topic for the new channel\n   * @property {boolean} [nsfw] Whether the new channel is NSFW\n   * @property {number} [bitrate] Bitrate of the new channel in bits (only voice)\n   * @property {number} [userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @property {number} [position] Position of the new channel\n   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the new channel in seconds\n   * @property {string} [rtcRegion] The specific region of the new channel.\n   * @property {string} [reason] Reason for creating the new channel\n   */\n\n  /**\n   * Creates a new channel within this category.\n   * <info>You cannot create a channel of type `GUILD_CATEGORY` inside a CategoryChannel.</info>\n   * @param {string} name The name of the new channel\n   * @param {CategoryCreateChannelOptions} options Options for creating the new channel\n   * @returns {Promise<GuildChannel>}\n   */\n  createChannel(name, options) {\n    return this.guild.channels.create(name, {\n      ...options,\n      parent: this.id,\n    });\n  }\n}\n\nmodule.exports = CategoryChannel;\n"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,eAAN,SAA8BF,YAA9B,CAA2C;EACzC;AACF;AACA;AACA;AACA;EACc,IAARG,QAAQ,GAAG;IACb,OAAO,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BC,MAA1B,CAAiCC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAe,KAAKC,EAA1D,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,aAAa,CAACC,IAAD,EAAOC,OAAP,EAAgB;IAC3B,OAAO,KAAKT,KAAL,CAAWC,QAAX,CAAoBS,MAApB,CAA2BF,IAA3B,EAAiC,EACtC,GAAGC,OADmC;MAEtCE,MAAM,EAAE,KAAKL;IAFyB,CAAjC,CAAP;EAID;;AAjDwC;;AAoD3CM,MAAM,CAACC,OAAP,GAAiBf,eAAjB"},"metadata":{},"sourceType":"script"}