{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n/**\n * Rate limit data\n * @typedef {Object} RateLimitData\n * @property {number} timeout Time until this rate limit ends, in ms\n * @property {number} limit The maximum amount of requests of this endpoint\n * @property {string} method The HTTP method of this request\n * @property {string} path The path of the request relative to the HTTP endpoint\n * @property {string} route The route of the request relative to the HTTP endpoint\n * @property {boolean} global Whether this is a global rate limit\n */\n\n/**\n * Whether this rate limit should throw an Error\n * @typedef {Function} RateLimitQueueFilter\n * @param {RateLimitData} rateLimitData The data of this rate limit\n * @returns {boolean|Promise<boolean>}\n */\n\n/**\n * @typedef {Function} CacheFactory\n * @param {Function} manager The manager class the cache is being requested from.\n * @param {Function} holds The class that the cache will hold.\n * @returns {Collection} A Collection used to store the cache of the manager.\n */\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {number|number[]|string} [shards] The shard's id to run, or an array of shard ids. If not specified,\n * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\n * recommended amount of shards from Discord and spawn that amount\n * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot\n * (e.g. recommended shard count, shard count of the ShardingManager)\n * @property {CacheFactory} [makeCache] Function to create a cache.\n * You can use your own function, or the {@link Options} class to customize the Collection used for the cache.\n * <warn>Overriding the cache used in `GuildManager`, `ChannelManager`, `GuildChannelManager`, `RoleManager`,\n * and `PermissionOverwriteManager` is unsupported and **will** break functionality</warn>\n * @property {number} [messageCacheLifetime=0] DEPRECATED: Pass `lifetime` to `sweepers.messages` instead.\n * How long a message should stay in the cache until it is considered sweepable (in seconds, 0 for forever)\n * @property {number} [messageSweepInterval=0] DEPRECATED: Pass `interval` to `sweepers.messages` instead.\n * How frequently to remove messages from the cache that are older than the message cache lifetime\n * (in seconds, 0 for never)\n * @property {MessageMentionOptions} [allowedMentions] Default value for {@link MessageOptions#allowedMentions}\n * @property {number} [invalidRequestWarningInterval=0] The number of invalid REST requests (those that return\n * 401, 403, or 429) in a 10 minute window between emitted warnings (0 for no warnings). That is, if set to 500,\n * warnings will be emitted at invalid request number 500, 1000, 1500, and so on.\n * @property {PartialType[]} [partials] Structures allowed to be partial. This means events can be emitted even when\n * they're missing all the data for a particular structure. See the \"Partial Structures\" topic on the\n * [guide](https://discordjs.guide/popular-topics/partials.html) for some\n * important usage information, as partials require you to put checks in place when handling data.\n * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their\n * corresponding WebSocket events\n * @property {number} [restTimeOffset=500] Extra time in milliseconds to wait before continuing to make REST\n * requests (higher values will reduce rate-limiting errors on bad connections)\n * @property {number} [restRequestTimeout=15000] Time to wait before cancelling a REST request, in milliseconds\n * @property {number} [restSweepInterval=60] How frequently to delete inactive request buckets, in seconds\n * (or 0 for never)\n * @property {number} [restGlobalRateLimit=0] How many requests to allow sending per second (0 for unlimited, 50 for\n * the standard global limit used by Discord)\n * @property {string[]|RateLimitQueueFilter} [rejectOnRateLimit] Decides how rate limits and pre-emptive throttles\n * should be handled. If this option is an array containing the prefix of the request route (e.g. /channels to match any\n * route starting with /channels, such as /channels/222197033908436994/messages) or a function returning true, a\n * {@link RateLimitError} will be thrown. Otherwise the request will be queued for later\n * @property {number} [retryLimit=1] How many times to retry on 5XX errors\n * (Infinity for an indefinite amount of retries)\n * @property {boolean} [failIfNotExists=true] Default value for {@link ReplyMessageOptions#failIfNotExists}\n * @property {string[]} [userAgentSuffix] An array of additional bot info to be appended to the end of the required\n * [User Agent](https://discord.com/developers/docs/reference#user-agent) header\n * @property {PresenceData} [presence={}] Presence data to use upon login\n * @property {IntentsResolvable} intents Intents to enable for this connection\n * @property {number} [waitGuildTimeout=15_000] Time in milliseconds that Clients with the GUILDS intent should wait for\n * missing guilds to be recieved before starting the bot. If not specified, the default is 15 seconds.\n * @property {SweeperOptions} [sweepers={}] Options for cache sweeping\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {HTTPOptions} [http] HTTP options\n */\n\n/**\n * Options for {@link Sweepers} defining the behavior of cache sweeping\n * @typedef {Object<SweeperKey, SweepOptions>} SweeperOptions\n */\n\n/**\n * Options for sweeping a single type of item from cache\n * @typedef {Object} SweepOptions\n * @property {number} interval The interval (in seconds) at which to perform sweeping of the item\n * @property {number} [lifetime] How long an item should stay in cache until it is considered sweepable.\n * <warn>This property is only valid for the `invites`, `messages`, and `threads` keys. The `filter` property\n * is mutually exclusive to this property and takes priority</warn>\n * @property {GlobalSweepFilter} filter The function used to determine the function passed to the sweep method\n * <info>This property is optional when the key is `invites`, `messages`, or `threads` and `lifetime` is set</info>\n */\n\n/**\n * WebSocket options (these are left as snake_case to match the API)\n * @typedef {Object} WebsocketOptions\n * @property {number} [large_threshold=50] Number of members in a guild after which offline users will no longer be\n * sent in the initial guild member list, must be between 50 and 250\n */\n\n/**\n * HTTPS Agent options.\n * @typedef {Object} AgentOptions\n * @see {@link https://nodejs.org/api/https.html#https_class_https_agent}\n * @see {@link https://nodejs.org/api/http.html#http_new_agent_options}\n */\n\n/**\n * HTTP options\n * @typedef {Object} HTTPOptions\n * @property {number} [version=9] API version to use\n * @property {AgentOptions} [agent={}] HTTPS Agent options\n * @property {string} [api='https://discord.com/api'] Base URL of the API\n * @property {string} [cdn='https://cdn.discordapp.com'] Base URL of the CDN\n * @property {string} [invite='https://discord.gg'] Base URL of invites\n * @property {string} [template='https://discord.new'] Base URL of templates\n * @property {Object} [headers] Additional headers to send for all API requests\n * @property {string} [scheduledEvent='https://discord.com/events'] Base URL of guild scheduled events\n */\n\n/**\n * Contains various utilities for client options.\n */\n\n\nclass Options extends null {\n  /**\n   * The default client options.\n   * @returns {ClientOptions}\n   */\n  static createDefault() {\n    return {\n      waitGuildTimeout: 15_000,\n      shardCount: 1,\n      makeCache: this.cacheWithLimits(this.defaultMakeCacheSettings),\n      messageCacheLifetime: 0,\n      messageSweepInterval: 0,\n      invalidRequestWarningInterval: 0,\n      partials: [],\n      restWsBridgeTimeout: 5_000,\n      restRequestTimeout: 15_000,\n      restGlobalRateLimit: 0,\n      retryLimit: 1,\n      restTimeOffset: 500,\n      restSweepInterval: 60,\n      failIfNotExists: true,\n      userAgentSuffix: [],\n      presence: {},\n      sweepers: {},\n      ws: {\n        large_threshold: 50,\n        compress: false,\n        properties: {\n          $os: process.platform,\n          $browser: 'discord.js',\n          $device: 'discord.js'\n        },\n        version: 9\n      },\n      http: {\n        agent: {},\n        version: 9,\n        api: 'https://discord.com/api',\n        cdn: 'https://cdn.discordapp.com',\n        invite: 'https://discord.gg',\n        template: 'https://discord.new',\n        scheduledEvent: 'https://discord.com/events'\n      }\n    };\n  }\n  /**\n   * Create a cache factory using predefined settings to sweep or limit.\n   * @param {Object<string, LimitedCollectionOptions|number>} [settings={}] Settings passed to the relevant constructor.\n   * If no setting is provided for a manager, it uses Collection.\n   * If a number is provided for a manager, it uses that number as the max size for a LimitedCollection.\n   * If LimitedCollectionOptions are provided for a manager, it uses those settings to form a LimitedCollection.\n   * @returns {CacheFactory}\n   * @example\n   * // Store up to 200 messages per channel and discard archived threads if they were archived more than 4 hours ago.\n   * // Note archived threads will remain in the guild and client caches with these settings\n   * Options.cacheWithLimits({\n   *    MessageManager: 200,\n   *    ThreadManager: {\n   *      sweepInterval: 3600,\n   *      sweepFilter: LimitedCollection.filterByLifetime({\n   *        getComparisonTimestamp: e => e.archiveTimestamp,\n   *        excludeFromSweep: e => !e.archived,\n   *      }),\n   *    },\n   *  });\n   * @example\n   * // Sweep messages every 5 minutes, removing messages that have not been edited or created in the last 30 minutes\n   * Options.cacheWithLimits({\n   *   // Keep default thread sweeping behavior\n   *   ...Options.defaultMakeCacheSettings,\n   *   // Override MessageManager\n   *   MessageManager: {\n   *     sweepInterval: 300,\n   *     sweepFilter: LimitedCollection.filterByLifetime({\n   *       lifetime: 1800,\n   *       getComparisonTimestamp: e => e.editedTimestamp ?? e.createdTimestamp,\n   *     })\n   *   }\n   * });\n   */\n\n\n  static cacheWithLimits() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const {\n      Collection\n    } = require('@discordjs/collection');\n\n    const LimitedCollection = require('./LimitedCollection');\n\n    return manager => {\n      const setting = settings[manager.name];\n      /* eslint-disable-next-line eqeqeq */\n\n      if (setting == null) {\n        return new Collection();\n      }\n\n      if (typeof setting === 'number') {\n        if (setting === Infinity) {\n          return new Collection();\n        }\n\n        return new LimitedCollection({\n          maxSize: setting\n        });\n      }\n      /* eslint-disable eqeqeq */\n\n\n      const noSweeping = setting.sweepFilter == null || setting.sweepInterval == null || setting.sweepInterval <= 0 || setting.sweepInterval === Infinity;\n      const noLimit = setting.maxSize == null || setting.maxSize === Infinity;\n      /* eslint-enable eqeqeq */\n\n      if (noSweeping && noLimit) {\n        return new Collection();\n      }\n\n      return new LimitedCollection(setting);\n    };\n  }\n  /**\n   * Create a cache factory that always caches everything.\n   * @returns {CacheFactory}\n   */\n\n\n  static cacheEverything() {\n    const {\n      Collection\n    } = require('@discordjs/collection');\n\n    return () => new Collection();\n  }\n  /**\n   * The default settings passed to {@link Options.cacheWithLimits}.\n   * The caches that this changes are:\n   * * `MessageManager` - Limit to 200 messages\n   * * `ChannelManager` - Sweep archived threads\n   * * `GuildChannelManager` - Sweep archived threads\n   * * `ThreadManager` - Sweep archived threads\n   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n   * `makeCache: Options.cacheWithLimits({ ...Options.defaultMakeCacheSettings, ReactionManager: 0 })`</info>\n   * @type {Object<string, LimitedCollectionOptions|number>}\n   */\n\n\n  static get defaultMakeCacheSettings() {\n    return {\n      MessageManager: 200,\n      ChannelManager: {\n        sweepInterval: 3600,\n        sweepFilter: require('./Util').archivedThreadSweepFilter()\n      },\n      GuildChannelManager: {\n        sweepInterval: 3600,\n        sweepFilter: require('./Util').archivedThreadSweepFilter()\n      },\n      ThreadManager: {\n        sweepInterval: 3600,\n        sweepFilter: require('./Util').archivedThreadSweepFilter()\n      }\n    };\n  }\n\n}\n/**\n * The default settings passed to {@link Options.sweepers} (for v14).\n * The sweepers that this changes are:\n * * `threads` - Sweep archived threads every hour, removing those archived more than 4 hours ago\n * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n * `sweepers: { ...Options.defaultSweeperSettings, messages: { interval: 300, lifetime: 600 } })`</info>\n * @type {SweeperOptions}\n */\n\n\nOptions.defaultSweeperSettings = {\n  threads: {\n    interval: 3600,\n    lifetime: 14400\n  }\n};\nmodule.exports = Options;","map":{"version":3,"names":["process","require","Options","createDefault","waitGuildTimeout","shardCount","makeCache","cacheWithLimits","defaultMakeCacheSettings","messageCacheLifetime","messageSweepInterval","invalidRequestWarningInterval","partials","restWsBridgeTimeout","restRequestTimeout","restGlobalRateLimit","retryLimit","restTimeOffset","restSweepInterval","failIfNotExists","userAgentSuffix","presence","sweepers","ws","large_threshold","compress","properties","$os","platform","$browser","$device","version","http","agent","api","cdn","invite","template","scheduledEvent","settings","Collection","LimitedCollection","manager","setting","name","Infinity","maxSize","noSweeping","sweepFilter","sweepInterval","noLimit","cacheEverything","MessageManager","ChannelManager","archivedThreadSweepFilter","GuildChannelManager","ThreadManager","defaultSweeperSettings","threads","interval","lifetime","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/util/Options.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\n\n/**\n * Rate limit data\n * @typedef {Object} RateLimitData\n * @property {number} timeout Time until this rate limit ends, in ms\n * @property {number} limit The maximum amount of requests of this endpoint\n * @property {string} method The HTTP method of this request\n * @property {string} path The path of the request relative to the HTTP endpoint\n * @property {string} route The route of the request relative to the HTTP endpoint\n * @property {boolean} global Whether this is a global rate limit\n */\n\n/**\n * Whether this rate limit should throw an Error\n * @typedef {Function} RateLimitQueueFilter\n * @param {RateLimitData} rateLimitData The data of this rate limit\n * @returns {boolean|Promise<boolean>}\n */\n\n/**\n * @typedef {Function} CacheFactory\n * @param {Function} manager The manager class the cache is being requested from.\n * @param {Function} holds The class that the cache will hold.\n * @returns {Collection} A Collection used to store the cache of the manager.\n */\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {number|number[]|string} [shards] The shard's id to run, or an array of shard ids. If not specified,\n * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\n * recommended amount of shards from Discord and spawn that amount\n * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot\n * (e.g. recommended shard count, shard count of the ShardingManager)\n * @property {CacheFactory} [makeCache] Function to create a cache.\n * You can use your own function, or the {@link Options} class to customize the Collection used for the cache.\n * <warn>Overriding the cache used in `GuildManager`, `ChannelManager`, `GuildChannelManager`, `RoleManager`,\n * and `PermissionOverwriteManager` is unsupported and **will** break functionality</warn>\n * @property {number} [messageCacheLifetime=0] DEPRECATED: Pass `lifetime` to `sweepers.messages` instead.\n * How long a message should stay in the cache until it is considered sweepable (in seconds, 0 for forever)\n * @property {number} [messageSweepInterval=0] DEPRECATED: Pass `interval` to `sweepers.messages` instead.\n * How frequently to remove messages from the cache that are older than the message cache lifetime\n * (in seconds, 0 for never)\n * @property {MessageMentionOptions} [allowedMentions] Default value for {@link MessageOptions#allowedMentions}\n * @property {number} [invalidRequestWarningInterval=0] The number of invalid REST requests (those that return\n * 401, 403, or 429) in a 10 minute window between emitted warnings (0 for no warnings). That is, if set to 500,\n * warnings will be emitted at invalid request number 500, 1000, 1500, and so on.\n * @property {PartialType[]} [partials] Structures allowed to be partial. This means events can be emitted even when\n * they're missing all the data for a particular structure. See the \"Partial Structures\" topic on the\n * [guide](https://discordjs.guide/popular-topics/partials.html) for some\n * important usage information, as partials require you to put checks in place when handling data.\n * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their\n * corresponding WebSocket events\n * @property {number} [restTimeOffset=500] Extra time in milliseconds to wait before continuing to make REST\n * requests (higher values will reduce rate-limiting errors on bad connections)\n * @property {number} [restRequestTimeout=15000] Time to wait before cancelling a REST request, in milliseconds\n * @property {number} [restSweepInterval=60] How frequently to delete inactive request buckets, in seconds\n * (or 0 for never)\n * @property {number} [restGlobalRateLimit=0] How many requests to allow sending per second (0 for unlimited, 50 for\n * the standard global limit used by Discord)\n * @property {string[]|RateLimitQueueFilter} [rejectOnRateLimit] Decides how rate limits and pre-emptive throttles\n * should be handled. If this option is an array containing the prefix of the request route (e.g. /channels to match any\n * route starting with /channels, such as /channels/222197033908436994/messages) or a function returning true, a\n * {@link RateLimitError} will be thrown. Otherwise the request will be queued for later\n * @property {number} [retryLimit=1] How many times to retry on 5XX errors\n * (Infinity for an indefinite amount of retries)\n * @property {boolean} [failIfNotExists=true] Default value for {@link ReplyMessageOptions#failIfNotExists}\n * @property {string[]} [userAgentSuffix] An array of additional bot info to be appended to the end of the required\n * [User Agent](https://discord.com/developers/docs/reference#user-agent) header\n * @property {PresenceData} [presence={}] Presence data to use upon login\n * @property {IntentsResolvable} intents Intents to enable for this connection\n * @property {number} [waitGuildTimeout=15_000] Time in milliseconds that Clients with the GUILDS intent should wait for\n * missing guilds to be recieved before starting the bot. If not specified, the default is 15 seconds.\n * @property {SweeperOptions} [sweepers={}] Options for cache sweeping\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {HTTPOptions} [http] HTTP options\n */\n\n/**\n * Options for {@link Sweepers} defining the behavior of cache sweeping\n * @typedef {Object<SweeperKey, SweepOptions>} SweeperOptions\n */\n\n/**\n * Options for sweeping a single type of item from cache\n * @typedef {Object} SweepOptions\n * @property {number} interval The interval (in seconds) at which to perform sweeping of the item\n * @property {number} [lifetime] How long an item should stay in cache until it is considered sweepable.\n * <warn>This property is only valid for the `invites`, `messages`, and `threads` keys. The `filter` property\n * is mutually exclusive to this property and takes priority</warn>\n * @property {GlobalSweepFilter} filter The function used to determine the function passed to the sweep method\n * <info>This property is optional when the key is `invites`, `messages`, or `threads` and `lifetime` is set</info>\n */\n\n/**\n * WebSocket options (these are left as snake_case to match the API)\n * @typedef {Object} WebsocketOptions\n * @property {number} [large_threshold=50] Number of members in a guild after which offline users will no longer be\n * sent in the initial guild member list, must be between 50 and 250\n */\n\n/**\n * HTTPS Agent options.\n * @typedef {Object} AgentOptions\n * @see {@link https://nodejs.org/api/https.html#https_class_https_agent}\n * @see {@link https://nodejs.org/api/http.html#http_new_agent_options}\n */\n\n/**\n * HTTP options\n * @typedef {Object} HTTPOptions\n * @property {number} [version=9] API version to use\n * @property {AgentOptions} [agent={}] HTTPS Agent options\n * @property {string} [api='https://discord.com/api'] Base URL of the API\n * @property {string} [cdn='https://cdn.discordapp.com'] Base URL of the CDN\n * @property {string} [invite='https://discord.gg'] Base URL of invites\n * @property {string} [template='https://discord.new'] Base URL of templates\n * @property {Object} [headers] Additional headers to send for all API requests\n * @property {string} [scheduledEvent='https://discord.com/events'] Base URL of guild scheduled events\n */\n\n/**\n * Contains various utilities for client options.\n */\nclass Options extends null {\n  /**\n   * The default client options.\n   * @returns {ClientOptions}\n   */\n  static createDefault() {\n    return {\n      waitGuildTimeout: 15_000,\n      shardCount: 1,\n      makeCache: this.cacheWithLimits(this.defaultMakeCacheSettings),\n      messageCacheLifetime: 0,\n      messageSweepInterval: 0,\n      invalidRequestWarningInterval: 0,\n      partials: [],\n      restWsBridgeTimeout: 5_000,\n      restRequestTimeout: 15_000,\n      restGlobalRateLimit: 0,\n      retryLimit: 1,\n      restTimeOffset: 500,\n      restSweepInterval: 60,\n      failIfNotExists: true,\n      userAgentSuffix: [],\n      presence: {},\n      sweepers: {},\n      ws: {\n        large_threshold: 50,\n        compress: false,\n        properties: {\n          $os: process.platform,\n          $browser: 'discord.js',\n          $device: 'discord.js',\n        },\n        version: 9,\n      },\n      http: {\n        agent: {},\n        version: 9,\n        api: 'https://discord.com/api',\n        cdn: 'https://cdn.discordapp.com',\n        invite: 'https://discord.gg',\n        template: 'https://discord.new',\n        scheduledEvent: 'https://discord.com/events',\n      },\n    };\n  }\n\n  /**\n   * Create a cache factory using predefined settings to sweep or limit.\n   * @param {Object<string, LimitedCollectionOptions|number>} [settings={}] Settings passed to the relevant constructor.\n   * If no setting is provided for a manager, it uses Collection.\n   * If a number is provided for a manager, it uses that number as the max size for a LimitedCollection.\n   * If LimitedCollectionOptions are provided for a manager, it uses those settings to form a LimitedCollection.\n   * @returns {CacheFactory}\n   * @example\n   * // Store up to 200 messages per channel and discard archived threads if they were archived more than 4 hours ago.\n   * // Note archived threads will remain in the guild and client caches with these settings\n   * Options.cacheWithLimits({\n   *    MessageManager: 200,\n   *    ThreadManager: {\n   *      sweepInterval: 3600,\n   *      sweepFilter: LimitedCollection.filterByLifetime({\n   *        getComparisonTimestamp: e => e.archiveTimestamp,\n   *        excludeFromSweep: e => !e.archived,\n   *      }),\n   *    },\n   *  });\n   * @example\n   * // Sweep messages every 5 minutes, removing messages that have not been edited or created in the last 30 minutes\n   * Options.cacheWithLimits({\n   *   // Keep default thread sweeping behavior\n   *   ...Options.defaultMakeCacheSettings,\n   *   // Override MessageManager\n   *   MessageManager: {\n   *     sweepInterval: 300,\n   *     sweepFilter: LimitedCollection.filterByLifetime({\n   *       lifetime: 1800,\n   *       getComparisonTimestamp: e => e.editedTimestamp ?? e.createdTimestamp,\n   *     })\n   *   }\n   * });\n   */\n  static cacheWithLimits(settings = {}) {\n    const { Collection } = require('@discordjs/collection');\n    const LimitedCollection = require('./LimitedCollection');\n\n    return manager => {\n      const setting = settings[manager.name];\n      /* eslint-disable-next-line eqeqeq */\n      if (setting == null) {\n        return new Collection();\n      }\n      if (typeof setting === 'number') {\n        if (setting === Infinity) {\n          return new Collection();\n        }\n        return new LimitedCollection({ maxSize: setting });\n      }\n      /* eslint-disable eqeqeq */\n      const noSweeping =\n        setting.sweepFilter == null ||\n        setting.sweepInterval == null ||\n        setting.sweepInterval <= 0 ||\n        setting.sweepInterval === Infinity;\n      const noLimit = setting.maxSize == null || setting.maxSize === Infinity;\n      /* eslint-enable eqeqeq */\n      if (noSweeping && noLimit) {\n        return new Collection();\n      }\n      return new LimitedCollection(setting);\n    };\n  }\n\n  /**\n   * Create a cache factory that always caches everything.\n   * @returns {CacheFactory}\n   */\n  static cacheEverything() {\n    const { Collection } = require('@discordjs/collection');\n    return () => new Collection();\n  }\n\n  /**\n   * The default settings passed to {@link Options.cacheWithLimits}.\n   * The caches that this changes are:\n   * * `MessageManager` - Limit to 200 messages\n   * * `ChannelManager` - Sweep archived threads\n   * * `GuildChannelManager` - Sweep archived threads\n   * * `ThreadManager` - Sweep archived threads\n   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n   * `makeCache: Options.cacheWithLimits({ ...Options.defaultMakeCacheSettings, ReactionManager: 0 })`</info>\n   * @type {Object<string, LimitedCollectionOptions|number>}\n   */\n  static get defaultMakeCacheSettings() {\n    return {\n      MessageManager: 200,\n      ChannelManager: {\n        sweepInterval: 3600,\n        sweepFilter: require('./Util').archivedThreadSweepFilter(),\n      },\n      GuildChannelManager: {\n        sweepInterval: 3600,\n        sweepFilter: require('./Util').archivedThreadSweepFilter(),\n      },\n      ThreadManager: {\n        sweepInterval: 3600,\n        sweepFilter: require('./Util').archivedThreadSweepFilter(),\n      },\n    };\n  }\n}\n\n/**\n * The default settings passed to {@link Options.sweepers} (for v14).\n * The sweepers that this changes are:\n * * `threads` - Sweep archived threads every hour, removing those archived more than 4 hours ago\n * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n * `sweepers: { ...Options.defaultSweeperSettings, messages: { interval: 300, lifetime: 600 } })`</info>\n * @type {SweeperOptions}\n */\nOptions.defaultSweeperSettings = {\n  threads: {\n    interval: 3600,\n    lifetime: 14400,\n  },\n};\n\nmodule.exports = Options;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}