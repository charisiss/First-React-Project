{"ast":null,"code":"'use strict';\n\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\n\nconst Interaction = require('./Interaction');\n\nconst {\n  InteractionResponseTypes,\n  ApplicationCommandOptionTypes\n} = require('../util/Constants');\n/**\n * Represents an autocomplete interaction.\n * @extends {Interaction}\n */\n\n\nclass AutocompleteInteraction extends Interaction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name AutocompleteInteraction#channelId\n     */\n\n    /**\n     * The invoked application command's id\n     * @type {Snowflake}\n     */\n\n    this.commandId = data.data.id;\n    /**\n     * The invoked application command's name\n     * @type {string}\n     */\n\n    this.commandName = data.data.name;\n    /**\n     * Whether this interaction has already received a response\n     * @type {boolean}\n     */\n\n    this.responded = false;\n    /**\n     * The options passed to the command\n     * @type {CommandInteractionOptionResolver}\n     */\n\n    this.options = new CommandInteractionOptionResolver(this.client, data.data.options?.map(option => this.transformOption(option, data.data.resolved)) ?? []);\n  }\n  /**\n   * The invoked application command, if it was fetched before\n   * @type {?ApplicationCommand}\n   */\n\n\n  get command() {\n    const id = this.commandId;\n    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;\n  }\n  /**\n   * Transforms an option received from the API.\n   * @param {APIApplicationCommandOption} option The received option\n   * @returns {CommandInteractionOption}\n   * @private\n   */\n\n\n  transformOption(option) {\n    const result = {\n      name: option.name,\n      type: ApplicationCommandOptionTypes[option.type]\n    };\n    if ('value' in option) result.value = option.value;\n    if ('options' in option) result.options = option.options.map(opt => this.transformOption(opt));\n    if ('focused' in option) result.focused = option.focused;\n    return result;\n  }\n  /**\n   * Sends results for the autocomplete of this interaction.\n   * @param {ApplicationCommandOptionChoice[]} options The options for the autocomplete\n   * @returns {Promise<void>}\n   * @example\n   * // respond to autocomplete interaction\n   * interaction.respond([\n   *  {\n   *    name: 'Option 1',\n   *    value: 'option1',\n   *  },\n   * ])\n   *  .then(console.log)\n   *  .catch(console.error);\n   */\n\n\n  async respond(options) {\n    if (this.responded) throw new Error('INTERACTION_ALREADY_REPLIED');\n    await this.client.api.interactions(this.id, this.token).callback.post({\n      data: {\n        type: InteractionResponseTypes.APPLICATION_COMMAND_AUTOCOMPLETE_RESULT,\n        data: {\n          choices: options\n        }\n      },\n      auth: false\n    });\n    this.responded = true;\n  }\n\n}\n\nmodule.exports = AutocompleteInteraction;","map":{"version":3,"names":["CommandInteractionOptionResolver","require","Interaction","InteractionResponseTypes","ApplicationCommandOptionTypes","AutocompleteInteraction","constructor","client","data","commandId","id","commandName","name","responded","options","map","option","transformOption","resolved","command","guild","commands","cache","get","application","result","type","value","opt","focused","respond","Error","api","interactions","token","callback","post","APPLICATION_COMMAND_AUTOCOMPLETE_RESULT","choices","auth","module","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/AutocompleteInteraction.js"],"sourcesContent":["'use strict';\n\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\nconst Interaction = require('./Interaction');\nconst { InteractionResponseTypes, ApplicationCommandOptionTypes } = require('../util/Constants');\n\n/**\n * Represents an autocomplete interaction.\n * @extends {Interaction}\n */\nclass AutocompleteInteraction extends Interaction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name AutocompleteInteraction#channelId\n     */\n\n    /**\n     * The invoked application command's id\n     * @type {Snowflake}\n     */\n    this.commandId = data.data.id;\n\n    /**\n     * The invoked application command's name\n     * @type {string}\n     */\n    this.commandName = data.data.name;\n\n    /**\n     * Whether this interaction has already received a response\n     * @type {boolean}\n     */\n    this.responded = false;\n\n    /**\n     * The options passed to the command\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(\n      this.client,\n      data.data.options?.map(option => this.transformOption(option, data.data.resolved)) ?? [],\n    );\n  }\n\n  /**\n   * The invoked application command, if it was fetched before\n   * @type {?ApplicationCommand}\n   */\n  get command() {\n    const id = this.commandId;\n    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;\n  }\n\n  /**\n   * Transforms an option received from the API.\n   * @param {APIApplicationCommandOption} option The received option\n   * @returns {CommandInteractionOption}\n   * @private\n   */\n  transformOption(option) {\n    const result = {\n      name: option.name,\n      type: ApplicationCommandOptionTypes[option.type],\n    };\n\n    if ('value' in option) result.value = option.value;\n    if ('options' in option) result.options = option.options.map(opt => this.transformOption(opt));\n    if ('focused' in option) result.focused = option.focused;\n\n    return result;\n  }\n\n  /**\n   * Sends results for the autocomplete of this interaction.\n   * @param {ApplicationCommandOptionChoice[]} options The options for the autocomplete\n   * @returns {Promise<void>}\n   * @example\n   * // respond to autocomplete interaction\n   * interaction.respond([\n   *  {\n   *    name: 'Option 1',\n   *    value: 'option1',\n   *  },\n   * ])\n   *  .then(console.log)\n   *  .catch(console.error);\n   */\n  async respond(options) {\n    if (this.responded) throw new Error('INTERACTION_ALREADY_REPLIED');\n\n    await this.client.api.interactions(this.id, this.token).callback.post({\n      data: {\n        type: InteractionResponseTypes.APPLICATION_COMMAND_AUTOCOMPLETE_RESULT,\n        data: {\n          choices: options,\n        },\n      },\n      auth: false,\n    });\n    this.responded = true;\n  }\n}\n\nmodule.exports = AutocompleteInteraction;\n"],"mappings":"AAAA;;AAEA,MAAMA,gCAAgC,GAAGC,OAAO,CAAC,oCAAD,CAAhD;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAM;EAAEE,wBAAF;EAA4BC;AAA5B,IAA8DH,OAAO,CAAC,mBAAD,CAA3E;AAEA;AACA;AACA;AACA;;;AACA,MAAMI,uBAAN,SAAsCH,WAAtC,CAAkD;EAChDI,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAN,EAAcC,IAAd;IAEA;AACJ;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiBD,IAAI,CAACA,IAAL,CAAUE,EAA3B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmBH,IAAI,CAACA,IAAL,CAAUI,IAA7B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiB,KAAjB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAId,gCAAJ,CACb,KAAKO,MADQ,EAEbC,IAAI,CAACA,IAAL,CAAUM,OAAV,EAAmBC,GAAnB,CAAuBC,MAAM,IAAI,KAAKC,eAAL,CAAqBD,MAArB,EAA6BR,IAAI,CAACA,IAAL,CAAUU,QAAvC,CAAjC,KAAsF,EAFzE,CAAf;EAID;EAED;AACF;AACA;AACA;;;EACa,IAAPC,OAAO,GAAG;IACZ,MAAMT,EAAE,GAAG,KAAKD,SAAhB;IACA,OAAO,KAAKW,KAAL,EAAYC,QAAZ,CAAqBC,KAArB,CAA2BC,GAA3B,CAA+Bb,EAA/B,KAAsC,KAAKH,MAAL,CAAYiB,WAAZ,CAAwBH,QAAxB,CAAiCC,KAAjC,CAAuCC,GAAvC,CAA2Cb,EAA3C,CAAtC,IAAwF,IAA/F;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEO,eAAe,CAACD,MAAD,EAAS;IACtB,MAAMS,MAAM,GAAG;MACbb,IAAI,EAAEI,MAAM,CAACJ,IADA;MAEbc,IAAI,EAAEtB,6BAA6B,CAACY,MAAM,CAACU,IAAR;IAFtB,CAAf;IAKA,IAAI,WAAWV,MAAf,EAAuBS,MAAM,CAACE,KAAP,GAAeX,MAAM,CAACW,KAAtB;IACvB,IAAI,aAAaX,MAAjB,EAAyBS,MAAM,CAACX,OAAP,GAAiBE,MAAM,CAACF,OAAP,CAAeC,GAAf,CAAmBa,GAAG,IAAI,KAAKX,eAAL,CAAqBW,GAArB,CAA1B,CAAjB;IACzB,IAAI,aAAaZ,MAAjB,EAAyBS,MAAM,CAACI,OAAP,GAAiBb,MAAM,CAACa,OAAxB;IAEzB,OAAOJ,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACe,MAAPK,OAAO,CAAChB,OAAD,EAAU;IACrB,IAAI,KAAKD,SAAT,EAAoB,MAAM,IAAIkB,KAAJ,CAAU,6BAAV,CAAN;IAEpB,MAAM,KAAKxB,MAAL,CAAYyB,GAAZ,CAAgBC,YAAhB,CAA6B,KAAKvB,EAAlC,EAAsC,KAAKwB,KAA3C,EAAkDC,QAAlD,CAA2DC,IAA3D,CAAgE;MACpE5B,IAAI,EAAE;QACJkB,IAAI,EAAEvB,wBAAwB,CAACkC,uCAD3B;QAEJ7B,IAAI,EAAE;UACJ8B,OAAO,EAAExB;QADL;MAFF,CAD8D;MAOpEyB,IAAI,EAAE;IAP8D,CAAhE,CAAN;IASA,KAAK1B,SAAL,GAAiB,IAAjB;EACD;;AA9F+C;;AAiGlD2B,MAAM,CAACC,OAAP,GAAiBpC,uBAAjB"},"metadata":{},"sourceType":"script"}