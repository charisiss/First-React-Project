{"ast":null,"code":"var u = Object.defineProperty;\n\nvar f = (o, e, i) => e in o ? u(o, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: i\n}) : o[e] = i;\n\nvar h = (o, e) => u(o, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nvar a = (o, e, i) => (f(o, typeof e != \"symbol\" ? e + \"\" : e, i), i);\n\nvar s = class extends Map {\n  ensure(e, i) {\n    if (this.has(e)) return this.get(e);\n    let t = i(e, this);\n    return this.set(e, t), t;\n  }\n\n  hasAll() {\n    for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n      e[_key] = arguments[_key];\n    }\n\n    return e.every(i => super.has(i));\n  }\n\n  hasAny() {\n    for (var _len2 = arguments.length, e = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      e[_key2] = arguments[_key2];\n    }\n\n    return e.some(i => super.has(i));\n  }\n\n  first(e) {\n    if (typeof e == \"undefined\") return this.values().next().value;\n    if (e < 0) return this.last(e * -1);\n    e = Math.min(this.size, e);\n    let i = this.values();\n    return Array.from({\n      length: e\n    }, () => i.next().value);\n  }\n\n  firstKey(e) {\n    if (typeof e == \"undefined\") return this.keys().next().value;\n    if (e < 0) return this.lastKey(e * -1);\n    e = Math.min(this.size, e);\n    let i = this.keys();\n    return Array.from({\n      length: e\n    }, () => i.next().value);\n  }\n\n  last(e) {\n    let i = [...this.values()];\n    return typeof e == \"undefined\" ? i[i.length - 1] : e < 0 ? this.first(e * -1) : e ? i.slice(-e) : [];\n  }\n\n  lastKey(e) {\n    let i = [...this.keys()];\n    return typeof e == \"undefined\" ? i[i.length - 1] : e < 0 ? this.firstKey(e * -1) : e ? i.slice(-e) : [];\n  }\n\n  at(e) {\n    return e = Math.floor(e), [...this.values()].at(e);\n  }\n\n  keyAt(e) {\n    return e = Math.floor(e), [...this.keys()].at(e);\n  }\n\n  random(e) {\n    let i = [...this.values()];\n    return typeof e == \"undefined\" ? i[Math.floor(Math.random() * i.length)] : !i.length || !e ? [] : Array.from({\n      length: Math.min(e, i.length)\n    }, () => i.splice(Math.floor(Math.random() * i.length), 1)[0]);\n  }\n\n  randomKey(e) {\n    let i = [...this.keys()];\n    return typeof e == \"undefined\" ? i[Math.floor(Math.random() * i.length)] : !i.length || !e ? [] : Array.from({\n      length: Math.min(e, i.length)\n    }, () => i.splice(Math.floor(Math.random() * i.length), 1)[0]);\n  }\n\n  reverse() {\n    let e = [...this.entries()].reverse();\n    this.clear();\n\n    for (let [i, t] of e) this.set(i, t);\n\n    return this;\n  }\n\n  find(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n\n    for (let [t, n] of this) if (e(n, t, this)) return n;\n  }\n\n  findKey(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n\n    for (let [t, n] of this) if (e(n, t, this)) return t;\n  }\n\n  sweep(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n    let t = this.size;\n\n    for (let [n, l] of this) e(l, n, this) && this.delete(n);\n\n    return t - this.size;\n  }\n\n  filter(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n    let t = new this.constructor[Symbol.species]();\n\n    for (let [n, l] of this) e(l, n, this) && t.set(n, l);\n\n    return t;\n  }\n\n  partition(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n    let t = [new this.constructor[Symbol.species](), new this.constructor[Symbol.species]()];\n\n    for (let [n, l] of this) e(l, n, this) ? t[0].set(n, l) : t[1].set(n, l);\n\n    return t;\n  }\n\n  flatMap(e, i) {\n    let t = this.map(e, i);\n    return new this.constructor[Symbol.species]().concat(...t);\n  }\n\n  map(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n    let t = this.entries();\n    return Array.from({\n      length: this.size\n    }, () => {\n      let [n, l] = t.next().value;\n      return e(l, n, this);\n    });\n  }\n\n  mapValues(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n    let t = new this.constructor[Symbol.species]();\n\n    for (let [n, l] of this) t.set(n, e(l, n, this));\n\n    return t;\n  }\n\n  some(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n\n    for (let [t, n] of this) if (e(n, t, this)) return !0;\n\n    return !1;\n  }\n\n  every(e, i) {\n    typeof i != \"undefined\" && (e = e.bind(i));\n\n    for (let [t, n] of this) if (!e(n, t, this)) return !1;\n\n    return !0;\n  }\n\n  reduce(e, i) {\n    let t;\n\n    if (typeof i != \"undefined\") {\n      t = i;\n\n      for (let [l, c] of this) t = e(t, c, l, this);\n\n      return t;\n    }\n\n    let n = !0;\n\n    for (let [l, c] of this) {\n      if (n) {\n        t = c, n = !1;\n        continue;\n      }\n\n      t = e(t, c, l, this);\n    }\n\n    if (n) throw new TypeError(\"Reduce of empty collection with no initial value\");\n    return t;\n  }\n\n  each(e, i) {\n    return this.forEach(e, i), this;\n  }\n\n  tap(e, i) {\n    return typeof i != \"undefined\" && (e = e.bind(i)), e(this), this;\n  }\n\n  clone() {\n    return new this.constructor[Symbol.species](this);\n  }\n\n  concat() {\n    let i = this.clone();\n\n    for (var _len3 = arguments.length, e = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      e[_key3] = arguments[_key3];\n    }\n\n    for (let t of e) for (let [n, l] of t) i.set(n, l);\n\n    return i;\n  }\n\n  equals(e) {\n    if (!e) return !1;\n    if (this === e) return !0;\n    if (this.size !== e.size) return !1;\n\n    for (let [i, t] of this) if (!e.has(i) || t !== e.get(i)) return !1;\n\n    return !0;\n  }\n\n  sort() {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : s.defaultSort;\n    let i = [...this.entries()];\n    i.sort((t, n) => e(t[1], n[1], t[0], n[0])), super.clear();\n\n    for (let [t, n] of i) super.set(t, n);\n\n    return this;\n  }\n\n  intersect(e) {\n    let i = new this.constructor[Symbol.species]();\n\n    for (let [t, n] of e) this.has(t) && i.set(t, n);\n\n    return i;\n  }\n\n  difference(e) {\n    let i = new this.constructor[Symbol.species]();\n\n    for (let [t, n] of e) this.has(t) || i.set(t, n);\n\n    for (let [t, n] of this) e.has(t) || i.set(t, n);\n\n    return i;\n  }\n\n  sorted() {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : s.defaultSort;\n    return new this.constructor[Symbol.species](this).sort((i, t, n, l) => e(i, t, n, l));\n  }\n\n  toJSON() {\n    return [...this.values()];\n  }\n\n  static defaultSort(e, i) {\n    return Number(e > i) || Number(e === i) - 1;\n  }\n\n},\n    r = s;\nh(r, \"Collection\"), a(r, \"default\", s);\nvar V = r;\nexport { r as Collection, V as default };","map":{"version":3,"mappings":"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","names":["Map","ensure","e","i","has","get","t","set","hasAll","every","hasAny","some","first","values","next","value","last","Math","min","size","Array","from","length","firstKey","keys","lastKey","slice","at","floor","keyAt","random","splice","randomKey","reverse","entries","clear","find","bind","n","findKey","sweep","l","delete","filter","constructor","Symbol","species","partition","flatMap","map","concat","mapValues","reduce","c","TypeError","each","forEach","tap","clone","equals","sort","s","defaultSort","intersect","difference","sorted","toJSON","Number","h","a","r","V"],"sources":["../src/index.ts"],"sourcesContent":["/**\n * @internal\n */\nexport interface CollectionConstructor {\n\tnew (): Collection<unknown, unknown>;\n\tnew <K, V>(entries?: ReadonlyArray<readonly [K, V]> | null): Collection<K, V>;\n\tnew <K, V>(iterable: Iterable<readonly [K, V]>): Collection<K, V>;\n\treadonly prototype: Collection<unknown, unknown>;\n\treadonly [Symbol.species]: CollectionConstructor;\n}\n\n/**\n * Separate interface for the constructor so that emitted js does not have a constructor that overwrites itself\n *\n * @internal\n */\nexport interface Collection<K, V> extends Map<K, V> {\n\tconstructor: CollectionConstructor;\n}\n\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n */\nexport class Collection<K, V> extends Map<K, V> {\n\tpublic static readonly default: typeof Collection = Collection;\n\n\t/**\n\t * Obtains the value of the given key if it exists, otherwise sets and returns the value provided by the default value generator.\n\t *\n\t * @param key The key to get if it exists, or set otherwise\n\t * @param defaultValueGenerator A function that generates the default value\n\t *\n\t * @example\n\t * collection.ensure(guildId, () => defaultGuildConfig);\n\t */\n\tpublic ensure(key: K, defaultValueGenerator: (key: K, collection: this) => V): V {\n\t\tif (this.has(key)) return this.get(key)!;\n\t\tconst defaultValue = defaultValueGenerator(key, this);\n\t\tthis.set(key, defaultValue);\n\t\treturn defaultValue;\n\t}\n\n\t/**\n\t * Checks if all of the elements exist in the collection.\n\t *\n\t * @param keys - The keys of the elements to check for\n\t *\n\t * @returns `true` if all of the elements exist, `false` if at least one does not exist.\n\t */\n\tpublic hasAll(...keys: K[]) {\n\t\treturn keys.every((k) => super.has(k));\n\t}\n\n\t/**\n\t * Checks if any of the elements exist in the collection.\n\t *\n\t * @param keys - The keys of the elements to check for\n\t *\n\t * @returns `true` if any of the elements exist, `false` if none exist.\n\t */\n\tpublic hasAny(...keys: K[]) {\n\t\treturn keys.some((k) => super.has(k));\n\t}\n\n\t/**\n\t * Obtains the first value(s) in this collection.\n\t *\n\t * @param amount Amount of values to obtain from the beginning\n\t *\n\t * @returns A single value if no amount is provided or an array of values, starting from the end if amount is negative\n\t */\n\tpublic first(): V | undefined;\n\tpublic first(amount: number): V[];\n\tpublic first(amount?: number): V | V[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.values().next().value;\n\t\tif (amount < 0) return this.last(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.values();\n\t\treturn Array.from({ length: amount }, (): V => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the first key(s) in this collection.\n\t *\n\t * @param amount Amount of keys to obtain from the beginning\n\t *\n\t * @returns A single key if no amount is provided or an array of keys, starting from the end if\n\t * amount is negative\n\t */\n\tpublic firstKey(): K | undefined;\n\tpublic firstKey(amount: number): K[];\n\tpublic firstKey(amount?: number): K | K[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.keys().next().value;\n\t\tif (amount < 0) return this.lastKey(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.keys();\n\t\treturn Array.from({ length: amount }, (): K => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the last value(s) in this collection.\n\t *\n\t * @param amount Amount of values to obtain from the end\n\t *\n\t * @returns A single value if no amount is provided or an array of values, starting from the start if\n\t * amount is negative\n\t */\n\tpublic last(): V | undefined;\n\tpublic last(amount: number): V[];\n\tpublic last(amount?: number): V | V[] | undefined {\n\t\tconst arr = [...this.values()];\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.first(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Obtains the last key(s) in this collection.\n\t *\n\t * @param amount Amount of keys to obtain from the end\n\t *\n\t * @returns A single key if no amount is provided or an array of keys, starting from the start if\n\t * amount is negative\n\t */\n\tpublic lastKey(): K | undefined;\n\tpublic lastKey(amount: number): K[];\n\tpublic lastKey(amount?: number): K | K[] | undefined {\n\t\tconst arr = [...this.keys()];\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.firstKey(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\n\t * Returns the item at a given index, allowing for positive and negative integers.\n\t * Negative integers count back from the last item in the collection.\n\t *\n\t * @param index The index of the element to obtain\n\t */\n\tpublic at(index: number) {\n\t\tindex = Math.floor(index);\n\t\tconst arr = [...this.values()];\n\t\treturn arr.at(index);\n\t}\n\n\t/**\n\t * Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\n\t * Returns the key at a given index, allowing for positive and negative integers.\n\t * Negative integers count back from the last item in the collection.\n\t *\n\t * @param index The index of the key to obtain\n\t */\n\tpublic keyAt(index: number) {\n\t\tindex = Math.floor(index);\n\t\tconst arr = [...this.keys()];\n\t\treturn arr.at(index);\n\t}\n\n\t/**\n\t * Obtains unique random value(s) from this collection.\n\t *\n\t * @param amount Amount of values to obtain randomly\n\t *\n\t * @returns A single value if no amount is provided or an array of values\n\t */\n\tpublic random(): V | undefined;\n\tpublic random(amount: number): V[];\n\tpublic random(amount?: number): V | V[] | undefined {\n\t\tconst arr = [...this.values()];\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (!arr.length || !amount) return [];\n\t\treturn Array.from(\n\t\t\t{ length: Math.min(amount, arr.length) },\n\t\t\t(): V => arr.splice(Math.floor(Math.random() * arr.length), 1)[0],\n\t\t);\n\t}\n\n\t/**\n\t * Obtains unique random key(s) from this collection.\n\t *\n\t * @param amount Amount of keys to obtain randomly\n\t *\n\t * @returns A single key if no amount is provided or an array\n\t */\n\tpublic randomKey(): K | undefined;\n\tpublic randomKey(amount: number): K[];\n\tpublic randomKey(amount?: number): K | K[] | undefined {\n\t\tconst arr = [...this.keys()];\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (!arr.length || !amount) return [];\n\t\treturn Array.from(\n\t\t\t{ length: Math.min(amount, arr.length) },\n\t\t\t(): K => arr.splice(Math.floor(Math.random() * arr.length), 1)[0],\n\t\t);\n\t}\n\n\t/**\n\t * Identical to [Array.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\t * but returns a Collection instead of an Array.\n\t */\n\tpublic reverse() {\n\t\tconst entries = [...this.entries()].reverse();\n\t\tthis.clear();\n\t\tfor (const [key, value] of entries) this.set(key, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Searches for a single item where the given function returns a truthy value. This behaves like\n\t * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n\t * <warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\n\t * should use the `get` method. See\n\t * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>\n\t *\n\t * @param fn The function to test with (should return boolean)\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection.find(user => user.username === 'Bob');\n\t */\n\tpublic find<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): V2 | undefined;\n\tpublic find(fn: (value: V, key: K, collection: this) => boolean): V | undefined;\n\tpublic find<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): V2 | undefined;\n\tpublic find<This>(fn: (this: This, value: V, key: K, collection: this) => boolean, thisArg: This): V | undefined;\n\tpublic find(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): V | undefined {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return val;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Searches for the key of a single item where the given function returns a truthy value. This behaves like\n\t * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\n\t * but returns the key rather than the positional index.\n\t *\n\t * @param fn The function to test with (should return boolean)\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection.findKey(user => user.username === 'Bob');\n\t */\n\tpublic findKey<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): K2 | undefined;\n\tpublic findKey(fn: (value: V, key: K, collection: this) => boolean): K | undefined;\n\tpublic findKey<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): K2 | undefined;\n\tpublic findKey<This>(fn: (this: This, value: V, key: K, collection: this) => boolean, thisArg: This): K | undefined;\n\tpublic findKey(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): K | undefined {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return key;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Removes items that satisfy the provided filter function.\n\t *\n\t * @param fn Function used to test (should return a boolean)\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @returns The number of removed entries\n\t */\n\tpublic sweep(fn: (value: V, key: K, collection: this) => boolean): number;\n\tpublic sweep<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): number;\n\tpublic sweep(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): number {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst previousSize = this.size;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) this.delete(key);\n\t\t}\n\t\treturn previousSize - this.size;\n\t}\n\n\t/**\n\t * Identical to\n\t * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n\t * but returns a Collection instead of an Array.\n\t *\n\t * @param fn The function to test with (should return boolean)\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection.filter(user => user.username === 'Bob');\n\t */\n\tpublic filter<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): Collection<K2, V>;\n\tpublic filter<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): Collection<K, V2>;\n\tpublic filter(fn: (value: V, key: K, collection: this) => boolean): Collection<K, V>;\n\tpublic filter<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): Collection<K2, V>;\n\tpublic filter<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): Collection<K, V2>;\n\tpublic filter<This>(fn: (this: This, value: V, key: K, collection: this) => boolean, thisArg: This): Collection<K, V>;\n\tpublic filter(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): Collection<K, V> {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst results = new this.constructor[Symbol.species]<K, V>();\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) results.set(key, val);\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Partitions the collection into two collections where the first collection\n\t * contains the items that passed and the second contains the items that failed.\n\t *\n\t * @param fn Function used to test (should return a boolean)\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * const [big, small] = collection.partition(guild => guild.memberCount > 250);\n\t */\n\tpublic partition<K2 extends K>(\n\t\tfn: (value: V, key: K, collection: this) => key is K2,\n\t): [Collection<K2, V>, Collection<Exclude<K, K2>, V>];\n\tpublic partition<V2 extends V>(\n\t\tfn: (value: V, key: K, collection: this) => value is V2,\n\t): [Collection<K, V2>, Collection<K, Exclude<V, V2>>];\n\tpublic partition(fn: (value: V, key: K, collection: this) => boolean): [Collection<K, V>, Collection<K, V>];\n\tpublic partition<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): [Collection<K2, V>, Collection<Exclude<K, K2>, V>];\n\tpublic partition<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): [Collection<K, V2>, Collection<K, Exclude<V, V2>>];\n\tpublic partition<This>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => boolean,\n\t\tthisArg: This,\n\t): [Collection<K, V>, Collection<K, V>];\n\tpublic partition(\n\t\tfn: (value: V, key: K, collection: this) => boolean,\n\t\tthisArg?: unknown,\n\t): [Collection<K, V>, Collection<K, V>] {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst results: [Collection<K, V>, Collection<K, V>] = [\n\t\t\tnew this.constructor[Symbol.species]<K, V>(),\n\t\t\tnew this.constructor[Symbol.species]<K, V>(),\n\t\t];\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) {\n\t\t\t\tresults[0].set(key, val);\n\t\t\t} else {\n\t\t\t\tresults[1].set(key, val);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n\t * [Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).\n\t *\n\t * @param fn Function that produces a new Collection\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection.flatMap(guild => guild.members.cache);\n\t */\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>): Collection<K, T>;\n\tpublic flatMap<T, This>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => Collection<K, T>,\n\t\tthisArg: This,\n\t): Collection<K, T>;\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>, thisArg?: unknown): Collection<K, T> {\n\t\tconst collections = this.map(fn, thisArg);\n\t\treturn new this.constructor[Symbol.species]<K, T>().concat(...collections);\n\t}\n\n\t/**\n\t * Maps each item to another value into an array. Identical in behavior to\n\t * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t *\n\t * @param fn Function that produces an element of the new array, taking three arguments\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection.map(user => user.tag);\n\t */\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T): T[];\n\tpublic map<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): T[];\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): T[] {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst iter = this.entries();\n\t\treturn Array.from({ length: this.size }, (): T => {\n\t\t\tconst [key, value] = iter.next().value;\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\treturn fn(value, key, this);\n\t\t});\n\t}\n\n\t/**\n\t * Maps each item to another value into a collection. Identical in behavior to\n\t * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t *\n\t * @param fn Function that produces an element of the new collection, taking three arguments\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection.mapValues(user => user.tag);\n\t */\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T): Collection<K, T>;\n\tpublic mapValues<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): Collection<K, T>;\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): Collection<K, T> {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst coll = new this.constructor[Symbol.species]<K, T>();\n\t\tfor (const [key, val] of this) coll.set(key, fn(val, key, this));\n\t\treturn coll;\n\t}\n\n\t/**\n\t * Checks if there exists an item that passes a test. Identical in behavior to\n\t * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\t *\n\t * @param fn Function used to test (should return a boolean)\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection.some(user => user.discriminator === '0000');\n\t */\n\tpublic some(fn: (value: V, key: K, collection: this) => boolean): boolean;\n\tpublic some<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): boolean;\n\tpublic some(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): boolean {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if all items passes a test. Identical in behavior to\n\t * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n\t *\n\t * @param fn Function used to test (should return a boolean)\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection.every(user => !user.bot);\n\t */\n\tpublic every<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): this is Collection<K2, V>;\n\tpublic every<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): this is Collection<K, V2>;\n\tpublic every(fn: (value: V, key: K, collection: this) => boolean): boolean;\n\tpublic every<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): this is Collection<K2, V>;\n\tpublic every<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): this is Collection<K, V2>;\n\tpublic every<This>(fn: (this: This, value: V, key: K, collection: this) => boolean, thisArg: This): boolean;\n\tpublic every(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): boolean {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (!fn(val, key, this)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Applies a function to produce a single value. Identical in behavior to\n\t * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\t *\n\t * @param fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n\t * and `collection`\n\t * @param initialValue Starting value for the accumulator\n\t *\n\t * @example\n\t * collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n\t */\n\tpublic reduce<T>(fn: (accumulator: T, value: V, key: K, collection: this) => T, initialValue?: T): T {\n\t\tlet accumulator!: T;\n\n\t\tif (typeof initialValue !== 'undefined') {\n\t\t\taccumulator = initialValue;\n\t\t\tfor (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n\t\t\treturn accumulator;\n\t\t}\n\t\tlet first = true;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (first) {\n\t\t\t\taccumulator = val as unknown as T;\n\t\t\t\tfirst = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\taccumulator = fn(accumulator, val, key, this);\n\t\t}\n\n\t\t// No items iterated.\n\t\tif (first) {\n\t\t\tthrow new TypeError('Reduce of empty collection with no initial value');\n\t\t}\n\n\t\treturn accumulator;\n\t}\n\n\t/**\n\t * Identical to\n\t * [Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\n\t * but returns the collection instead of undefined.\n\t *\n\t * @param fn Function to execute for each element\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection\n\t *  .each(user => console.log(user.username))\n\t *  .filter(user => user.bot)\n\t *  .each(user => console.log(user.username));\n\t */\n\tpublic each(fn: (value: V, key: K, collection: this) => void): this;\n\tpublic each<T>(fn: (this: T, value: V, key: K, collection: this) => void, thisArg: T): this;\n\tpublic each(fn: (value: V, key: K, collection: this) => void, thisArg?: unknown): this {\n\t\tthis.forEach(fn as (value: V, key: K, map: Map<K, V>) => void, thisArg);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Runs a function on the collection and returns the collection.\n\t *\n\t * @param fn Function to execute\n\t * @param thisArg Value to use as `this` when executing function\n\t *\n\t * @example\n\t * collection\n\t *  .tap(coll => console.log(coll.size))\n\t *  .filter(user => user.bot)\n\t *  .tap(coll => console.log(coll.size))\n\t */\n\tpublic tap(fn: (collection: this) => void): this;\n\tpublic tap<T>(fn: (this: T, collection: this) => void, thisArg: T): this;\n\tpublic tap(fn: (collection: this) => void, thisArg?: unknown): this {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfn(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates an identical shallow copy of this collection.\n\t *\n\t * @example\n\t * const newColl = someColl.clone();\n\t */\n\tpublic clone() {\n\t\treturn new this.constructor[Symbol.species](this);\n\t}\n\n\t/**\n\t * Combines this collection with others into a new collection. None of the source collections are modified.\n\t *\n\t * @param collections Collections to merge\n\t *\n\t * @example\n\t * const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n\t */\n\tpublic concat(...collections: Collection<K, V>[]) {\n\t\tconst newColl = this.clone();\n\t\tfor (const coll of collections) {\n\t\t\tfor (const [key, val] of coll) newColl.set(key, val);\n\t\t}\n\t\treturn newColl;\n\t}\n\n\t/**\n\t * Checks if this collection shares identical items with another.\n\t * This is different to checking for equality using equal-signs, because\n\t * the collections may be different objects, but contain the same data.\n\t *\n\t * @param collection Collection to compare with\n\t *\n\t * @returns Whether the collections have identical contents\n\t */\n\tpublic equals(collection: Collection<K, V>) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\tif (!collection) return false; // runtime check\n\t\tif (this === collection) return true;\n\t\tif (this.size !== collection.size) return false;\n\t\tfor (const [key, value] of this) {\n\t\t\tif (!collection.has(key) || value !== collection.get(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * The sort method sorts the items of a collection in place and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t *\n\t * @param compareFunction Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.\n\t *\n\t * @example\n\t * collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t */\n\tpublic sort(compareFunction: Comparator<K, V> = Collection.defaultSort) {\n\t\tconst entries = [...this.entries()];\n\t\tentries.sort((a, b): number => compareFunction(a[1], b[1], a[0], b[0]));\n\n\t\t// Perform clean-up\n\t\tsuper.clear();\n\n\t\t// Set the new entries\n\t\tfor (const [k, v] of entries) {\n\t\t\tsuper.set(k, v);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The intersect method returns a new structure containing items where the keys are present in both original structures.\n\t *\n\t * @param other The other Collection to filter against\n\t */\n\tpublic intersect(other: Collection<K, V>) {\n\t\tconst coll = new this.constructor[Symbol.species]<K, V>();\n\t\tfor (const [k, v] of other) {\n\t\t\tif (this.has(k)) coll.set(k, v);\n\t\t}\n\t\treturn coll;\n\t}\n\n\t/**\n\t * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n\t *\n\t * @param other The other Collection to filter against\n\t */\n\tpublic difference(other: Collection<K, V>) {\n\t\tconst coll = new this.constructor[Symbol.species]<K, V>();\n\t\tfor (const [k, v] of other) {\n\t\t\tif (!this.has(k)) coll.set(k, v);\n\t\t}\n\t\tfor (const [k, v] of this) {\n\t\t\tif (!other.has(k)) coll.set(k, v);\n\t\t}\n\t\treturn coll;\n\t}\n\n\t/**\n\t * The sorted method sorts the items of a collection and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t *\n\t * @param compareFunction Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value,\n\t * according to the string conversion of each element.\n\t *\n\t * @example\n\t * collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t */\n\tpublic sorted(compareFunction: Comparator<K, V> = Collection.defaultSort) {\n\t\treturn new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n\t}\n\n\tpublic toJSON() {\n\t\t// toJSON is called recursively by JSON.stringify.\n\t\treturn [...this.values()];\n\t}\n\n\tprivate static defaultSort<V>(firstValue: V, secondValue: V): number {\n\t\treturn Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;\n\t}\n}\n\n/**\n * @internal\n */\nexport type Comparator<K, V> = (firstValue: V, secondValue: V, firstKey: K, secondKey: K) => number;\n\nexport default Collection;\n"]},"metadata":{},"sourceType":"module"}