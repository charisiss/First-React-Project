{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\n\nconst Base = require('./Base');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * @type {WeakSet<Emoji>}\n * @private\n * @internal\n */\n\n\nconst deletedEmojis = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n/**\n * Represents raw emoji data from the API\n * @typedef {APIEmoji} RawEmoji\n * @property {?Snowflake} id The emoji's id\n * @property {?string} name The emoji's name\n * @property {?boolean} animated Whether the emoji is animated\n */\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\n\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether or not the emoji is animated\n     * @type {?boolean}\n     */\n\n    this.animated = emoji.animated ?? null;\n    /**\n     * The emoji's name\n     * @type {?string}\n     */\n\n    this.name = emoji.name ?? null;\n    /**\n     * The emoji's id\n     * @type {?Snowflake}\n     */\n\n    this.id = emoji.id;\n  }\n  /**\n   * Whether or not the structure has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n\n\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Emoji#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    return deletedEmojis.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning('Emoji#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.', 'DeprecationWarning');\n    }\n\n    if (value) deletedEmojis.add(this);else deletedEmojis.delete(this);\n  }\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n\n\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n  /**\n   * The URL to the emoji file if it's a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get url() {\n    return this.id && this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return this.id && SnowflakeUtil.timestampFrom(this.id);\n  }\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return this.id && new Date(this.createdTimestamp);\n  }\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.channel.send(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n\n\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildId',\n      createdTimestamp: true,\n      url: true,\n      identifier: true\n    });\n  }\n\n}\n\nexports.Emoji = Emoji;\nexports.deletedEmojis = deletedEmojis;\n/**\n * @external APIEmoji\n * @see {@link https://discord.com/developers/docs/resources/emoji#emoji-object}\n */","map":{"version":3,"names":["process","require","Base","SnowflakeUtil","deletedEmojis","WeakSet","deprecationEmittedForDeleted","Emoji","constructor","client","emoji","animated","name","id","deleted","emitWarning","has","value","add","delete","identifier","encodeURIComponent","url","rest","cdn","createdTimestamp","timestampFrom","createdAt","Date","toString","toJSON","guild","exports"],"sources":["C:/Users/xsxsam/node_modules/discord.js/src/structures/Emoji.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst Base = require('./Base');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * @type {WeakSet<Emoji>}\n * @private\n * @internal\n */\nconst deletedEmojis = new WeakSet();\nlet deprecationEmittedForDeleted = false;\n\n/**\n * Represents raw emoji data from the API\n * @typedef {APIEmoji} RawEmoji\n * @property {?Snowflake} id The emoji's id\n * @property {?string} name The emoji's name\n * @property {?boolean} animated Whether the emoji is animated\n */\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether or not the emoji is animated\n     * @type {?boolean}\n     */\n    this.animated = emoji.animated ?? null;\n\n    /**\n     * The emoji's name\n     * @type {?string}\n     */\n    this.name = emoji.name ?? null;\n\n    /**\n     * The emoji's id\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id;\n  }\n\n  /**\n   * Whether or not the structure has been deleted\n   * @type {boolean}\n   * @deprecated This will be removed in the next major version, see https://github.com/discordjs/discord.js/issues/7091\n   */\n  get deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Emoji#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    return deletedEmojis.has(this);\n  }\n\n  set deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Emoji#deleted is deprecated, see https://github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    if (value) deletedEmojis.add(this);\n    else deletedEmojis.delete(this);\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * The URL to the emoji file if it's a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    return this.id && this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.id && SnowflakeUtil.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.id && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.channel.send(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildId',\n      createdTimestamp: true,\n      url: true,\n      identifier: true,\n    });\n  }\n}\n\nexports.Emoji = Emoji;\nexports.deletedEmojis = deletedEmojis;\n\n/**\n * @external APIEmoji\n * @see {@link https://discord.com/developers/docs/resources/emoji#emoji-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}